"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc";
exports.ids = ["vendor-chunks/@trpc"];
exports.modules = {

/***/ "(ssr)/../../node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs":
/*!*************************************************************************!*\
  !*** ../../node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCClientError)\n/* harmony export */ });\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError || /**\n     * @deprecated\n     * Delete in next major\n     */ cause instanceof Error && cause.name === \"TRPCClientError\";\n}\nfunction isTRPCErrorResponse(obj) {\n    return (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj) && (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj.error) && typeof obj.error.code === \"number\" && typeof obj.error.message === \"string\";\n}\nclass TRPCClientError extends Error {\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) {\n                // Decorate with meta error data\n                cause.meta = {\n                    ...cause.meta,\n                    ...opts.meta\n                };\n            }\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) {\n            return new TRPCClientError(cause.error.message, {\n                ...opts,\n                result: cause\n            });\n        }\n        if (!(cause instanceof Error)) {\n            return new TRPCClientError(\"Unknown error\", {\n                ...opts,\n                cause: cause\n            });\n        }\n        return new TRPCClientError(cause.message, {\n            ...opts,\n            cause\n        });\n    }\n    constructor(message, opts){\n        const cause = opts?.cause;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.meta = opts?.meta;\n        this.cause = cause;\n        this.shape = opts?.result?.error;\n        this.data = opts?.result?.error.data;\n        this.name = \"TRPCClientError\";\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L1RSUENDbGllbnRFcnJvci0wZGU0ZDIzMS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0Q7QUFFL0QsU0FBU0Usa0JBQWtCQyxLQUFLO0lBQzVCLE9BQU9BLGlCQUFpQkMsbUJBQW1COzs7S0FHMUMsR0FBR0QsaUJBQWlCRSxTQUFTRixNQUFNRyxJQUFJLEtBQUs7QUFDakQ7QUFDQSxTQUFTQyxvQkFBb0JDLEdBQUc7SUFDNUIsT0FBT1AsZ0VBQVFBLENBQUNPLFFBQVFQLGdFQUFRQSxDQUFDTyxJQUFJQyxLQUFLLEtBQUssT0FBT0QsSUFBSUMsS0FBSyxDQUFDQyxJQUFJLEtBQUssWUFBWSxPQUFPRixJQUFJQyxLQUFLLENBQUNFLE9BQU8sS0FBSztBQUN0SDtBQUNBLE1BQU1QLHdCQUF3QkM7SUFDMUIsT0FBT08sS0FBS0MsTUFBTSxFQUFFQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQzNCLE1BQU1YLFFBQVFVO1FBQ2QsSUFBSVgsa0JBQWtCQyxRQUFRO1lBQzFCLElBQUlXLEtBQUtDLElBQUksRUFBRTtnQkFDWCxnQ0FBZ0M7Z0JBQ2hDWixNQUFNWSxJQUFJLEdBQUc7b0JBQ1QsR0FBR1osTUFBTVksSUFBSTtvQkFDYixHQUFHRCxLQUFLQyxJQUFJO2dCQUNoQjtZQUNKO1lBQ0EsT0FBT1o7UUFDWDtRQUNBLElBQUlJLG9CQUFvQkosUUFBUTtZQUM1QixPQUFPLElBQUlDLGdCQUFnQkQsTUFBTU0sS0FBSyxDQUFDRSxPQUFPLEVBQUU7Z0JBQzVDLEdBQUdHLElBQUk7Z0JBQ1BFLFFBQVFiO1lBQ1o7UUFDSjtRQUNBLElBQUksQ0FBRUEsQ0FBQUEsaUJBQWlCRSxLQUFJLEdBQUk7WUFDM0IsT0FBTyxJQUFJRCxnQkFBZ0IsaUJBQWlCO2dCQUN4QyxHQUFHVSxJQUFJO2dCQUNQWCxPQUFPQTtZQUNYO1FBQ0o7UUFDQSxPQUFPLElBQUlDLGdCQUFnQkQsTUFBTVEsT0FBTyxFQUFFO1lBQ3RDLEdBQUdHLElBQUk7WUFDUFg7UUFDSjtJQUNKO0lBQ0FjLFlBQVlOLE9BQU8sRUFBRUcsSUFBSSxDQUFDO1FBQ3RCLE1BQU1YLFFBQVFXLE1BQU1YO1FBQ3BCLDZEQUE2RDtRQUM3RCwwREFBMEQ7UUFDMUQsS0FBSyxDQUFDUSxTQUFTO1lBQ1hSO1FBQ0o7UUFDQSxJQUFJLENBQUNZLElBQUksR0FBR0QsTUFBTUM7UUFDbEIsSUFBSSxDQUFDWixLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDZSxLQUFLLEdBQUdKLE1BQU1FLFFBQVFQO1FBQzNCLElBQUksQ0FBQ1UsSUFBSSxHQUFHTCxNQUFNRSxRQUFRUCxNQUFNVTtRQUNoQyxJQUFJLENBQUNiLElBQUksR0FBRztRQUNaYyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFakIsZ0JBQWdCa0IsU0FBUztJQUN6RDtBQUNKO0FBRWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9UUlBDQ2xpZW50RXJyb3ItMGRlNGQyMzEubWpzP2ZkYzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaSBhcyBpc09iamVjdCB9IGZyb20gJy4vdHJhbnNmb3JtUmVzdWx0LWFjZTg2NGI4Lm1qcyc7XG5cbmZ1bmN0aW9uIGlzVFJQQ0NsaWVudEVycm9yKGNhdXNlKSB7XG4gICAgcmV0dXJuIGNhdXNlIGluc3RhbmNlb2YgVFJQQ0NsaWVudEVycm9yIHx8IC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogRGVsZXRlIGluIG5leHQgbWFqb3JcbiAgICAgKi8gY2F1c2UgaW5zdGFuY2VvZiBFcnJvciAmJiBjYXVzZS5uYW1lID09PSAnVFJQQ0NsaWVudEVycm9yJztcbn1cbmZ1bmN0aW9uIGlzVFJQQ0Vycm9yUmVzcG9uc2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgaXNPYmplY3Qob2JqLmVycm9yKSAmJiB0eXBlb2Ygb2JqLmVycm9yLmNvZGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmouZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZyc7XG59XG5jbGFzcyBUUlBDQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgc3RhdGljIGZyb20oX2NhdXNlLCBvcHRzID0ge30pIHtcbiAgICAgICAgY29uc3QgY2F1c2UgPSBfY2F1c2U7XG4gICAgICAgIGlmIChpc1RSUENDbGllbnRFcnJvcihjYXVzZSkpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLm1ldGEpIHtcbiAgICAgICAgICAgICAgICAvLyBEZWNvcmF0ZSB3aXRoIG1ldGEgZXJyb3IgZGF0YVxuICAgICAgICAgICAgICAgIGNhdXNlLm1ldGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmNhdXNlLm1ldGEsXG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdHMubWV0YVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2F1c2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVFJQQ0Vycm9yUmVzcG9uc2UoY2F1c2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRSUENDbGllbnRFcnJvcihjYXVzZS5lcnJvci5tZXNzYWdlLCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IGNhdXNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShjYXVzZSBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUUlBDQ2xpZW50RXJyb3IoJ1Vua25vd24gZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICBjYXVzZTogY2F1c2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVFJQQ0NsaWVudEVycm9yKGNhdXNlLm1lc3NhZ2UsIHtcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICBjYXVzZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0cyl7XG4gICAgICAgIGNvbnN0IGNhdXNlID0gb3B0cz8uY2F1c2U7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuICAgICAgICBzdXBlcihtZXNzYWdlLCB7XG4gICAgICAgICAgICBjYXVzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZXRhID0gb3B0cz8ubWV0YTtcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgICAgICB0aGlzLnNoYXBlID0gb3B0cz8ucmVzdWx0Py5lcnJvcjtcbiAgICAgICAgdGhpcy5kYXRhID0gb3B0cz8ucmVzdWx0Py5lcnJvci5kYXRhO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVFJQQ0NsaWVudEVycm9yJztcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRSUENDbGllbnRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVFJQQ0NsaWVudEVycm9yIGFzIFQgfTtcbiJdLCJuYW1lcyI6WyJpIiwiaXNPYmplY3QiLCJpc1RSUENDbGllbnRFcnJvciIsImNhdXNlIiwiVFJQQ0NsaWVudEVycm9yIiwiRXJyb3IiLCJuYW1lIiwiaXNUUlBDRXJyb3JSZXNwb25zZSIsIm9iaiIsImVycm9yIiwiY29kZSIsIm1lc3NhZ2UiLCJmcm9tIiwiX2NhdXNlIiwib3B0cyIsIm1ldGEiLCJyZXN1bHQiLCJjb25zdHJ1Y3RvciIsInNoYXBlIiwiZGF0YSIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs":
/*!***********************************************************************!*\
  !*** ../../node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createHTTPBatchLink),\n/* harmony export */   h: () => (/* binding */ httpBatchLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-0de4d231.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n/* harmony import */ var _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpUtils-f58ceda1.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\");\n\n\n\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ /**\n * A function that should never be called unless we messed something up.\n */ const throwFatalError = ()=>{\n    throw new Error(\"Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new\");\n};\n/**\n * Dataloader that's very inspired by https://github.com/graphql/dataloader\n * Less configuration, no caching, and allows you to cancel requests\n * When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n */ function dataLoader(batchLoader) {\n    let pendingItems = null;\n    let dispatchTimer = null;\n    const destroyTimerAndPendingItems = ()=>{\n        clearTimeout(dispatchTimer);\n        dispatchTimer = null;\n        pendingItems = null;\n    };\n    /**\n   * Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n   */ function groupItems(items) {\n        const groupedItems = [\n            []\n        ];\n        let index = 0;\n        while(true){\n            const item = items[index];\n            if (!item) {\n                break;\n            }\n            const lastGroup = groupedItems[groupedItems.length - 1];\n            if (item.aborted) {\n                // Item was aborted before it was dispatched\n                item.reject?.(new Error(\"Aborted\"));\n                index++;\n                continue;\n            }\n            const isValid = batchLoader.validate(lastGroup.concat(item).map((it)=>it.key));\n            if (isValid) {\n                lastGroup.push(item);\n                index++;\n                continue;\n            }\n            if (lastGroup.length === 0) {\n                item.reject?.(new Error(\"Input is too big for a single dispatch\"));\n                index++;\n                continue;\n            }\n            // Create new group, next iteration will try to add the item to that\n            groupedItems.push([]);\n        }\n        return groupedItems;\n    }\n    function dispatch() {\n        const groupedItems = groupItems(pendingItems);\n        destroyTimerAndPendingItems();\n        // Create batches for each group of items\n        for (const items of groupedItems){\n            if (!items.length) {\n                continue;\n            }\n            const batch = {\n                items,\n                cancel: throwFatalError\n            };\n            for (const item of items){\n                item.batch = batch;\n            }\n            const unitResolver = (index, value)=>{\n                const item = batch.items[index];\n                item.resolve?.(value);\n                item.batch = null;\n                item.reject = null;\n                item.resolve = null;\n            };\n            const { promise, cancel } = batchLoader.fetch(batch.items.map((_item)=>_item.key), unitResolver);\n            batch.cancel = cancel;\n            promise.then((result)=>{\n                for(let i = 0; i < result.length; i++){\n                    const value = result[i];\n                    unitResolver(i, value);\n                }\n                for (const item of batch.items){\n                    item.reject?.(new Error(\"Missing result\"));\n                    item.batch = null;\n                }\n            }).catch((cause)=>{\n                for (const item of batch.items){\n                    item.reject?.(cause);\n                    item.batch = null;\n                }\n            });\n        }\n    }\n    function load(key) {\n        const item = {\n            aborted: false,\n            key,\n            batch: null,\n            resolve: throwFatalError,\n            reject: throwFatalError\n        };\n        const promise = new Promise((resolve, reject)=>{\n            item.reject = reject;\n            item.resolve = resolve;\n            if (!pendingItems) {\n                pendingItems = [];\n            }\n            pendingItems.push(item);\n        });\n        if (!dispatchTimer) {\n            dispatchTimer = setTimeout(dispatch);\n        }\n        const cancel = ()=>{\n            item.aborted = true;\n            if (item.batch?.items.every((item)=>item.aborted)) {\n                // All items in the batch have been cancelled\n                item.batch.cancel();\n                item.batch = null;\n            }\n        };\n        return {\n            promise,\n            cancel\n        };\n    }\n    return {\n        load\n    };\n}\n/**\n * @internal\n */ function createHTTPBatchLink(requester) {\n    return function httpBatchLink(opts) {\n        const resolvedOpts = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        const maxURLLength = opts.maxURLLength ?? Infinity;\n        // initialized config\n        return (runtime)=>{\n            const batchLoader = (type)=>{\n                const validate = (batchOps)=>{\n                    if (maxURLLength === Infinity) {\n                        // escape hatch for quick calcs\n                        return true;\n                    }\n                    const path = batchOps.map((op)=>op.path).join(\",\");\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.g)({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        inputs\n                    });\n                    return url.length <= maxURLLength;\n                };\n                const fetch = requester({\n                    ...resolvedOpts,\n                    runtime,\n                    type,\n                    opts\n                });\n                return {\n                    validate,\n                    fetch\n                };\n            };\n            const query = dataLoader(batchLoader(\"query\"));\n            const mutation = dataLoader(batchLoader(\"mutation\"));\n            const subscription = dataLoader(batchLoader(\"subscription\"));\n            const loaders = {\n                query,\n                subscription,\n                mutation\n            };\n            return ({ op })=>{\n                return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const loader = loaders[op.type];\n                    const { promise, cancel } = loader.load(op);\n                    let _res = undefined;\n                    promise.then((res)=>{\n                        _res = res;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta: res.meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((err)=>{\n                        observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err, {\n                            meta: _res?.meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n            };\n        };\n    };\n}\nconst batchRequester = (requesterOpts)=>{\n    return (batchOps)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { promise, cancel } = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.j)({\n            ...requesterOpts,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        });\n        return {\n            promise: promise.then((res)=>{\n                const resJSON = Array.isArray(res.json) ? res.json : batchOps.map(()=>res.json);\n                const result = resJSON.map((item)=>({\n                        meta: res.meta,\n                        json: item\n                    }));\n                return result;\n            }),\n            cancel\n        };\n    };\n};\nconst httpBatchLink = createHTTPBatchLink(batchRequester);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs":
/*!*******************************************************************!*\
  !*** ../../node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBody),\n/* harmony export */   b: () => (/* binding */ getFetch),\n/* harmony export */   f: () => (/* binding */ fetchHTTPResponse),\n/* harmony export */   g: () => (/* binding */ getUrl),\n/* harmony export */   h: () => (/* binding */ httpRequest),\n/* harmony export */   j: () => (/* binding */ jsonHttpRequester),\n/* harmony export */   r: () => (/* binding */ resolveHTTPLinkOptions)\n/* harmony export */ });\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCClientError-0de4d231.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n\nconst isFunction = (fn)=>typeof fn === \"function\";\nfunction getFetch(customFetchImpl) {\n    if (customFetchImpl) {\n        return customFetchImpl;\n    }\n    if (false) {}\n    if (typeof globalThis !== \"undefined\" && isFunction(globalThis.fetch)) {\n        return globalThis.fetch;\n    }\n    throw new Error(\"No fetch implementation found\");\n}\nfunction getAbortController(customAbortControllerImpl) {\n    if (customAbortControllerImpl) {\n        return customAbortControllerImpl;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.AbortController) {\n        return globalThis.AbortController;\n    }\n    return null;\n}\nfunction resolveHTTPLinkOptions(opts) {\n    return {\n        url: opts.url.toString().replace(/\\/$/, \"\"),\n        fetch: opts.fetch,\n        AbortController: getAbortController(opts.AbortController)\n    };\n}\n// https://github.com/trpc/trpc/pull/669\nfunction arrayToDict(array) {\n    const dict = {};\n    for(let index = 0; index < array.length; index++){\n        const element = array[index];\n        dict[index] = element;\n    }\n    return dict;\n}\nconst METHOD = {\n    query: \"GET\",\n    mutation: \"POST\"\n};\nfunction getInput(opts) {\n    return \"input\" in opts ? opts.runtime.transformer.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.runtime.transformer.serialize(_input)));\n}\nconst getUrl = (opts)=>{\n    let url = opts.url + \"/\" + opts.path;\n    const queryParts = [];\n    if (\"inputs\" in opts) {\n        queryParts.push(\"batch=1\");\n    }\n    if (opts.type === \"query\") {\n        const input = getInput(opts);\n        if (input !== undefined) {\n            queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);\n        }\n    }\n    if (queryParts.length) {\n        url += \"?\" + queryParts.join(\"&\");\n    }\n    return url;\n};\nconst getBody = (opts)=>{\n    if (opts.type === \"query\") {\n        return undefined;\n    }\n    const input = getInput(opts);\n    return input !== undefined ? JSON.stringify(input) : undefined;\n};\nconst jsonHttpRequester = (opts)=>{\n    return httpRequest({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        getUrl,\n        getBody\n    });\n};\nasync function fetchHTTPResponse(opts, ac) {\n    const url = opts.getUrl(opts);\n    const body = opts.getBody(opts);\n    const { type } = opts;\n    const resolvedHeaders = await opts.headers();\n    /* istanbul ignore if -- @preserve */ if (type === \"subscription\") {\n        throw new Error(\"Subscriptions should use wsLink\");\n    }\n    const headers = {\n        ...opts.contentTypeHeader ? {\n            \"content-type\": opts.contentTypeHeader\n        } : {},\n        ...opts.batchModeHeader ? {\n            \"trpc-batch-mode\": opts.batchModeHeader\n        } : {},\n        ...resolvedHeaders\n    };\n    return getFetch(opts.fetch)(url, {\n        method: METHOD[type],\n        signal: ac?.signal,\n        body: body,\n        headers\n    });\n}\nfunction httpRequest(opts) {\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const meta = {};\n    let done = false;\n    const promise = new Promise((resolve, reject)=>{\n        fetchHTTPResponse(opts, ac).then((_res)=>{\n            meta.response = _res;\n            done = true;\n            return _res.json();\n        }).then((json)=>{\n            meta.responseJSON = json;\n            resolve({\n                json: json,\n                meta\n            });\n        }).catch((err)=>{\n            done = true;\n            reject(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_0__.T.from(err, {\n                meta\n            }));\n        });\n    });\n    const cancel = ()=>{\n        if (!done) {\n            ac?.abort();\n        }\n    };\n    return {\n        promise,\n        cancel\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/client/dist/index.mjs":
/*!******************************************************!*\
  !*** ../../node_modules/@trpc/client/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T),\n/* harmony export */   TRPCUntypedClient: () => (/* binding */ TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* binding */ clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* binding */ createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCUntypedClient: () => (/* binding */ createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* binding */ experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.b),\n/* harmony export */   getUntypedClient: () => (/* binding */ getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _httpBatchLink_204206a5_mjs__WEBPACK_IMPORTED_MODULE_5__.h),\n/* harmony export */   httpLink: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.s),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* binding */ unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitLink-4c75f7be.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-0de4d231.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/../../node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpUtils-f58ceda1.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\");\n/* harmony import */ var _httpBatchLink_204206a5_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpBatchLink-204206a5.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs\");\n/* harmony import */ var _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./links/httpLink.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/links/httpLink.mjs\");\n/* harmony import */ var _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./links/loggerLink.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/links/loggerLink.mjs\");\n/* harmony import */ var _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./links/wsLink.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/links/wsLink.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TRPCUntypedClient {\n    $request({ type, input, path, context = {} }) {\n        const chain$ = (0,_splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type,\n                path,\n                input,\n                context\n            }\n        });\n        return chain$.pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.share)());\n    }\n    requestAsPromise(opts) {\n        const req$ = this.$request(opts);\n        const { promise, abort } = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observableToPromise)(req$);\n        const abortablePromise = new Promise((resolve, reject)=>{\n            opts.signal?.addEventListener(\"abort\", abort);\n            promise.then((envelope)=>{\n                resolve(envelope.result.data);\n            }).catch((err)=>{\n                reject(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err));\n            });\n        });\n        return abortablePromise;\n    }\n    query(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"query\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    mutation(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"mutation\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    subscription(path, input, opts) {\n        const observable$ = this.$request({\n            type: \"subscription\",\n            path,\n            input,\n            context: opts?.context\n        });\n        return observable$.subscribe({\n            next (envelope) {\n                if (envelope.result.type === \"started\") {\n                    opts.onStarted?.();\n                } else if (envelope.result.type === \"stopped\") {\n                    opts.onStopped?.();\n                } else {\n                    opts.onData?.(envelope.result.data);\n                }\n            },\n            error (err) {\n                opts.onError?.(err);\n            },\n            complete () {\n                opts.onComplete?.();\n            }\n        });\n    }\n    constructor(opts){\n        this.requestId = 0;\n        const combinedTransformer = (()=>{\n            const transformer = opts.transformer;\n            if (!transformer) {\n                return {\n                    input: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    },\n                    output: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    }\n                };\n            }\n            if (\"input\" in transformer) {\n                return opts.transformer;\n            }\n            return {\n                input: transformer,\n                output: transformer\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (data)=>combinedTransformer.input.serialize(data),\n                deserialize: (data)=>combinedTransformer.output.deserialize(data)\n            },\n            combinedTransformer\n        };\n        // Initialize the links\n        this.links = opts.links.map((link)=>link(this.runtime));\n    }\n}\nfunction createTRPCUntypedClient(opts) {\n    return new TRPCUntypedClient(opts);\n}\nconst clientCallTypeMap = {\n    query: \"query\",\n    mutate: \"mutation\",\n    subscribe: \"subscription\"\n};\n/** @internal */ const clientCallTypeToProcedureType = (clientCallType)=>{\n    return clientCallTypeMap[clientCallType];\n};\n/**\n * @internal\n */ function createTRPCClientProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createFlatProxy)((key)=>{\n        if (client.hasOwnProperty(key)) {\n            return client[key];\n        }\n        if (key === \"__untypedClient\") {\n            return client;\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createRecursiveProxy)(({ path, args })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const procedureType = clientCallTypeToProcedureType(pathCopy.pop());\n            const fullPath = pathCopy.join(\".\");\n            return client[procedureType](fullPath, ...args);\n        });\n    });\n}\nfunction createTRPCClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    const proxy = createTRPCClientProxy(client);\n    return proxy;\n}\n/**\n * Get an untyped client from a proxy client\n * @internal\n */ function getUntypedClient(client) {\n    return client.__untypedClient;\n}\nfunction getTextDecoder(customTextDecoder) {\n    if (customTextDecoder) {\n        return customTextDecoder;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.TextDecoder) {\n        return new globalThis.TextDecoder();\n    }\n    throw new Error(\"No TextDecoder implementation found\");\n}\n// Stream parsing adapted from https://www.loginradius.com/blog/engineering/guest-post/http-streaming-with-nodejs-and-fetch-api/\n/**\n * @internal\n * @description Take a stream of bytes and call `onLine` with\n * a JSON object for each line in the stream. Expected stream\n * format is:\n * ```json\n * {\"1\": {...}\n * ,\"0\": {...}\n * }\n * ```\n */ async function parseJSONStream(opts) {\n    const parse = opts.parse ?? JSON.parse;\n    const onLine = (line)=>{\n        if (opts.signal?.aborted) return;\n        if (!line || line === \"}\") {\n            return;\n        }\n        /**\n     * At this point, `line` can be one of two things:\n     * - The first line of the stream `{\"2\":{...}`\n     * - A line in the middle of the stream `,\"2\":{...}`\n     */ const indexOfColon = line.indexOf(\":\");\n        const indexAsStr = line.substring(2, indexOfColon - 1);\n        const text = line.substring(indexOfColon + 1);\n        opts.onSingle(Number(indexAsStr), parse(text));\n    };\n    await readLines(opts.readableStream, onLine, opts.textDecoder);\n}\n/**\n * Handle transforming a stream of bytes into lines of text.\n * To avoid using AsyncIterators / AsyncGenerators,\n * we use a callback for each line.\n *\n * @param readableStream can be a NodeJS stream or a WebAPI stream\n * @param onLine will be called for every line ('\\n' delimited) in the stream\n */ async function readLines(readableStream, onLine, textDecoder) {\n    let partOfLine = \"\";\n    const onChunk = (chunk)=>{\n        const chunkText = textDecoder.decode(chunk);\n        const chunkLines = chunkText.split(\"\\n\");\n        if (chunkLines.length === 1) {\n            partOfLine += chunkLines[0];\n        } else if (chunkLines.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n            onLine(partOfLine + chunkLines[0]);\n            for(let i = 1; i < chunkLines.length - 1; i++){\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n                onLine(chunkLines[i]);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length doesn't change, so is necessarily > 1\n            partOfLine = chunkLines[chunkLines.length - 1];\n        }\n    };\n    // we handle 2 different types of streams, this if where we figure out which one we have\n    if (\"getReader\" in readableStream) {\n        await readStandardChunks(readableStream, onChunk);\n    } else {\n        await readNodeChunks(readableStream, onChunk);\n    }\n    onLine(partOfLine);\n}\n/**\n * Handle NodeJS stream\n */ function readNodeChunks(stream, onChunk) {\n    return new Promise((resolve)=>{\n        stream.on(\"data\", onChunk);\n        stream.on(\"end\", resolve);\n    });\n}\n/**\n * Handle WebAPI stream\n */ async function readStandardChunks(stream, onChunk) {\n    const reader = stream.getReader();\n    let readResult = await reader.read();\n    while(!readResult.done){\n        onChunk(readResult.value);\n        readResult = await reader.read();\n    }\n}\nconst streamingJsonHttpRequester = (opts, onSingle)=>{\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const responsePromise = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.f)({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        batchModeHeader: \"stream\",\n        getUrl: _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.g,\n        getBody: _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.a\n    }, ac);\n    const cancel = ()=>ac?.abort();\n    const promise = responsePromise.then(async (res)=>{\n        if (!res.body) throw new Error(\"Received response without body\");\n        const meta = {\n            response: res\n        };\n        return parseJSONStream({\n            readableStream: res.body,\n            onSingle,\n            parse: (string)=>({\n                    json: JSON.parse(string),\n                    meta\n                }),\n            signal: ac?.signal,\n            textDecoder: opts.textDecoder\n        });\n    });\n    return {\n        cancel,\n        promise\n    };\n};\nconst streamRequester = (requesterOpts)=>{\n    const textDecoder = getTextDecoder(requesterOpts.opts.textDecoder);\n    return (batchOps, unitResolver)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { cancel, promise } = streamingJsonHttpRequester({\n            ...requesterOpts,\n            textDecoder,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        }, (index, res)=>{\n            unitResolver(index, res);\n        });\n        return {\n            /**\n       * return an empty array because the batchLoader expects an array of results\n       * but we've already called the `unitResolver` for each of them, there's\n       * nothing left to do here.\n       */ promise: promise.then(()=>[]),\n            cancel\n        };\n    };\n};\nconst unstable_httpBatchStreamLink = (0,_httpBatchLink_204206a5_mjs__WEBPACK_IMPORTED_MODULE_5__.c)(streamRequester);\nconst getBody = (opts)=>{\n    if (!(\"input\" in opts)) {\n        return undefined;\n    }\n    if (!(opts.input instanceof FormData)) {\n        throw new Error(\"Input is not FormData\");\n    }\n    return opts.input;\n};\nconst formDataRequester = (opts)=>{\n    if (opts.type !== \"mutation\") {\n        // TODO(?) handle formdata queries\n        throw new Error(\"We only handle mutations with formdata\");\n    }\n    return (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.h)({\n        ...opts,\n        getUrl () {\n            return `${opts.url}/${opts.path}`;\n        },\n        getBody\n    });\n};\nconst experimental_formDataLink = (0,_links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory)({\n    requester: formDataRequester\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/client/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/client/dist/links/httpLink.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@trpc/client/dist/links/httpLink.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpLink: () => (/* binding */ httpLink),\n/* harmony export */   httpLinkFactory: () => (/* binding */ httpLinkFactory)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-0de4d231.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n/* harmony import */ var _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../httpUtils-f58ceda1.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\");\n\n\n\n\nfunction httpLinkFactory(factoryOpts) {\n    return (opts)=>{\n        const resolvedOpts = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        return (runtime)=>({ op })=>(0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const { path, input, type } = op;\n                    const { promise, cancel } = factoryOpts.requester({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        input,\n                        headers () {\n                            if (!opts.headers) {\n                                return {};\n                            }\n                            if (typeof opts.headers === \"function\") {\n                                return opts.headers({\n                                    op\n                                });\n                            }\n                            return opts.headers;\n                        }\n                    });\n                    let meta = undefined;\n                    promise.then((res)=>{\n                        meta = res.meta;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((cause)=>{\n                        observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(cause, {\n                            meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n    };\n}\n/**\n * @see https://trpc.io/docs/client/links/httpLink\n */ const httpLink = httpLinkFactory({\n    requester: _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.j\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2xpbmtzL2h0dHBMaW5rLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUQ7QUFDa0I7QUFDQTtBQUN5QjtBQUVoRyxTQUFTUyxnQkFBZ0JDLFdBQVc7SUFDaEMsT0FBTyxDQUFDQztRQUNKLE1BQU1DLGVBQWVOLDBEQUFzQkEsQ0FBQ0s7UUFDNUMsT0FBTyxDQUFDRSxVQUFVLENBQUMsRUFBRUMsRUFBRSxFQUFHLEdBQUdkLG1FQUFVQSxDQUFDLENBQUNlO29CQUM3QixNQUFNLEVBQUVDLElBQUksRUFBR0MsS0FBSyxFQUFHQyxJQUFJLEVBQUcsR0FBR0o7b0JBQ2pDLE1BQU0sRUFBRUssT0FBTyxFQUFHQyxNQUFNLEVBQUcsR0FBR1YsWUFBWVcsU0FBUyxDQUFDO3dCQUNoRCxHQUFHVCxZQUFZO3dCQUNmQzt3QkFDQUs7d0JBQ0FGO3dCQUNBQzt3QkFDQUs7NEJBQ0ksSUFBSSxDQUFDWCxLQUFLVyxPQUFPLEVBQUU7Z0NBQ2YsT0FBTyxDQUFDOzRCQUNaOzRCQUNBLElBQUksT0FBT1gsS0FBS1csT0FBTyxLQUFLLFlBQVk7Z0NBQ3BDLE9BQU9YLEtBQUtXLE9BQU8sQ0FBQztvQ0FDaEJSO2dDQUNKOzRCQUNKOzRCQUNBLE9BQU9ILEtBQUtXLE9BQU87d0JBQ3ZCO29CQUNKO29CQUNBLElBQUlDLE9BQU9DO29CQUNYTCxRQUFRTSxJQUFJLENBQUMsQ0FBQ0M7d0JBQ1ZILE9BQU9HLElBQUlILElBQUk7d0JBQ2YsTUFBTUksY0FBY3pCLGdFQUFlQSxDQUFDd0IsSUFBSUUsSUFBSSxFQUFFZjt3QkFDOUMsSUFBSSxDQUFDYyxZQUFZRSxFQUFFLEVBQUU7NEJBQ2pCZCxTQUFTZSxLQUFLLENBQUMxQiw0REFBZUEsQ0FBQzJCLElBQUksQ0FBQ0osWUFBWUcsS0FBSyxFQUFFO2dDQUNuRFA7NEJBQ0o7NEJBQ0E7d0JBQ0o7d0JBQ0FSLFNBQVNpQixJQUFJLENBQUM7NEJBQ1ZDLFNBQVNQLElBQUlILElBQUk7NEJBQ2pCVyxRQUFRUCxZQUFZTyxNQUFNO3dCQUM5Qjt3QkFDQW5CLFNBQVNvQixRQUFRO29CQUNyQixHQUFHQyxLQUFLLENBQUMsQ0FBQ0M7d0JBQ050QixTQUFTZSxLQUFLLENBQUMxQiw0REFBZUEsQ0FBQzJCLElBQUksQ0FBQ00sT0FBTzs0QkFDdkNkO3dCQUNKO29CQUNKO29CQUNBLE9BQU87d0JBQ0hIO29CQUNKO2dCQUNKO0lBQ1o7QUFDSjtBQUNBOztDQUVDLEdBQUcsTUFBTWtCLFdBQVc3QixnQkFBZ0I7SUFDakNZLFdBQVdiLHNEQUFpQkE7QUFDaEM7QUFFcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2xpbmtzL2h0dHBMaW5rLm1qcz8zYWVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyB0IGFzIHRyYW5zZm9ybVJlc3VsdCB9IGZyb20gJy4uL3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanMnO1xuaW1wb3J0IHsgVCBhcyBUUlBDQ2xpZW50RXJyb3IgfSBmcm9tICcuLi9UUlBDQ2xpZW50RXJyb3ItMGRlNGQyMzEubWpzJztcbmltcG9ydCB7IHIgYXMgcmVzb2x2ZUhUVFBMaW5rT3B0aW9ucywgaiBhcyBqc29uSHR0cFJlcXVlc3RlciB9IGZyb20gJy4uL2h0dHBVdGlscy1mNThjZWRhMS5tanMnO1xuXG5mdW5jdGlvbiBodHRwTGlua0ZhY3RvcnkoZmFjdG9yeU9wdHMpIHtcbiAgICByZXR1cm4gKG9wdHMpPT57XG4gICAgICAgIGNvbnN0IHJlc29sdmVkT3B0cyA9IHJlc29sdmVIVFRQTGlua09wdGlvbnMob3B0cyk7XG4gICAgICAgIHJldHVybiAocnVudGltZSk9Pih7IG9wICB9KT0+b2JzZXJ2YWJsZSgob2JzZXJ2ZXIpPT57XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcGF0aCAsIGlucHV0ICwgdHlwZSAgfSA9IG9wO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHByb21pc2UgLCBjYW5jZWwgIH0gPSBmYWN0b3J5T3B0cy5yZXF1ZXN0ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucmVzb2x2ZWRPcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdHMuaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5oZWFkZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmhlYWRlcnMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmhlYWRlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWV0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKChyZXMpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhID0gcmVzLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybVJlc3VsdChyZXMuanNvbiwgcnVudGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZm9ybWVkLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoVFJQQ0NsaWVudEVycm9yLmZyb20odHJhbnNmb3JtZWQuZXJyb3IsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiByZXMubWV0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHRyYW5zZm9ybWVkLnJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoY2F1c2UpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihUUlBDQ2xpZW50RXJyb3IuZnJvbShjYXVzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8qKlxuICogQHNlZSBodHRwczovL3RycGMuaW8vZG9jcy9jbGllbnQvbGlua3MvaHR0cExpbmtcbiAqLyBjb25zdCBodHRwTGluayA9IGh0dHBMaW5rRmFjdG9yeSh7XG4gICAgcmVxdWVzdGVyOiBqc29uSHR0cFJlcXVlc3RlclxufSk7XG5cbmV4cG9ydCB7IGh0dHBMaW5rLCBodHRwTGlua0ZhY3RvcnkgfTtcbiJdLCJuYW1lcyI6WyJvYnNlcnZhYmxlIiwidCIsInRyYW5zZm9ybVJlc3VsdCIsIlQiLCJUUlBDQ2xpZW50RXJyb3IiLCJyIiwicmVzb2x2ZUhUVFBMaW5rT3B0aW9ucyIsImoiLCJqc29uSHR0cFJlcXVlc3RlciIsImh0dHBMaW5rRmFjdG9yeSIsImZhY3RvcnlPcHRzIiwib3B0cyIsInJlc29sdmVkT3B0cyIsInJ1bnRpbWUiLCJvcCIsIm9ic2VydmVyIiwicGF0aCIsImlucHV0IiwidHlwZSIsInByb21pc2UiLCJjYW5jZWwiLCJyZXF1ZXN0ZXIiLCJoZWFkZXJzIiwibWV0YSIsInVuZGVmaW5lZCIsInRoZW4iLCJyZXMiLCJ0cmFuc2Zvcm1lZCIsImpzb24iLCJvayIsImVycm9yIiwiZnJvbSIsIm5leHQiLCJjb250ZXh0IiwicmVzdWx0IiwiY29tcGxldGUiLCJjYXRjaCIsImNhdXNlIiwiaHR0cExpbmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/client/dist/links/httpLink.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/client/dist/links/loggerLink.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@trpc/client/dist/links/loggerLink.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggerLink: () => (/* binding */ loggerLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/// <reference lib=\"dom.iterable\" />\nfunction isFormData(value) {\n    if (typeof FormData === \"undefined\") {\n        // FormData is not supported\n        return false;\n    }\n    return value instanceof FormData;\n}\nconst palettes = {\n    css: {\n        query: [\n            \"72e3ff\",\n            \"3fb0d8\"\n        ],\n        mutation: [\n            \"c5a3fc\",\n            \"904dfc\"\n        ],\n        subscription: [\n            \"ff49e1\",\n            \"d83fbe\"\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                \"\\x1b[30;46m\",\n                \"\\x1b[97;46m\"\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                \"\\x1b[30;45m\",\n                \"\\x1b[97;45m\"\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                \"\\x1b[30;42m\",\n                \"\\x1b[97;42m\"\n            ]\n        },\n        bold: {\n            query: [\n                \"\\x1b[1;30;46m\",\n                \"\\x1b[1;97;46m\"\n            ],\n            mutation: [\n                \"\\x1b[1;30;45m\",\n                \"\\x1b[1;97;45m\"\n            ],\n            subscription: [\n                \"\\x1b[1;30;42m\",\n                \"\\x1b[1;97;42m\"\n            ]\n        }\n    }\n};\nfunction constructPartsAndArgs(opts) {\n    const { direction, type, path, id, input } = opts;\n    const parts = [];\n    const args = [];\n    if (opts.colorMode === \"ansi\") {\n        const [lightRegular, darkRegular] = palettes.ansi.regular[type];\n        const [lightBold, darkBold] = palettes.ansi.bold[type];\n        const reset = \"\\x1b[0m\";\n        parts.push(direction === \"up\" ? lightRegular : darkRegular, direction === \"up\" ? \">>\" : \"<<\", type, direction === \"up\" ? lightBold : darkBold, `#${id}`, path, reset);\n        if (direction === \"up\") {\n            args.push({\n                input: opts.input\n            });\n        } else {\n            args.push({\n                input: opts.input,\n                // strip context from result cause it's too noisy in terminal wihtout collapse mode\n                result: \"result\" in opts.result ? opts.result.result : opts.result,\n                elapsedMs: opts.elapsedMs\n            });\n        }\n        return {\n            parts,\n            args\n        };\n    }\n    const [light, dark] = palettes.css[type];\n    const css = `\n    background-color: #${direction === \"up\" ? light : dark}; \n    color: ${direction === \"up\" ? \"black\" : \"white\"};\n    padding: 2px;\n  `;\n    parts.push(\"%c\", direction === \"up\" ? \">>\" : \"<<\", type, `#${id}`, `%c${path}%c`, \"%O\");\n    args.push(css, `${css}; font-weight: bold;`, `${css}; font-weight: normal;`);\n    if (direction === \"up\") {\n        args.push({\n            input,\n            context: opts.context\n        });\n    } else {\n        args.push({\n            input,\n            result: opts.result,\n            elapsedMs: opts.elapsedMs,\n            context: opts.context\n        });\n    }\n    return {\n        parts,\n        args\n    };\n}\n// maybe this should be moved to it's own package\nconst defaultLogger = ({ c = console, colorMode = \"css\" })=>(props)=>{\n        const rawInput = props.input;\n        const input = isFormData(rawInput) ? Object.fromEntries(rawInput) : rawInput;\n        const { parts, args } = constructPartsAndArgs({\n            ...props,\n            colorMode,\n            input\n        });\n        const fn = props.direction === \"down\" && props.result && (props.result instanceof Error || \"error\" in props.result.result) ? \"error\" : \"log\";\n        c[fn].apply(null, [\n            parts.join(\" \")\n        ].concat(args));\n    };\n/**\n * @see https://trpc.io/docs/client/links/loggerLink\n */ function loggerLink(opts = {}) {\n    const { enabled = ()=>true } = opts;\n    const colorMode = opts.colorMode ?? ( true ? \"ansi\" : 0);\n    const { logger = defaultLogger({\n        c: opts.console,\n        colorMode\n    }) } = opts;\n    return ()=>{\n        return ({ op, next })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                // ->\n                enabled({\n                    ...op,\n                    direction: \"up\"\n                }) && logger({\n                    ...op,\n                    direction: \"up\"\n                });\n                const requestStartTime = Date.now();\n                function logResult(result) {\n                    const elapsedMs = Date.now() - requestStartTime;\n                    enabled({\n                        ...op,\n                        direction: \"down\",\n                        result\n                    }) && logger({\n                        ...op,\n                        direction: \"down\",\n                        elapsedMs,\n                        result\n                    });\n                }\n                return next(op).pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.tap)({\n                    next (result) {\n                        logResult(result);\n                    },\n                    error (result) {\n                        logResult(result);\n                    }\n                })).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/client/dist/links/loggerLink.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/client/dist/links/wsLink.mjs":
/*!*************************************************************!*\
  !*** ../../node_modules/@trpc/client/dist/links/wsLink.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWSClient: () => (/* binding */ createWSClient),\n/* harmony export */   wsLink: () => (/* binding */ wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-0de4d231.mjs */ \"(ssr)/../../node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n\n\n\n/* istanbul ignore next -- @preserve */ const retryDelay = (attemptIndex)=>attemptIndex === 0 ? 0 : Math.min(1000 * 2 ** attemptIndex, 30000);\nconst run = (fn)=>fn();\nfunction createWSClient(opts) {\n    const { url, WebSocket: WebSocketImpl = WebSocket, retryDelayMs: retryDelayFn = retryDelay, onOpen, onClose } = opts;\n    /* istanbul ignore next -- @preserve */ if (!WebSocketImpl) {\n        throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n    }\n    /**\n   * outgoing messages buffer whilst not open\n   */ let outgoing = [];\n    const pendingRequests = Object.create(null);\n    let connectAttempt = 0;\n    let connectTimer = undefined;\n    let connectionIndex = 0;\n    let activeConnection = createConnection();\n    /**\n   * Global connection has been killed\n   */ let killed = false;\n    /**\n   * tries to send the list of messages\n   */ function dispatch() {\n        // using a timeout to batch messages\n        setTimeout(()=>{\n            if (activeConnection?.state !== \"open\") {\n                return;\n            }\n            for (const pending of Object.values(pendingRequests)){\n                if (!pending.connection) {\n                    pending.connection = activeConnection;\n                }\n            }\n            if (outgoing.length === 1) {\n                // single send\n                activeConnection.ws.send(JSON.stringify(outgoing.pop()));\n            } else {\n                // batch send\n                activeConnection.ws.send(JSON.stringify(outgoing));\n            }\n            // clear\n            outgoing = [];\n        });\n    }\n    function tryReconnect() {\n        if (!!connectTimer || killed) {\n            return;\n        }\n        const timeout = retryDelayFn(connectAttempt++);\n        reconnectInMs(timeout);\n    }\n    function reconnect() {\n        const oldConnection = activeConnection;\n        activeConnection = createConnection();\n        oldConnection && closeIfNoPending(oldConnection);\n    }\n    function reconnectInMs(ms) {\n        if (connectTimer) {\n            return;\n        }\n        connectTimer = setTimeout(reconnect, ms);\n    }\n    function closeIfNoPending(conn) {\n        // disconnect as soon as there are are no pending result\n        const hasPendingRequests = Object.values(pendingRequests).some((p)=>p.connection === conn);\n        if (!hasPendingRequests) {\n            conn.ws?.close();\n        }\n    }\n    function resumeSubscriptionOnReconnect(req) {\n        if (outgoing.some((r)=>r.id === req.op.id)) {\n            return;\n        }\n        request(req.op, req.callbacks);\n    }\n    function createConnection() {\n        const self = {\n            id: ++connectionIndex,\n            state: \"connecting\"\n        };\n        const onError = ()=>{\n            self.state = \"closed\";\n            if (self === activeConnection) {\n                tryReconnect();\n            }\n        };\n        run(async ()=>{\n            const urlString = typeof url === \"function\" ? await url() : url;\n            const ws = new WebSocketImpl(urlString);\n            self.ws = ws;\n            clearTimeout(connectTimer);\n            connectTimer = undefined;\n            ws.addEventListener(\"open\", ()=>{\n                /* istanbul ignore next -- @preserve */ if (activeConnection?.ws !== ws) {\n                    return;\n                }\n                connectAttempt = 0;\n                self.state = \"open\";\n                onOpen?.();\n                dispatch();\n            });\n            ws.addEventListener(\"error\", onError);\n            const handleIncomingRequest = (req)=>{\n                if (self !== activeConnection) {\n                    return;\n                }\n                if (req.method === \"reconnect\") {\n                    reconnect();\n                    // notify subscribers\n                    for (const pendingReq of Object.values(pendingRequests)){\n                        if (pendingReq.type === \"subscription\") {\n                            resumeSubscriptionOnReconnect(pendingReq);\n                        }\n                    }\n                }\n            };\n            const handleIncomingResponse = (data)=>{\n                const req = data.id !== null && pendingRequests[data.id];\n                if (!req) {\n                    // do something?\n                    return;\n                }\n                req.callbacks.next?.(data);\n                if (self === activeConnection && req.connection !== activeConnection) {\n                    // gracefully replace old connection with this\n                    const oldConn = req.connection;\n                    req.connection = self;\n                    oldConn && closeIfNoPending(oldConn);\n                }\n                if (\"result\" in data && data.result.type === \"stopped\" && activeConnection === self) {\n                    req.callbacks.complete();\n                }\n            };\n            ws.addEventListener(\"message\", ({ data })=>{\n                const msg = JSON.parse(data);\n                if (\"method\" in msg) {\n                    handleIncomingRequest(msg);\n                } else {\n                    handleIncomingResponse(msg);\n                }\n                if (self !== activeConnection) {\n                    // when receiving a message, we close old connection that has no pending requests\n                    closeIfNoPending(self);\n                }\n            });\n            ws.addEventListener(\"close\", ({ code })=>{\n                if (self.state === \"open\") {\n                    onClose?.({\n                        code\n                    });\n                }\n                self.state = \"closed\";\n                if (activeConnection === self) {\n                    // connection might have been replaced already\n                    tryReconnect();\n                }\n                for (const [key, req] of Object.entries(pendingRequests)){\n                    if (req.connection !== self) {\n                        continue;\n                    }\n                    if (self.state === \"closed\") {\n                        // If the connection was closed, we just call `complete()` on the request\n                        delete pendingRequests[key];\n                        req.callbacks.complete?.();\n                        continue;\n                    }\n                    // The connection was closed either unexpectedly or because of a reconnect\n                    if (req.type === \"subscription\") {\n                        // Subscriptions will resume after we've reconnected\n                        resumeSubscriptionOnReconnect(req);\n                    } else {\n                        // Queries and mutations will error if interrupted\n                        delete pendingRequests[key];\n                        req.callbacks.error?.(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(new TRPCWebSocketClosedError(\"WebSocket closed prematurely\")));\n                    }\n                }\n            });\n        }).catch(onError);\n        return self;\n    }\n    function request(op, callbacks) {\n        const { type, input, path, id } = op;\n        const envelope = {\n            id,\n            method: type,\n            params: {\n                input,\n                path\n            }\n        };\n        pendingRequests[id] = {\n            connection: null,\n            type,\n            callbacks,\n            op\n        };\n        // enqueue message\n        outgoing.push(envelope);\n        dispatch();\n        return ()=>{\n            const callbacks = pendingRequests[id]?.callbacks;\n            delete pendingRequests[id];\n            outgoing = outgoing.filter((msg)=>msg.id !== id);\n            callbacks?.complete?.();\n            if (activeConnection?.state === \"open\" && op.type === \"subscription\") {\n                outgoing.push({\n                    id,\n                    method: \"subscription.stop\"\n                });\n                dispatch();\n            }\n        };\n    }\n    return {\n        close: ()=>{\n            killed = true;\n            for (const req of Object.values(pendingRequests)){\n                if (req.type === \"subscription\") {\n                    req.callbacks.complete();\n                } else if (!req.connection) {\n                    // close pending requests that aren't attached to a connection yet\n                    req.callbacks.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(new Error(\"Closed before connection was established\")));\n                }\n            }\n            activeConnection && closeIfNoPending(activeConnection);\n            clearTimeout(connectTimer);\n            connectTimer = undefined;\n        },\n        request,\n        getConnection () {\n            return activeConnection;\n        }\n    };\n}\nclass TRPCWebSocketClosedError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"TRPCWebSocketClosedError\";\n        Object.setPrototypeOf(this, TRPCWebSocketClosedError.prototype);\n    }\n}\n/**\n * @see https://trpc.io/docs/client/links/wsLink\n */ function wsLink(opts) {\n    return (runtime)=>{\n        const { client } = opts;\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const { type, path, id, context } = op;\n                const input = runtime.transformer.serialize(op.input);\n                const unsub = client.request({\n                    type,\n                    path,\n                    input,\n                    id,\n                    context\n                }, {\n                    error (err) {\n                        observer.error(err);\n                        unsub();\n                    },\n                    complete () {\n                        observer.complete();\n                    },\n                    next (message) {\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(message, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error));\n                            return;\n                        }\n                        observer.next({\n                            result: transformed.result\n                        });\n                        if (op.type !== \"subscription\") {\n                            // if it isn't a subscription we don't care about next response\n                            unsub();\n                            observer.complete();\n                        }\n                    }\n                });\n                return ()=>{\n                    unsub();\n                };\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/client/dist/links/wsLink.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs":
/*!*******************************************************************!*\
  !*** ../../node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createChain),\n/* harmony export */   s: () => (/* binding */ splitLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/** @internal */ function createChain(opts) {\n    return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n        function execute(index = 0, op = opts.op) {\n            const next = opts.links[index];\n            if (!next) {\n                throw new Error(\"No more links to execute - did you forget to add an ending link?\");\n            }\n            const subscription = next({\n                op,\n                next (nextOp) {\n                    const nextObserver = execute(index + 1, nextOp);\n                    return nextObserver;\n                }\n            });\n            return subscription;\n        }\n        const obs$ = execute();\n        return obs$.subscribe(observer);\n    });\n}\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction splitLink(opts) {\n    return (runtime)=>{\n        const yes = asArray(opts.true).map((link)=>link(runtime));\n        const no = asArray(opts.false).map((link)=>link(runtime));\n        return (props)=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const links = opts.condition(props.op) ? yes : no;\n                return createChain({\n                    op: props.op,\n                    links\n                }).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3NwbGl0TGluay00Yzc1ZjdiZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELGNBQWMsR0FBRyxTQUFTQyxZQUFZQyxJQUFJO0lBQ3RDLE9BQU9GLG1FQUFVQSxDQUFDLENBQUNHO1FBQ2YsU0FBU0MsUUFBUUMsUUFBUSxDQUFDLEVBQUVDLEtBQUtKLEtBQUtJLEVBQUU7WUFDcEMsTUFBTUMsT0FBT0wsS0FBS00sS0FBSyxDQUFDSCxNQUFNO1lBQzlCLElBQUksQ0FBQ0UsTUFBTTtnQkFDUCxNQUFNLElBQUlFLE1BQU07WUFDcEI7WUFDQSxNQUFNQyxlQUFlSCxLQUFLO2dCQUN0QkQ7Z0JBQ0FDLE1BQU1JLE1BQU07b0JBQ1IsTUFBTUMsZUFBZVIsUUFBUUMsUUFBUSxHQUFHTTtvQkFDeEMsT0FBT0M7Z0JBQ1g7WUFDSjtZQUNBLE9BQU9GO1FBQ1g7UUFDQSxNQUFNRyxPQUFPVDtRQUNiLE9BQU9TLEtBQUtDLFNBQVMsQ0FBQ1g7SUFDMUI7QUFDSjtBQUVBLFNBQVNZLFFBQVFDLEtBQUs7SUFDbEIsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixTQUFTQSxRQUFRO1FBQ2xDQTtLQUNIO0FBQ0w7QUFDQSxTQUFTRyxVQUFVakIsSUFBSTtJQUNuQixPQUFPLENBQUNrQjtRQUNKLE1BQU1DLE1BQU1OLFFBQVFiLEtBQUtvQixJQUFJLEVBQUVDLEdBQUcsQ0FBQyxDQUFDQyxPQUFPQSxLQUFLSjtRQUNoRCxNQUFNSyxLQUFLVixRQUFRYixLQUFLd0IsS0FBSyxFQUFFSCxHQUFHLENBQUMsQ0FBQ0MsT0FBT0EsS0FBS0o7UUFDaEQsT0FBTyxDQUFDTztZQUNKLE9BQU8zQixtRUFBVUEsQ0FBQyxDQUFDRztnQkFDZixNQUFNSyxRQUFRTixLQUFLMEIsU0FBUyxDQUFDRCxNQUFNckIsRUFBRSxJQUFJZSxNQUFNSTtnQkFDL0MsT0FBT3hCLFlBQVk7b0JBQ2ZLLElBQUlxQixNQUFNckIsRUFBRTtvQkFDWkU7Z0JBQ0osR0FBR00sU0FBUyxDQUFDWDtZQUNqQjtRQUNKO0lBQ0o7QUFDSjtBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3Qvc3BsaXRMaW5rLTRjNzVmN2JlLm1qcz9iYjc3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5cbi8qKiBAaW50ZXJuYWwgKi8gZnVuY3Rpb24gY3JlYXRlQ2hhaW4ob3B0cykge1xuICAgIHJldHVybiBvYnNlcnZhYmxlKChvYnNlcnZlcik9PntcbiAgICAgICAgZnVuY3Rpb24gZXhlY3V0ZShpbmRleCA9IDAsIG9wID0gb3B0cy5vcCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IG9wdHMubGlua3NbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb3JlIGxpbmtzIHRvIGV4ZWN1dGUgLSBkaWQgeW91IGZvcmdldCB0byBhZGQgYW4gZW5kaW5nIGxpbms/Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBuZXh0KHtcbiAgICAgICAgICAgICAgICBvcCxcbiAgICAgICAgICAgICAgICBuZXh0IChuZXh0T3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dE9ic2VydmVyID0gZXhlY3V0ZShpbmRleCArIDEsIG5leHRPcCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0T2JzZXJ2ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9icyQgPSBleGVjdXRlKCk7XG4gICAgICAgIHJldHVybiBvYnMkLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtcbiAgICAgICAgdmFsdWVcbiAgICBdO1xufVxuZnVuY3Rpb24gc3BsaXRMaW5rKG9wdHMpIHtcbiAgICByZXR1cm4gKHJ1bnRpbWUpPT57XG4gICAgICAgIGNvbnN0IHllcyA9IGFzQXJyYXkob3B0cy50cnVlKS5tYXAoKGxpbmspPT5saW5rKHJ1bnRpbWUpKTtcbiAgICAgICAgY29uc3Qgbm8gPSBhc0FycmF5KG9wdHMuZmFsc2UpLm1hcCgobGluayk9PmxpbmsocnVudGltZSkpO1xuICAgICAgICByZXR1cm4gKHByb3BzKT0+e1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGUoKG9ic2VydmVyKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gb3B0cy5jb25kaXRpb24ocHJvcHMub3ApID8geWVzIDogbm87XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNoYWluKHtcbiAgICAgICAgICAgICAgICAgICAgb3A6IHByb3BzLm9wLFxuICAgICAgICAgICAgICAgICAgICBsaW5rc1xuICAgICAgICAgICAgICAgIH0pLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjcmVhdGVDaGFpbiBhcyBjLCBzcGxpdExpbmsgYXMgcyB9O1xuIl0sIm5hbWVzIjpbIm9ic2VydmFibGUiLCJjcmVhdGVDaGFpbiIsIm9wdHMiLCJvYnNlcnZlciIsImV4ZWN1dGUiLCJpbmRleCIsIm9wIiwibmV4dCIsImxpbmtzIiwiRXJyb3IiLCJzdWJzY3JpcHRpb24iLCJuZXh0T3AiLCJuZXh0T2JzZXJ2ZXIiLCJvYnMkIiwic3Vic2NyaWJlIiwiYXNBcnJheSIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5Iiwic3BsaXRMaW5rIiwicnVudGltZSIsInllcyIsInRydWUiLCJtYXAiLCJsaW5rIiwibm8iLCJmYWxzZSIsInByb3BzIiwiY29uZGl0aW9uIiwiYyIsInMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs":
/*!*************************************************************************!*\
  !*** ../../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   t: () => (/* binding */ transformResult)\n/* harmony export */ });\nfunction isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */ function transformResultInner(response, runtime) {\n    if (\"error\" in response) {\n        const error = runtime.transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === \"data\") && {\n            type: \"data\",\n            data: runtime.transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nclass TransformResultError extends Error {\n    constructor(){\n        super(\"Unable to transform response from server\");\n    }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */ function transformResult(response, runtime) {\n    let result;\n    try {\n        // Use the data transformers on the JSON-response\n        result = transformResultInner(response, runtime);\n    } catch (err) {\n        throw new TransformResultError();\n    }\n    // check that output of the transformers is a valid TRPCResponse\n    if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== \"number\")) {\n        throw new TransformResultError();\n    }\n    if (result.ok && !isObject(result.result)) {\n        throw new TransformResultError();\n    }\n    return result;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxTQUFTQyxLQUFLO0lBQ25CLDZCQUE2QjtJQUM3QixPQUFPLENBQUMsQ0FBQ0EsU0FBUyxDQUFDQyxNQUFNQyxPQUFPLENBQUNGLFVBQVUsT0FBT0EsVUFBVTtBQUNoRTtBQUVBLFNBQVM7QUFDVCwrQ0FBK0M7QUFDL0MsbUVBQW1FO0FBQ25FLGNBQWMsR0FBRyxTQUFTRyxxQkFBcUJDLFFBQVEsRUFBRUMsT0FBTztJQUM1RCxJQUFJLFdBQVdELFVBQVU7UUFDckIsTUFBTUUsUUFBUUQsUUFBUUUsV0FBVyxDQUFDQyxXQUFXLENBQUNKLFNBQVNFLEtBQUs7UUFDNUQsT0FBTztZQUNIRyxJQUFJO1lBQ0pILE9BQU87Z0JBQ0gsR0FBR0YsUUFBUTtnQkFDWEU7WUFDSjtRQUNKO0lBQ0o7SUFDQSxNQUFNSSxTQUFTO1FBQ1gsR0FBR04sU0FBU00sTUFBTTtRQUNsQixHQUFHLENBQUMsQ0FBQ04sU0FBU00sTUFBTSxDQUFDQyxJQUFJLElBQUlQLFNBQVNNLE1BQU0sQ0FBQ0MsSUFBSSxLQUFLLE1BQUssS0FBTTtZQUM3REEsTUFBTTtZQUNOQyxNQUFNUCxRQUFRRSxXQUFXLENBQUNDLFdBQVcsQ0FBQ0osU0FBU00sTUFBTSxDQUFDRSxJQUFJO1FBQzlELENBQUM7SUFDTDtJQUNBLE9BQU87UUFDSEgsSUFBSTtRQUNKQztJQUNKO0FBQ0o7QUFDQSxNQUFNRyw2QkFBNkJDO0lBQy9CQyxhQUFhO1FBQ1QsS0FBSyxDQUFDO0lBQ1Y7QUFDSjtBQUNBOzs7Q0FHQyxHQUFHLFNBQVNDLGdCQUFnQlosUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlLO0lBQ0osSUFBSTtRQUNBLGlEQUFpRDtRQUNqREEsU0FBU1AscUJBQXFCQyxVQUFVQztJQUM1QyxFQUFFLE9BQU9ZLEtBQUs7UUFDVixNQUFNLElBQUlKO0lBQ2Q7SUFDQSxnRUFBZ0U7SUFDaEUsSUFBSSxDQUFDSCxPQUFPRCxFQUFFLElBQUssRUFBQ1YsU0FBU1csT0FBT0osS0FBSyxDQUFDQSxLQUFLLEtBQUssT0FBT0ksT0FBT0osS0FBSyxDQUFDQSxLQUFLLENBQUNZLElBQUksS0FBSyxRQUFPLEdBQUk7UUFDOUYsTUFBTSxJQUFJTDtJQUNkO0lBQ0EsSUFBSUgsT0FBT0QsRUFBRSxJQUFJLENBQUNWLFNBQVNXLE9BQU9BLE1BQU0sR0FBRztRQUN2QyxNQUFNLElBQUlHO0lBQ2Q7SUFDQSxPQUFPSDtBQUNYO0FBRStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzP2IxODIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAvLyBjaGVjayB0aGF0IHZhbHVlIGlzIG9iamVjdFxuICAgIHJldHVybiAhIXZhbHVlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xufVxuXG4vLyBGSVhNRTpcbi8vIC0gdGhlIGdlbmVyaWNzIGhlcmUgYXJlIHByb2JhYmx5IHVubmVjZXNzYXJ5XG4vLyAtIHRoZSBSUEMtc3BlYyBjb3VsZCBwcm9iYWJseSBiZSBzaW1wbGlmaWVkIHRvIGNvbWJpbmUgSFRUUCArIFdTXG4vKiogQGludGVybmFsICovIGZ1bmN0aW9uIHRyYW5zZm9ybVJlc3VsdElubmVyKHJlc3BvbnNlLCBydW50aW1lKSB7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBydW50aW1lLnRyYW5zZm9ybWVyLmRlc2VyaWFsaXplKHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAuLi5yZXNwb25zZS5yZXN1bHQsXG4gICAgICAgIC4uLighcmVzcG9uc2UucmVzdWx0LnR5cGUgfHwgcmVzcG9uc2UucmVzdWx0LnR5cGUgPT09ICdkYXRhJykgJiYge1xuICAgICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgICAgZGF0YTogcnVudGltZS50cmFuc2Zvcm1lci5kZXNlcmlhbGl6ZShyZXNwb25zZS5yZXN1bHQuZGF0YSlcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIHJlc3VsdFxuICAgIH07XG59XG5jbGFzcyBUcmFuc2Zvcm1SZXN1bHRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcignVW5hYmxlIHRvIHRyYW5zZm9ybSByZXNwb25zZSBmcm9tIHNlcnZlcicpO1xuICAgIH1cbn1cbi8qKlxuICogVHJhbnNmb3JtcyBhbmQgdmFsaWRhdGVzIHRoYXQgdGhlIHJlc3VsdCBpcyBhIHZhbGlkIFRSUENSZXNwb25zZVxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gdHJhbnNmb3JtUmVzdWx0KHJlc3BvbnNlLCBydW50aW1lKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICAvLyBVc2UgdGhlIGRhdGEgdHJhbnNmb3JtZXJzIG9uIHRoZSBKU09OLXJlc3BvbnNlXG4gICAgICAgIHJlc3VsdCA9IHRyYW5zZm9ybVJlc3VsdElubmVyKHJlc3BvbnNlLCBydW50aW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIC8vIGNoZWNrIHRoYXQgb3V0cHV0IG9mIHRoZSB0cmFuc2Zvcm1lcnMgaXMgYSB2YWxpZCBUUlBDUmVzcG9uc2VcbiAgICBpZiAoIXJlc3VsdC5vayAmJiAoIWlzT2JqZWN0KHJlc3VsdC5lcnJvci5lcnJvcikgfHwgdHlwZW9mIHJlc3VsdC5lcnJvci5lcnJvci5jb2RlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQub2sgJiYgIWlzT2JqZWN0KHJlc3VsdC5yZXN1bHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUcmFuc2Zvcm1SZXN1bHRFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyBpc09iamVjdCBhcyBpLCB0cmFuc2Zvcm1SZXN1bHQgYXMgdCB9O1xuIl0sIm5hbWVzIjpbImlzT2JqZWN0IiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJ0cmFuc2Zvcm1SZXN1bHRJbm5lciIsInJlc3BvbnNlIiwicnVudGltZSIsImVycm9yIiwidHJhbnNmb3JtZXIiLCJkZXNlcmlhbGl6ZSIsIm9rIiwicmVzdWx0IiwidHlwZSIsImRhdGEiLCJUcmFuc2Zvcm1SZXN1bHRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJ0cmFuc2Zvcm1SZXN1bHQiLCJlcnIiLCJjb2RlIiwiaSIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/react-query/dist/createHooksInternal-3d8ebfcf.mjs":
/*!**********************************************************************************!*\
  !*** ../../node_modules/@trpc/react-query/dist/createHooksInternal-3d8ebfcf.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ createReactDecoration),\n/* harmony export */   b: () => (/* binding */ createUseQueries),\n/* harmony export */   c: () => (/* binding */ createRootHooks),\n/* harmony export */   g: () => (/* binding */ getClientArgs)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/../../node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/@tanstack/react-query/build/modern/useQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/@tanstack/react-query/build/modern/useSuspenseQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/@tanstack/react-query/build/modern/useMutation.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/@tanstack/react-query/build/modern/useInfiniteQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/@tanstack/react-query/build/modern/useSuspenseInfiniteQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/@tanstack/react-query/build/modern/useQueries.js\");\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/../../node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utilsProxy-00894da2.mjs */ \"(ssr)/../../node_modules/@trpc/react-query/dist/utilsProxy-00894da2.mjs\");\n\n\n\n\n\n/**\n * Create proxy for decorating procedures\n * @internal\n */ function createReactDecoration(name, hooks) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)(({ path, args })=>{\n        const pathCopy = [\n            name,\n            ...path\n        ];\n        // The last arg is for instance `.useMutation` or `.useQuery()`\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const lastArg = pathCopy.pop();\n        if (lastArg === \"useMutation\") {\n            return hooks[lastArg](pathCopy, ...args);\n        }\n        if (lastArg === \"_def\") {\n            return {\n                path: pathCopy\n            };\n        }\n        const [input, ...rest] = args;\n        const opts = rest[0] || {};\n        return hooks[lastArg](pathCopy, input, opts);\n    });\n}\n/**\n * Create proxy for `useQueries` options\n * @internal\n */ function createUseQueries(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)((opts)=>{\n        const arrayPath = opts.path;\n        const dotPath = arrayPath.join(\".\");\n        const [input, _opts] = opts.args;\n        const options = {\n            queryKey: (0,_utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(arrayPath, input, \"query\"),\n            queryFn: ()=>{\n                return client.query(dotPath, input, _opts?.trpc);\n            },\n            ..._opts\n        };\n        return options;\n    });\n}\nfunction getClientArgs(queryKey, opts, pageParam) {\n    const path = queryKey[0];\n    const input = queryKey[1]?.input;\n    if (pageParam) input.cursor = pageParam;\n    return [\n        path.join(\".\"),\n        input,\n        opts?.trpc\n    ];\n}\n/**\n * Makes a stable reference of the `trpc` prop\n */ function useHookResult(value) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(value);\n    ref.current.path = value.path;\n    return ref.current;\n}\n/**\n * @internal\n */ function createRootHooks(config) {\n    const mutationSuccessOverride = config?.overrides?.useMutation?.onSuccess ?? ((options)=>options.originalFn());\n    const Context = config?.context ?? _utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_3__.T;\n    const createClient = (opts)=>{\n        return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_1__.createTRPCUntypedClient)(opts);\n    };\n    const TRPCProvider = (props)=>{\n        const { abortOnUnmount = false, client, queryClient, ssrContext } = props;\n        const [ssrState, setSSRState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(props.ssrState ?? false);\n        (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n            // Only updating state to `mounted` if we are using SSR.\n            // This makes it so we don't have an unnecessary re-render when opting out of SSR.\n            setSSRState((state)=>state ? \"mounted\" : false);\n        }, []);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(Context.Provider, {\n            value: {\n                abortOnUnmount,\n                queryClient,\n                client,\n                ssrContext: ssrContext ?? null,\n                ssrState,\n                fetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, opts)=>{\n                    return queryClient.fetchQuery({\n                        ...opts,\n                        queryKey,\n                        queryFn: ()=>client.query(...getClientArgs(queryKey, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                fetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, opts)=>{\n                    return queryClient.fetchInfiniteQuery({\n                        ...opts,\n                        queryKey,\n                        queryFn: ({ pageParam })=>{\n                            return client.query(...getClientArgs(queryKey, opts, pageParam));\n                        },\n                        initialPageParam: opts?.initialCursor ?? null\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, opts)=>{\n                    return queryClient.prefetchQuery({\n                        ...opts,\n                        queryKey,\n                        queryFn: ()=>client.query(...getClientArgs(queryKey, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, opts)=>{\n                    return queryClient.prefetchInfiniteQuery({\n                        ...opts,\n                        queryKey,\n                        queryFn: ({ pageParam })=>{\n                            return client.query(...getClientArgs(queryKey, opts, pageParam));\n                        },\n                        initialPageParam: opts?.initialCursor ?? null\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                ensureQueryData: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, opts)=>{\n                    return queryClient.ensureQueryData({\n                        ...opts,\n                        queryKey,\n                        queryFn: ()=>client.query(...getClientArgs(queryKey, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                invalidateQueries: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, filters, options)=>{\n                    return queryClient.invalidateQueries({\n                        ...filters,\n                        queryKey\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                resetQueries: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, filters, options)=>{\n                    return queryClient.resetQueries({\n                        ...filters,\n                        queryKey\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                refetchQueries: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, filters, options)=>{\n                    return queryClient.refetchQueries({\n                        ...filters,\n                        queryKey\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                cancelQuery: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, options)=>{\n                    return queryClient.cancelQueries({\n                        queryKey\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                setQueryData: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, updater, options)=>{\n                    return queryClient.setQueryData(queryKey, updater, options);\n                }, [\n                    queryClient\n                ]),\n                getQueryData: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey)=>{\n                    return queryClient.getQueryData(queryKey);\n                }, [\n                    queryClient\n                ]),\n                setInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey, updater, options)=>{\n                    return queryClient.setQueryData(queryKey, updater, options);\n                }, [\n                    queryClient\n                ]),\n                getInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((queryKey)=>{\n                    return queryClient.getQueryData(queryKey);\n                }, [\n                    queryClient\n                ])\n            }\n        }, props.children);\n    };\n    function useContext() {\n        const context = react__WEBPACK_IMPORTED_MODULE_2__.useContext(Context);\n        if (!context) {\n            throw new Error(\"Unable to find tRPC Context. Did you forget to wrap your App inside `withTRPC` HoC?\");\n        }\n        return context;\n    }\n    /**\n   * Hack to make sure errors return `status`='error` when doing SSR\n   * @link https://github.com/trpc/trpc/pull/1645\n   */ function useSSRQueryOptionsIfNeeded(queryKey, opts) {\n        const { queryClient, ssrState } = useContext();\n        return ssrState && ssrState !== \"mounted\" && queryClient.getQueryCache().find({\n            queryKey\n        })?.state.status === \"error\" ? {\n            retryOnMount: false,\n            ...opts\n        } : opts;\n    }\n    function useQuery$1(path, input, opts) {\n        const context = useContext();\n        const { abortOnUnmount, client, ssrState, queryClient, prefetchQuery } = context;\n        const queryKey = (0,_utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(path, input, \"query\");\n        const defaultOpts = queryClient.getQueryDefaults(queryKey);\n        if ( true && ssrState === \"prepass\" && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find({\n            queryKey\n        })) {\n            void prefetchQuery(queryKey, opts);\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(queryKey, {\n            ...defaultOpts,\n            ...opts\n        });\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? config?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useQuery)({\n            ...ssrOpts,\n            queryKey: queryKey,\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                return client.query(...getClientArgs(queryKey, actualOpts));\n            }\n        }, queryClient);\n        hook.trpc = useHookResult({\n            path: path.join(\".\")\n        });\n        return hook;\n    }\n    function useSuspenseQuery$1(path, input, opts) {\n        const context = useContext();\n        const queryKey = (0,_utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(path, input, \"query\");\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? config?.abortOnUnmount ?? context.abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.useSuspenseQuery)({\n            ...opts,\n            queryKey: queryKey,\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    trpc: {\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                return context.client.query(...getClientArgs(queryKey, actualOpts));\n            }\n        }, context.queryClient);\n        hook.trpc = useHookResult({\n            path: path.join(\".\")\n        });\n        return [\n            hook.data,\n            hook\n        ];\n    }\n    function useMutation$1(path, opts) {\n        const { client } = useContext();\n        const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__.useQueryClient)();\n        const mutationKey = [\n            path\n        ];\n        const defaultOpts = queryClient.getMutationDefaults(mutationKey);\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__.useMutation)({\n            ...opts,\n            mutationKey: mutationKey,\n            mutationFn: (input)=>{\n                return client.mutation(...getClientArgs([\n                    path,\n                    {\n                        input\n                    }\n                ], opts));\n            },\n            onSuccess (...args) {\n                const originalFn = ()=>opts?.onSuccess?.(...args) ?? defaultOpts?.onSuccess?.(...args);\n                return mutationSuccessOverride({\n                    originalFn,\n                    queryClient,\n                    meta: opts?.meta ?? defaultOpts?.meta ?? {}\n                });\n            }\n        }, queryClient);\n        hook.trpc = useHookResult({\n            path: path.join(\".\")\n        });\n        return hook;\n    }\n    /* istanbul ignore next -- @preserve */ function useSubscription(path, input, opts) {\n        const enabled = opts?.enabled ?? true;\n        const queryKey = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.hashKey)((0,_utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(path, input, \"any\"));\n        const { client } = useContext();\n        const optsRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(opts);\n        optsRef.current = opts;\n        (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n            if (!enabled) {\n                return;\n            }\n            let isStopped = false;\n            const subscription = client.subscription(path.join(\".\"), input ?? undefined, {\n                onStarted: ()=>{\n                    if (!isStopped) {\n                        optsRef.current.onStarted?.();\n                    }\n                },\n                onData: (data)=>{\n                    if (!isStopped) {\n                        opts.onData(data);\n                    }\n                },\n                onError: (err)=>{\n                    if (!isStopped) {\n                        optsRef.current.onError?.(err);\n                    }\n                }\n            });\n            return ()=>{\n                isStopped = true;\n                subscription.unsubscribe();\n            };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            queryKey,\n            enabled\n        ]);\n    }\n    function useInfiniteQuery$1(path, input, opts) {\n        const { client, ssrState, prefetchInfiniteQuery, queryClient, abortOnUnmount } = useContext();\n        const queryKey = (0,_utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(path, input, \"infinite\");\n        const defaultOpts = queryClient.getQueryDefaults(queryKey);\n        if ( true && ssrState === \"prepass\" && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find({\n            queryKey\n        })) {\n            void prefetchInfiniteQuery(queryKey, {\n                ...defaultOpts,\n                ...opts\n            });\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(queryKey, {\n            ...defaultOpts,\n            ...opts\n        });\n        // request option should take priority over global\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useInfiniteQuery)({\n            ...ssrOpts,\n            initialPageParam: opts.initialCursor ?? null,\n            persister: opts.persister,\n            queryKey: queryKey,\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                return client.query(...getClientArgs(queryKey, actualOpts, queryFunctionContext.pageParam ?? opts.initialCursor));\n            }\n        }, queryClient);\n        hook.trpc = useHookResult({\n            path: path.join(\".\")\n        });\n        return hook;\n    }\n    function useSuspenseInfiniteQuery$1(path, input, opts) {\n        const context = useContext();\n        const queryKey = (0,_utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(path, input, \"infinite\");\n        const defaultOpts = context.queryClient.getQueryDefaults(queryKey);\n        const ssrOpts = useSSRQueryOptionsIfNeeded(queryKey, {\n            ...defaultOpts,\n            ...opts\n        });\n        // request option should take priority over global\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? context.abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useSuspenseInfiniteQuery)({\n            ...opts,\n            initialPageParam: opts.initialCursor ?? null,\n            queryKey,\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                return context.client.query(...getClientArgs(queryKey, actualOpts, queryFunctionContext.pageParam ?? opts.initialCursor));\n            }\n        }, context.queryClient);\n        hook.trpc = useHookResult({\n            path: path.join(\".\")\n        });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return [\n            hook.data,\n            hook\n        ];\n    }\n    const useQueries$1 = (queriesCallback)=>{\n        const { ssrState, queryClient, prefetchQuery, client } = useContext();\n        const proxy = createUseQueries(client);\n        const queries = queriesCallback(proxy);\n        if ( true && ssrState === \"prepass\") {\n            for (const query of queries){\n                const queryOption = query;\n                if (queryOption.trpc?.ssr !== false && !queryClient.getQueryCache().find({\n                    queryKey: queryOption.queryKey\n                })) {\n                    void prefetchQuery(queryOption.queryKey, queryOption);\n                }\n            }\n        }\n        return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueries)({\n            queries: queries.map((query)=>({\n                    ...query,\n                    queryKey: query.queryKey\n                }))\n        }, queryClient);\n    };\n    const useDehydratedState = (client, trpcState)=>{\n        const transformed = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n            if (!trpcState) {\n                return trpcState;\n            }\n            return client.runtime.transformer.deserialize(trpcState);\n        }, [\n            trpcState,\n            client\n        ]);\n        return transformed;\n    };\n    return {\n        Provider: TRPCProvider,\n        createClient,\n        useContext,\n        useUtils: useContext,\n        useQuery: useQuery$1,\n        useSuspenseQuery: useSuspenseQuery$1,\n        useQueries: useQueries$1,\n        useMutation: useMutation$1,\n        useSubscription,\n        useDehydratedState,\n        useInfiniteQuery: useInfiniteQuery$1,\n        useSuspenseInfiniteQuery: useSuspenseInfiniteQuery$1\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3JlYWN0LXF1ZXJ5L2Rpc3QvY3JlYXRlSG9va3NJbnRlcm5hbC0zZDhlYmZjZi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEyRDtBQUNzRztBQUMxRztBQUMwQjtBQUNNO0FBRXZGOzs7Q0FHQyxHQUFHLFNBQVNvQixzQkFBc0JDLElBQUksRUFBRUMsS0FBSztJQUMxQyxPQUFPdEIseUVBQW9CQSxDQUFDLENBQUMsRUFBRXVCLElBQUksRUFBR0MsSUFBSSxFQUFHO1FBQ3pDLE1BQU1DLFdBQVc7WUFDYko7ZUFDR0U7U0FDTjtRQUNELCtEQUErRDtRQUMvRCxvRUFBb0U7UUFDcEUsTUFBTUcsVUFBVUQsU0FBU0UsR0FBRztRQUM1QixJQUFJRCxZQUFZLGVBQWU7WUFDM0IsT0FBT0osS0FBSyxDQUFDSSxRQUFRLENBQUNELGFBQWFEO1FBQ3ZDO1FBQ0EsSUFBSUUsWUFBWSxRQUFRO1lBQ3BCLE9BQU87Z0JBQ0hILE1BQU1FO1lBQ1Y7UUFDSjtRQUNBLE1BQU0sQ0FBQ0csT0FBTyxHQUFHQyxLQUFLLEdBQUdMO1FBQ3pCLE1BQU1NLE9BQU9ELElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQztRQUN6QixPQUFPUCxLQUFLLENBQUNJLFFBQVEsQ0FBQ0QsVUFBVUcsT0FBT0U7SUFDM0M7QUFDSjtBQUVBOzs7Q0FHQyxHQUFHLFNBQVNDLGlCQUFpQkMsTUFBTTtJQUNoQyxPQUFPaEMseUVBQW9CQSxDQUFDLENBQUM4QjtRQUN6QixNQUFNRyxZQUFZSCxLQUFLUCxJQUFJO1FBQzNCLE1BQU1XLFVBQVVELFVBQVVFLElBQUksQ0FBQztRQUMvQixNQUFNLENBQUNQLE9BQU9RLE1BQU0sR0FBR04sS0FBS04sSUFBSTtRQUNoQyxNQUFNYSxVQUFVO1lBQ1pDLFVBQVVyQiwyREFBbUJBLENBQUNnQixXQUFXTCxPQUFPO1lBQ2hEVyxTQUFTO2dCQUNMLE9BQU9QLE9BQU9RLEtBQUssQ0FBQ04sU0FBU04s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QUFDSjtBQUV1RyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvcmVhY3QtcXVlcnkvZGlzdC9jcmVhdGVIb29rc0ludGVybmFsLTNkOGViZmNmLm1qcz84YjRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJlY3Vyc2l2ZVByb3h5IH0gZnJvbSAnQHRycGMvc2VydmVyL3NoYXJlZCc7XG5pbXBvcnQgeyB1c2VRdWVyeSwgdXNlU3VzcGVuc2VRdWVyeSwgdXNlUXVlcnlDbGllbnQsIHVzZU11dGF0aW9uLCBoYXNoS2V5LCB1c2VJbmZpbml0ZVF1ZXJ5LCB1c2VTdXNwZW5zZUluZmluaXRlUXVlcnksIHVzZVF1ZXJpZXMgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuaW1wb3J0IHsgY3JlYXRlVFJQQ1VudHlwZWRDbGllbnQgfSBmcm9tICdAdHJwYy9jbGllbnQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBhIGFzIGdldFF1ZXJ5S2V5SW50ZXJuYWwsIFQgYXMgVFJQQ0NvbnRleHQgfSBmcm9tICcuL3V0aWxzUHJveHktMDA4OTRkYTIubWpzJztcblxuLyoqXG4gKiBDcmVhdGUgcHJveHkgZm9yIGRlY29yYXRpbmcgcHJvY2VkdXJlc1xuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gY3JlYXRlUmVhY3REZWNvcmF0aW9uKG5hbWUsIGhvb2tzKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlY3Vyc2l2ZVByb3h5KCh7IHBhdGggLCBhcmdzICB9KT0+e1xuICAgICAgICBjb25zdCBwYXRoQ29weSA9IFtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAuLi5wYXRoXG4gICAgICAgIF07XG4gICAgICAgIC8vIFRoZSBsYXN0IGFyZyBpcyBmb3IgaW5zdGFuY2UgYC51c2VNdXRhdGlvbmAgb3IgYC51c2VRdWVyeSgpYFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBjb25zdCBsYXN0QXJnID0gcGF0aENvcHkucG9wKCk7XG4gICAgICAgIGlmIChsYXN0QXJnID09PSAndXNlTXV0YXRpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gaG9va3NbbGFzdEFyZ10ocGF0aENvcHksIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0QXJnID09PSAnX2RlZicpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aENvcHlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2lucHV0LCAuLi5yZXN0XSA9IGFyZ3M7XG4gICAgICAgIGNvbnN0IG9wdHMgPSByZXN0WzBdIHx8IHt9O1xuICAgICAgICByZXR1cm4gaG9va3NbbGFzdEFyZ10ocGF0aENvcHksIGlucHV0LCBvcHRzKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgcHJveHkgZm9yIGB1c2VRdWVyaWVzYCBvcHRpb25zXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBjcmVhdGVVc2VRdWVyaWVzKGNsaWVudCkge1xuICAgIHJldHVybiBjcmVhdGVSZWN1cnNpdmVQcm94eSgob3B0cyk9PntcbiAgICAgICAgY29uc3QgYXJyYXlQYXRoID0gb3B0cy5wYXRoO1xuICAgICAgICBjb25zdCBkb3RQYXRoID0gYXJyYXlQYXRoLmpvaW4oJy4nKTtcbiAgICAgICAgY29uc3QgW2lucHV0LCBfb3B0c10gPSBvcHRzLmFyZ3M7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBxdWVyeUtleTogZ2V0UXVlcnlLZXlJbnRlcm5hbChhcnJheVBhdGgsIGlucHV0LCAncXVlcnknKSxcbiAgICAgICAgICAgIHF1ZXJ5Rm46ICgpPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5xdWVyeShkb3RQYXRoLCBpbnB1dCwgX29wdHM/LnRycGMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLl9vcHRzXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRBcmdzKHF1ZXJ5S2V5LCBvcHRzLCBwYWdlUGFyYW0pIHtcbiAgICBjb25zdCBwYXRoID0gcXVlcnlLZXlbMF07XG4gICAgY29uc3QgaW5wdXQgPSBxdWVyeUtleVsxXT8uaW5wdXQ7XG4gICAgaWYgKHBhZ2VQYXJhbSkgaW5wdXQuY3Vyc29yID0gcGFnZVBhcmFtO1xuICAgIHJldHVybiBbXG4gICAgICAgIHBhdGguam9pbignLicpLFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgb3B0cz8udHJwY1xuICAgIF07XG59XG5cbi8qKlxuICogTWFrZXMgYSBzdGFibGUgcmVmZXJlbmNlIG9mIHRoZSBgdHJwY2AgcHJvcFxuICovIGZ1bmN0aW9uIHVzZUhvb2tSZXN1bHQodmFsdWUpIHtcbiAgICBjb25zdCByZWYgPSB1c2VSZWYodmFsdWUpO1xuICAgIHJlZi5jdXJyZW50LnBhdGggPSB2YWx1ZS5wYXRoO1xuICAgIHJldHVybiByZWYuY3VycmVudDtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBjcmVhdGVSb290SG9va3MoY29uZmlnKSB7XG4gICAgY29uc3QgbXV0YXRpb25TdWNjZXNzT3ZlcnJpZGUgPSBjb25maWc/Lm92ZXJyaWRlcz8udXNlTXV0YXRpb24/Lm9uU3VjY2VzcyA/PyAoKG9wdGlvbnMpPT5vcHRpb25zLm9yaWdpbmFsRm4oKSk7XG4gICAgY29uc3QgQ29udGV4dCA9IGNvbmZpZz8uY29udGV4dCA/PyBUUlBDQ29udGV4dDtcbiAgICBjb25zdCBjcmVhdGVDbGllbnQgPSAob3B0cyk9PntcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRSUENVbnR5cGVkQ2xpZW50KG9wdHMpO1xuICAgIH07XG4gICAgY29uc3QgVFJQQ1Byb3ZpZGVyID0gKHByb3BzKT0+e1xuICAgICAgICBjb25zdCB7IGFib3J0T25Vbm1vdW50ID1mYWxzZSAsIGNsaWVudCAsIHF1ZXJ5Q2xpZW50ICwgc3NyQ29udGV4dCAgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBbc3NyU3RhdGUsIHNldFNTUlN0YXRlXSA9IHVzZVN0YXRlKHByb3BzLnNzclN0YXRlID8/IGZhbHNlKTtcbiAgICAgICAgdXNlRWZmZWN0KCgpPT57XG4gICAgICAgICAgICAvLyBPbmx5IHVwZGF0aW5nIHN0YXRlIHRvIGBtb3VudGVkYCBpZiB3ZSBhcmUgdXNpbmcgU1NSLlxuICAgICAgICAgICAgLy8gVGhpcyBtYWtlcyBpdCBzbyB3ZSBkb24ndCBoYXZlIGFuIHVubmVjZXNzYXJ5IHJlLXJlbmRlciB3aGVuIG9wdGluZyBvdXQgb2YgU1NSLlxuICAgICAgICAgICAgc2V0U1NSU3RhdGUoKHN0YXRlKT0+c3RhdGUgPyAnbW91bnRlZCcgOiBmYWxzZSk7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIGFib3J0T25Vbm1vdW50LFxuICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50LFxuICAgICAgICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICAgICAgICBzc3JDb250ZXh0OiBzc3JDb250ZXh0ID8/IG51bGwsXG4gICAgICAgICAgICAgICAgc3NyU3RhdGUsXG4gICAgICAgICAgICAgICAgZmV0Y2hRdWVyeTogdXNlQ2FsbGJhY2soKHF1ZXJ5S2V5LCBvcHRzKT0+e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQuZmV0Y2hRdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUZuOiAoKT0+Y2xpZW50LnF1ZXJ5KC4uLmdldENsaWVudEFyZ3MocXVlcnlLZXksIG9wdHMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBmZXRjaEluZmluaXRlUXVlcnk6IHVzZUNhbGxiYWNrKChxdWVyeUtleSwgb3B0cyk9PntcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50LmZldGNoSW5maW5pdGVRdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUZuOiAoeyBwYWdlUGFyYW0gIH0pPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5xdWVyeSguLi5nZXRDbGllbnRBcmdzKHF1ZXJ5S2V5LCBvcHRzLCBwYWdlUGFyYW0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsUGFnZVBhcmFtOiBvcHRzPy5pbml0aWFsQ3Vyc29yID8/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgcHJlZmV0Y2hRdWVyeTogdXNlQ2FsbGJhY2soKHF1ZXJ5S2V5LCBvcHRzKT0+e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQucHJlZmV0Y2hRdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUZuOiAoKT0+Y2xpZW50LnF1ZXJ5KC4uLmdldENsaWVudEFyZ3MocXVlcnlLZXksIG9wdHMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBwcmVmZXRjaEluZmluaXRlUXVlcnk6IHVzZUNhbGxiYWNrKChxdWVyeUtleSwgb3B0cyk9PntcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50LnByZWZldGNoSW5maW5pdGVRdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUZuOiAoeyBwYWdlUGFyYW0gIH0pPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5xdWVyeSguLi5nZXRDbGllbnRBcmdzKHF1ZXJ5S2V5LCBvcHRzLCBwYWdlUGFyYW0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsUGFnZVBhcmFtOiBvcHRzPy5pbml0aWFsQ3Vyc29yID8/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgZW5zdXJlUXVlcnlEYXRhOiB1c2VDYWxsYmFjaygocXVlcnlLZXksIG9wdHMpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5lbnN1cmVRdWVyeURhdGEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5S2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlGbjogKCk9PmNsaWVudC5xdWVyeSguLi5nZXRDbGllbnRBcmdzKHF1ZXJ5S2V5LCBvcHRzKSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0ZVF1ZXJpZXM6IHVzZUNhbGxiYWNrKChxdWVyeUtleSwgZmlsdGVycywgb3B0aW9ucyk9PntcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZpbHRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUtleVxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgcmVzZXRRdWVyaWVzOiB1c2VDYWxsYmFjaygocXVlcnlLZXksIGZpbHRlcnMsIG9wdGlvbnMpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5yZXNldFF1ZXJpZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmlsdGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5S2V5XG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICByZWZldGNoUXVlcmllczogdXNlQ2FsbGJhY2soKHF1ZXJ5S2V5LCBmaWx0ZXJzLCBvcHRpb25zKT0+e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQucmVmZXRjaFF1ZXJpZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmlsdGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5S2V5XG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBjYW5jZWxRdWVyeTogdXNlQ2FsbGJhY2soKHF1ZXJ5S2V5LCBvcHRpb25zKT0+e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQuY2FuY2VsUXVlcmllcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUtleVxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgc2V0UXVlcnlEYXRhOiB1c2VDYWxsYmFjaygocXVlcnlLZXksIHVwZGF0ZXIsIG9wdGlvbnMpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5zZXRRdWVyeURhdGEocXVlcnlLZXksIHVwZGF0ZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBnZXRRdWVyeURhdGE6IHVzZUNhbGxiYWNrKChxdWVyeUtleSk9PntcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50LmdldFF1ZXJ5RGF0YShxdWVyeUtleSk7XG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBxdWVyeUNsaWVudFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIHNldEluZmluaXRlUXVlcnlEYXRhOiB1c2VDYWxsYmFjaygocXVlcnlLZXksIHVwZGF0ZXIsIG9wdGlvbnMpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5zZXRRdWVyeURhdGEocXVlcnlLZXksIHVwZGF0ZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBnZXRJbmZpbml0ZVF1ZXJ5RGF0YTogdXNlQ2FsbGJhY2soKHF1ZXJ5S2V5KT0+e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQuZ2V0UXVlcnlEYXRhKHF1ZXJ5S2V5KTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgcHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG4gICAgZnVuY3Rpb24gdXNlQ29udGV4dCgpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29udGV4dCk7XG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB0UlBDIENvbnRleHQuIERpZCB5b3UgZm9yZ2V0IHRvIHdyYXAgeW91ciBBcHAgaW5zaWRlIGB3aXRoVFJQQ2AgSG9DPycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cbiAgICAvKipcbiAgICogSGFjayB0byBtYWtlIHN1cmUgZXJyb3JzIHJldHVybiBgc3RhdHVzYD0nZXJyb3JgIHdoZW4gZG9pbmcgU1NSXG4gICAqIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS90cnBjL3RycGMvcHVsbC8xNjQ1XG4gICAqLyBmdW5jdGlvbiB1c2VTU1JRdWVyeU9wdGlvbnNJZk5lZWRlZChxdWVyeUtleSwgb3B0cykge1xuICAgICAgICBjb25zdCB7IHF1ZXJ5Q2xpZW50ICwgc3NyU3RhdGUgIH0gPSB1c2VDb250ZXh0KCk7XG4gICAgICAgIHJldHVybiBzc3JTdGF0ZSAmJiBzc3JTdGF0ZSAhPT0gJ21vdW50ZWQnICYmIHF1ZXJ5Q2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5maW5kKHtcbiAgICAgICAgICAgIHF1ZXJ5S2V5XG4gICAgICAgIH0pPy5zdGF0ZS5zdGF0dXMgPT09ICdlcnJvcicgPyB7XG4gICAgICAgICAgICByZXRyeU9uTW91bnQ6IGZhbHNlLFxuICAgICAgICAgICAgLi4ub3B0c1xuICAgICAgICB9IDogb3B0cztcbiAgICB9XG4gICAgZnVuY3Rpb24gdXNlUXVlcnkkMShwYXRoLCBpbnB1dCwgb3B0cykge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dCgpO1xuICAgICAgICBjb25zdCB7IGFib3J0T25Vbm1vdW50ICwgY2xpZW50ICwgc3NyU3RhdGUgLCBxdWVyeUNsaWVudCAsIHByZWZldGNoUXVlcnkgIH0gPSBjb250ZXh0O1xuICAgICAgICBjb25zdCBxdWVyeUtleSA9IGdldFF1ZXJ5S2V5SW50ZXJuYWwocGF0aCwgaW5wdXQsICdxdWVyeScpO1xuICAgICAgICBjb25zdCBkZWZhdWx0T3B0cyA9IHF1ZXJ5Q2xpZW50LmdldFF1ZXJ5RGVmYXVsdHMocXVlcnlLZXkpO1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgJiYgc3NyU3RhdGUgPT09ICdwcmVwYXNzJyAmJiBvcHRzPy50cnBjPy5zc3IgIT09IGZhbHNlICYmIChvcHRzPy5lbmFibGVkID8/IGRlZmF1bHRPcHRzPy5lbmFibGVkKSAhPT0gZmFsc2UgJiYgIXF1ZXJ5Q2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5maW5kKHtcbiAgICAgICAgICAgIHF1ZXJ5S2V5XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgICB2b2lkIHByZWZldGNoUXVlcnkocXVlcnlLZXksIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNzck9wdHMgPSB1c2VTU1JRdWVyeU9wdGlvbnNJZk5lZWRlZChxdWVyeUtleSwge1xuICAgICAgICAgICAgLi4uZGVmYXVsdE9wdHMsXG4gICAgICAgICAgICAuLi5vcHRzXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzaG91bGRBYm9ydE9uVW5tb3VudCA9IG9wdHM/LnRycGM/LmFib3J0T25Vbm1vdW50ID8/IGNvbmZpZz8uYWJvcnRPblVubW91bnQgPz8gYWJvcnRPblVubW91bnQ7XG4gICAgICAgIGNvbnN0IGhvb2sgPSB1c2VRdWVyeSh7XG4gICAgICAgICAgICAuLi5zc3JPcHRzLFxuICAgICAgICAgICAgcXVlcnlLZXk6IHF1ZXJ5S2V5LFxuICAgICAgICAgICAgcXVlcnlGbjogKHF1ZXJ5RnVuY3Rpb25Db250ZXh0KT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnNzck9wdHMsXG4gICAgICAgICAgICAgICAgICAgIHRycGM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnNzck9wdHM/LnRycGMsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zaG91bGRBYm9ydE9uVW5tb3VudCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IHF1ZXJ5RnVuY3Rpb25Db250ZXh0LnNpZ25hbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHt9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQucXVlcnkoLi4uZ2V0Q2xpZW50QXJncyhxdWVyeUtleSwgYWN0dWFsT3B0cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBxdWVyeUNsaWVudCk7XG4gICAgICAgIGhvb2sudHJwYyA9IHVzZUhvb2tSZXN1bHQoe1xuICAgICAgICAgICAgcGF0aDogcGF0aC5qb2luKCcuJylcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBob29rO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1c2VTdXNwZW5zZVF1ZXJ5JDEocGF0aCwgaW5wdXQsIG9wdHMpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoKTtcbiAgICAgICAgY29uc3QgcXVlcnlLZXkgPSBnZXRRdWVyeUtleUludGVybmFsKHBhdGgsIGlucHV0LCAncXVlcnknKTtcbiAgICAgICAgY29uc3Qgc2hvdWxkQWJvcnRPblVubW91bnQgPSBvcHRzPy50cnBjPy5hYm9ydE9uVW5tb3VudCA/PyBjb25maWc/LmFib3J0T25Vbm1vdW50ID8/IGNvbnRleHQuYWJvcnRPblVubW91bnQ7XG4gICAgICAgIGNvbnN0IGhvb2sgPSB1c2VTdXNwZW5zZVF1ZXJ5KHtcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICBxdWVyeUtleTogcXVlcnlLZXksXG4gICAgICAgICAgICBxdWVyeUZuOiAocXVlcnlGdW5jdGlvbkNvbnRleHQpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0dWFsT3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHJwYzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc2hvdWxkQWJvcnRPblVubW91bnQgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBxdWVyeUZ1bmN0aW9uQ29udGV4dC5zaWduYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB7fVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5jbGllbnQucXVlcnkoLi4uZ2V0Q2xpZW50QXJncyhxdWVyeUtleSwgYWN0dWFsT3B0cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBjb250ZXh0LnF1ZXJ5Q2xpZW50KTtcbiAgICAgICAgaG9vay50cnBjID0gdXNlSG9va1Jlc3VsdCh7XG4gICAgICAgICAgICBwYXRoOiBwYXRoLmpvaW4oJy4nKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGhvb2suZGF0YSxcbiAgICAgICAgICAgIGhvb2tcbiAgICAgICAgXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXNlTXV0YXRpb24kMShwYXRoLCBvcHRzKSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50ICB9ID0gdXNlQ29udGV4dCgpO1xuICAgICAgICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gICAgICAgIGNvbnN0IG11dGF0aW9uS2V5ID0gW1xuICAgICAgICAgICAgcGF0aFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBkZWZhdWx0T3B0cyA9IHF1ZXJ5Q2xpZW50LmdldE11dGF0aW9uRGVmYXVsdHMobXV0YXRpb25LZXkpO1xuICAgICAgICBjb25zdCBob29rID0gdXNlTXV0YXRpb24oe1xuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgIG11dGF0aW9uS2V5OiBtdXRhdGlvbktleSxcbiAgICAgICAgICAgIG11dGF0aW9uRm46IChpbnB1dCk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50Lm11dGF0aW9uKC4uLmdldENsaWVudEFyZ3MoW1xuICAgICAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSwgb3B0cykpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uU3VjY2VzcyAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsRm4gPSAoKT0+b3B0cz8ub25TdWNjZXNzPy4oLi4uYXJncykgPz8gZGVmYXVsdE9wdHM/Lm9uU3VjY2Vzcz8uKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtdXRhdGlvblN1Y2Nlc3NPdmVycmlkZSh7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRm4sXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50LFxuICAgICAgICAgICAgICAgICAgICBtZXRhOiBvcHRzPy5tZXRhID8/IGRlZmF1bHRPcHRzPy5tZXRhID8/IHt9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHF1ZXJ5Q2xpZW50KTtcbiAgICAgICAgaG9vay50cnBjID0gdXNlSG9va1Jlc3VsdCh7XG4gICAgICAgICAgICBwYXRoOiBwYXRoLmpvaW4oJy4nKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGhvb2s7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIEBwcmVzZXJ2ZSAqLyBmdW5jdGlvbiB1c2VTdWJzY3JpcHRpb24ocGF0aCwgaW5wdXQsIG9wdHMpIHtcbiAgICAgICAgY29uc3QgZW5hYmxlZCA9IG9wdHM/LmVuYWJsZWQgPz8gdHJ1ZTtcbiAgICAgICAgY29uc3QgcXVlcnlLZXkgPSBoYXNoS2V5KGdldFF1ZXJ5S2V5SW50ZXJuYWwocGF0aCwgaW5wdXQsICdhbnknKSk7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50ICB9ID0gdXNlQ29udGV4dCgpO1xuICAgICAgICBjb25zdCBvcHRzUmVmID0gdXNlUmVmKG9wdHMpO1xuICAgICAgICBvcHRzUmVmLmN1cnJlbnQgPSBvcHRzO1xuICAgICAgICB1c2VFZmZlY3QoKCk9PntcbiAgICAgICAgICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNsaWVudC5zdWJzY3JpcHRpb24ocGF0aC5qb2luKCcuJyksIGlucHV0ID8/IHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgIG9uU3RhcnRlZDogKCk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHNSZWYuY3VycmVudC5vblN0YXJ0ZWQ/LigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkRhdGE6IChkYXRhKT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5vbkRhdGEoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRXJyb3I6IChlcnIpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzUmVmLmN1cnJlbnQub25FcnJvcj8uKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgIGlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgICAgIH0sIFtcbiAgICAgICAgICAgIHF1ZXJ5S2V5LFxuICAgICAgICAgICAgZW5hYmxlZFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXNlSW5maW5pdGVRdWVyeSQxKHBhdGgsIGlucHV0LCBvcHRzKSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50ICwgc3NyU3RhdGUgLCBwcmVmZXRjaEluZmluaXRlUXVlcnkgLCBxdWVyeUNsaWVudCAsIGFib3J0T25Vbm1vdW50ICwgIH0gPSB1c2VDb250ZXh0KCk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5S2V5ID0gZ2V0UXVlcnlLZXlJbnRlcm5hbChwYXRoLCBpbnB1dCwgJ2luZmluaXRlJyk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRzID0gcXVlcnlDbGllbnQuZ2V0UXVlcnlEZWZhdWx0cyhxdWVyeUtleSk7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyAmJiBzc3JTdGF0ZSA9PT0gJ3ByZXBhc3MnICYmIG9wdHM/LnRycGM/LnNzciAhPT0gZmFsc2UgJiYgKG9wdHM/LmVuYWJsZWQgPz8gZGVmYXVsdE9wdHM/LmVuYWJsZWQpICE9PSBmYWxzZSAmJiAhcXVlcnlDbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmZpbmQoe1xuICAgICAgICAgICAgcXVlcnlLZXlcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHZvaWQgcHJlZmV0Y2hJbmZpbml0ZVF1ZXJ5KHF1ZXJ5S2V5LCB7XG4gICAgICAgICAgICAgICAgLi4uZGVmYXVsdE9wdHMsXG4gICAgICAgICAgICAgICAgLi4ub3B0c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3NyT3B0cyA9IHVzZVNTUlF1ZXJ5T3B0aW9uc0lmTmVlZGVkKHF1ZXJ5S2V5LCB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0T3B0cyxcbiAgICAgICAgICAgIC4uLm9wdHNcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHJlcXVlc3Qgb3B0aW9uIHNob3VsZCB0YWtlIHByaW9yaXR5IG92ZXIgZ2xvYmFsXG4gICAgICAgIGNvbnN0IHNob3VsZEFib3J0T25Vbm1vdW50ID0gb3B0cz8udHJwYz8uYWJvcnRPblVubW91bnQgPz8gYWJvcnRPblVubW91bnQ7XG4gICAgICAgIGNvbnN0IGhvb2sgPSB1c2VJbmZpbml0ZVF1ZXJ5KHtcbiAgICAgICAgICAgIC4uLnNzck9wdHMsXG4gICAgICAgICAgICBpbml0aWFsUGFnZVBhcmFtOiBvcHRzLmluaXRpYWxDdXJzb3IgPz8gbnVsbCxcbiAgICAgICAgICAgIHBlcnNpc3Rlcjogb3B0cy5wZXJzaXN0ZXIsXG4gICAgICAgICAgICBxdWVyeUtleTogcXVlcnlLZXksXG4gICAgICAgICAgICBxdWVyeUZuOiAocXVlcnlGdW5jdGlvbkNvbnRleHQpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0dWFsT3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc3NyT3B0cyxcbiAgICAgICAgICAgICAgICAgICAgdHJwYzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3NyT3B0cz8udHJwYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnNob3VsZEFib3J0T25Vbm1vdW50ID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogcXVlcnlGdW5jdGlvbkNvbnRleHQuc2lnbmFsXG4gICAgICAgICAgICAgICAgICAgICAgICB9IDoge31cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5xdWVyeSguLi5nZXRDbGllbnRBcmdzKHF1ZXJ5S2V5LCBhY3R1YWxPcHRzLCBxdWVyeUZ1bmN0aW9uQ29udGV4dC5wYWdlUGFyYW0gPz8gb3B0cy5pbml0aWFsQ3Vyc29yKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHF1ZXJ5Q2xpZW50KTtcbiAgICAgICAgaG9vay50cnBjID0gdXNlSG9va1Jlc3VsdCh7XG4gICAgICAgICAgICBwYXRoOiBwYXRoLmpvaW4oJy4nKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGhvb2s7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVzZVN1c3BlbnNlSW5maW5pdGVRdWVyeSQxKHBhdGgsIGlucHV0LCBvcHRzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KCk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5S2V5ID0gZ2V0UXVlcnlLZXlJbnRlcm5hbChwYXRoLCBpbnB1dCwgJ2luZmluaXRlJyk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRzID0gY29udGV4dC5xdWVyeUNsaWVudC5nZXRRdWVyeURlZmF1bHRzKHF1ZXJ5S2V5KTtcbiAgICAgICAgY29uc3Qgc3NyT3B0cyA9IHVzZVNTUlF1ZXJ5T3B0aW9uc0lmTmVlZGVkKHF1ZXJ5S2V5LCB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0T3B0cyxcbiAgICAgICAgICAgIC4uLm9wdHNcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHJlcXVlc3Qgb3B0aW9uIHNob3VsZCB0YWtlIHByaW9yaXR5IG92ZXIgZ2xvYmFsXG4gICAgICAgIGNvbnN0IHNob3VsZEFib3J0T25Vbm1vdW50ID0gb3B0cz8udHJwYz8uYWJvcnRPblVubW91bnQgPz8gY29udGV4dC5hYm9ydE9uVW5tb3VudDtcbiAgICAgICAgY29uc3QgaG9vayA9IHVzZVN1c3BlbnNlSW5maW5pdGVRdWVyeSh7XG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgaW5pdGlhbFBhZ2VQYXJhbTogb3B0cy5pbml0aWFsQ3Vyc29yID8/IG51bGwsXG4gICAgICAgICAgICBxdWVyeUtleSxcbiAgICAgICAgICAgIHF1ZXJ5Rm46IChxdWVyeUZ1bmN0aW9uQ29udGV4dCk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxPcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5zc3JPcHRzLFxuICAgICAgICAgICAgICAgICAgICB0cnBjOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zc3JPcHRzPy50cnBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc2hvdWxkQWJvcnRPblVubW91bnQgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBxdWVyeUZ1bmN0aW9uQ29udGV4dC5zaWduYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB7fVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5jbGllbnQucXVlcnkoLi4uZ2V0Q2xpZW50QXJncyhxdWVyeUtleSwgYWN0dWFsT3B0cywgcXVlcnlGdW5jdGlvbkNvbnRleHQucGFnZVBhcmFtID8/IG9wdHMuaW5pdGlhbEN1cnNvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBjb250ZXh0LnF1ZXJ5Q2xpZW50KTtcbiAgICAgICAgaG9vay50cnBjID0gdXNlSG9va1Jlc3VsdCh7XG4gICAgICAgICAgICBwYXRoOiBwYXRoLmpvaW4oJy4nKVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGhvb2suZGF0YSxcbiAgICAgICAgICAgIGhvb2tcbiAgICAgICAgXTtcbiAgICB9XG4gICAgY29uc3QgdXNlUXVlcmllcyQxID0gKHF1ZXJpZXNDYWxsYmFjayk9PntcbiAgICAgICAgY29uc3QgeyBzc3JTdGF0ZSAsIHF1ZXJ5Q2xpZW50ICwgcHJlZmV0Y2hRdWVyeSAsIGNsaWVudCAgfSA9IHVzZUNvbnRleHQoKTtcbiAgICAgICAgY29uc3QgcHJveHkgPSBjcmVhdGVVc2VRdWVyaWVzKGNsaWVudCk7XG4gICAgICAgIGNvbnN0IHF1ZXJpZXMgPSBxdWVyaWVzQ2FsbGJhY2socHJveHkpO1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgJiYgc3NyU3RhdGUgPT09ICdwcmVwYXNzJykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBxdWVyeSBvZiBxdWVyaWVzKXtcbiAgICAgICAgICAgICAgICBjb25zdCBxdWVyeU9wdGlvbiA9IHF1ZXJ5O1xuICAgICAgICAgICAgICAgIGlmIChxdWVyeU9wdGlvbi50cnBjPy5zc3IgIT09IGZhbHNlICYmICFxdWVyeUNsaWVudC5nZXRRdWVyeUNhY2hlKCkuZmluZCh7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5S2V5OiBxdWVyeU9wdGlvbi5xdWVyeUtleVxuICAgICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgcHJlZmV0Y2hRdWVyeShxdWVyeU9wdGlvbi5xdWVyeUtleSwgcXVlcnlPcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXNlUXVlcmllcyh7XG4gICAgICAgICAgICBxdWVyaWVzOiBxdWVyaWVzLm1hcCgocXVlcnkpPT4oe1xuICAgICAgICAgICAgICAgICAgICAuLi5xdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXk6IHF1ZXJ5LnF1ZXJ5S2V5XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgIH0sIHF1ZXJ5Q2xpZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IHVzZURlaHlkcmF0ZWRTdGF0ZSA9IChjbGllbnQsIHRycGNTdGF0ZSk9PntcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtZWQgPSB1c2VNZW1vKCgpPT57XG4gICAgICAgICAgICBpZiAoIXRycGNTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnBjU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50LnJ1bnRpbWUudHJhbnNmb3JtZXIuZGVzZXJpYWxpemUodHJwY1N0YXRlKTtcbiAgICAgICAgfSwgW1xuICAgICAgICAgICAgdHJwY1N0YXRlLFxuICAgICAgICAgICAgY2xpZW50XG4gICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBQcm92aWRlcjogVFJQQ1Byb3ZpZGVyLFxuICAgICAgICBjcmVhdGVDbGllbnQsXG4gICAgICAgIHVzZUNvbnRleHQsXG4gICAgICAgIHVzZVV0aWxzOiB1c2VDb250ZXh0LFxuICAgICAgICB1c2VRdWVyeTogdXNlUXVlcnkkMSxcbiAgICAgICAgdXNlU3VzcGVuc2VRdWVyeTogdXNlU3VzcGVuc2VRdWVyeSQxLFxuICAgICAgICB1c2VRdWVyaWVzOiB1c2VRdWVyaWVzJDEsXG4gICAgICAgIHVzZU11dGF0aW9uOiB1c2VNdXRhdGlvbiQxLFxuICAgICAgICB1c2VTdWJzY3JpcHRpb24sXG4gICAgICAgIHVzZURlaHlkcmF0ZWRTdGF0ZSxcbiAgICAgICAgdXNlSW5maW5pdGVRdWVyeTogdXNlSW5maW5pdGVRdWVyeSQxLFxuICAgICAgICB1c2VTdXNwZW5zZUluZmluaXRlUXVlcnk6IHVzZVN1c3BlbnNlSW5maW5pdGVRdWVyeSQxXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVhY3REZWNvcmF0aW9uIGFzIGEsIGNyZWF0ZVVzZVF1ZXJpZXMgYXMgYiwgY3JlYXRlUm9vdEhvb2tzIGFzIGMsIGdldENsaWVudEFyZ3MgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVJlY3Vyc2l2ZVByb3h5IiwidXNlUXVlcnkiLCJ1c2VTdXNwZW5zZVF1ZXJ5IiwidXNlUXVlcnlDbGllbnQiLCJ1c2VNdXRhdGlvbiIsImhhc2hLZXkiLCJ1c2VJbmZpbml0ZVF1ZXJ5IiwidXNlU3VzcGVuc2VJbmZpbml0ZVF1ZXJ5IiwidXNlUXVlcmllcyIsImNyZWF0ZVRSUENVbnR5cGVkQ2xpZW50IiwiUmVhY3QiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUNhbGxiYWNrIiwidXNlTWVtbyIsImEiLCJnZXRRdWVyeUtleUludGVybmFsIiwiVCIsIlRSUENDb250ZXh0IiwiY3JlYXRlUmVhY3REZWNvcmF0aW9uIiwibmFtZSIsImhvb2tzIiwicGF0aCIsImFyZ3MiLCJwYXRoQ29weSIsImxhc3RBcmciLCJwb3AiLCJpbnB1dCIsInJlc3QiLCJvcHRzIiwiY3JlYXRlVXNlUXVlcmllcyIsImNsaWVudCIsImFycmF5UGF0aCIsImRvdFBhdGgiLCJqb2luIiwiX29wdHMiLCJvcHRpb25zIiwicXVlcnlLZXkiLCJxdWVyeUZuIiwicXVlcnkiLCJ0cnBjIiwiZ2V0Q2xpZW50QXJncyIsInBhZ2VQYXJhbSIsImN1cnNvciIsInVzZUhvb2tSZXN1bHQiLCJ2YWx1ZSIsInJlZiIsImN1cnJlbnQiLCJjcmVhdGVSb290SG9va3MiLCJjb25maWciLCJtdXRhdGlvblN1Y2Nlc3NPdmVycmlkZSIsIm92ZXJyaWRlcyIsIm9uU3VjY2VzcyIsIm9yaWdpbmFsRm4iLCJDb250ZXh0IiwiY29udGV4dCIsImNyZWF0ZUNsaWVudCIsIlRSUENQcm92aWRlciIsInByb3BzIiwiYWJvcnRPblVubW91bnQiLCJxdWVyeUNsaWVudCIsInNzckNvbnRleHQiLCJzc3JTdGF0ZSIsInNldFNTUlN0YXRlIiwic3RhdGUiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJmZXRjaFF1ZXJ5IiwiZmV0Y2hJbmZpbml0ZVF1ZXJ5IiwiaW5pdGlhbFBhZ2VQYXJhbSIsImluaXRpYWxDdXJzb3IiLCJwcmVmZXRjaFF1ZXJ5IiwicHJlZmV0Y2hJbmZpbml0ZVF1ZXJ5IiwiZW5zdXJlUXVlcnlEYXRhIiwiaW52YWxpZGF0ZVF1ZXJpZXMiLCJmaWx0ZXJzIiwicmVzZXRRdWVyaWVzIiwicmVmZXRjaFF1ZXJpZXMiLCJjYW5jZWxRdWVyeSIsImNhbmNlbFF1ZXJpZXMiLCJzZXRRdWVyeURhdGEiLCJ1cGRhdGVyIiwiZ2V0UXVlcnlEYXRhIiwic2V0SW5maW5pdGVRdWVyeURhdGEiLCJnZXRJbmZpbml0ZVF1ZXJ5RGF0YSIsImNoaWxkcmVuIiwidXNlQ29udGV4dCIsIkVycm9yIiwidXNlU1NSUXVlcnlPcHRpb25zSWZOZWVkZWQiLCJnZXRRdWVyeUNhY2hlIiwiZmluZCIsInN0YXR1cyIsInJldHJ5T25Nb3VudCIsInVzZVF1ZXJ5JDEiLCJkZWZhdWx0T3B0cyIsImdldFF1ZXJ5RGVmYXVsdHMiLCJzc3IiLCJlbmFibGVkIiwic3NyT3B0cyIsInNob3VsZEFib3J0T25Vbm1vdW50IiwiaG9vayIsInF1ZXJ5RnVuY3Rpb25Db250ZXh0IiwiYWN0dWFsT3B0cyIsInNpZ25hbCIsInVzZVN1c3BlbnNlUXVlcnkkMSIsImRhdGEiLCJ1c2VNdXRhdGlvbiQxIiwibXV0YXRpb25LZXkiLCJnZXRNdXRhdGlvbkRlZmF1bHRzIiwibXV0YXRpb25GbiIsIm11dGF0aW9uIiwibWV0YSIsInVzZVN1YnNjcmlwdGlvbiIsIm9wdHNSZWYiLCJpc1N0b3BwZWQiLCJzdWJzY3JpcHRpb24iLCJ1bmRlZmluZWQiLCJvblN0YXJ0ZWQiLCJvbkRhdGEiLCJvbkVycm9yIiwiZXJyIiwidW5zdWJzY3JpYmUiLCJ1c2VJbmZpbml0ZVF1ZXJ5JDEiLCJwZXJzaXN0ZXIiLCJ1c2VTdXNwZW5zZUluZmluaXRlUXVlcnkkMSIsInVzZVF1ZXJpZXMkMSIsInF1ZXJpZXNDYWxsYmFjayIsInByb3h5IiwicXVlcmllcyIsInF1ZXJ5T3B0aW9uIiwibWFwIiwidXNlRGVoeWRyYXRlZFN0YXRlIiwidHJwY1N0YXRlIiwidHJhbnNmb3JtZWQiLCJydW50aW1lIiwidHJhbnNmb3JtZXIiLCJkZXNlcmlhbGl6ZSIsInVzZVV0aWxzIiwiYiIsImMiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/react-query/dist/createHooksInternal-3d8ebfcf.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/react-query/dist/index.mjs":
/*!***********************************************************!*\
  !*** ../../node_modules/@trpc/react-query/dist/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCClientError),\n/* harmony export */   TRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCProxyClient),\n/* harmony export */   createTRPCReact: () => (/* binding */ createTRPCReact),\n/* harmony export */   createTRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getFetch),\n/* harmony export */   getQueryKey: () => (/* reexport safe */ _utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   getUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpBatchLink),\n/* harmony export */   httpLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.splitLink),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/../../node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utilsProxy-00894da2.mjs */ \"(ssr)/../../node_modules/@trpc/react-query/dist/utilsProxy-00894da2.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/../../node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _createHooksInternal_3d8ebfcf_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./createHooksInternal-3d8ebfcf.mjs */ \"(ssr)/../../node_modules/@trpc/react-query/dist/createHooksInternal-3d8ebfcf.mjs\");\n\n\n\n\n\n\n\n/**\n * @internal\n */ function createHooksInternal(trpc) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__.createFlatProxy)((key)=>{\n        if (key === \"useContext\" || key === \"useUtils\") {\n            return ()=>{\n                const context = trpc.useUtils();\n                // create a stable reference of the utils context\n                return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n                    return (0,_utilsProxy_00894da2_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(context);\n                }, [\n                    context\n                ]);\n            };\n        }\n        if (trpc.hasOwnProperty(key)) {\n            return trpc[key];\n        }\n        return (0,_createHooksInternal_3d8ebfcf_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(key, trpc);\n    });\n}\nfunction createTRPCReact(opts) {\n    const hooks = (0,_createHooksInternal_3d8ebfcf_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(opts);\n    const proxy = createHooksInternal(hooks);\n    return proxy;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3JlYWN0LXF1ZXJ5L2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFDMEM7QUFDVjtBQUNQO0FBQ3RCO0FBQ3NFO0FBQ3ZFO0FBRS9COztDQUVDLEdBQUcsU0FBU1Msb0JBQW9CQyxJQUFJO0lBQ2pDLE9BQU9OLG9FQUFlQSxDQUFDLENBQUNPO1FBQ3BCLElBQUlBLFFBQVEsZ0JBQWdCQSxRQUFRLFlBQVk7WUFDNUMsT0FBTztnQkFDSCxNQUFNQyxVQUFVRixLQUFLRyxRQUFRO2dCQUM3QixpREFBaUQ7Z0JBQ2pELE9BQU9SLDhDQUFPQSxDQUFDO29CQUNYLE9BQU9KLDJEQUFxQkEsQ0FBQ1c7Z0JBQ2pDLEdBQUc7b0JBQ0NBO2lCQUNIO1lBQ0w7UUFDSjtRQUNBLElBQUlGLEtBQUtJLGNBQWMsQ0FBQ0gsTUFBTTtZQUMxQixPQUFPRCxJQUFJLENBQUNDLElBQUk7UUFDcEI7UUFDQSxPQUFPSCxvRUFBcUJBLENBQUNHLEtBQUtEO0lBQ3RDO0FBQ0o7QUFDQSxTQUFTSyxnQkFBZ0JDLElBQUk7SUFDekIsTUFBTUMsUUFBUVgsb0VBQWVBLENBQUNVO0lBQzlCLE1BQU1FLFFBQVFULG9CQUFvQlE7SUFDbEMsT0FBT0M7QUFDWDtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvcmVhY3QtcXVlcnkvZGlzdC9pbmRleC5tanM/MmM5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICdAdHJwYy9jbGllbnQnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVSZWFjdFF1ZXJ5VXRpbHMgfSBmcm9tICcuL3V0aWxzUHJveHktMDA4OTRkYTIubWpzJztcbmV4cG9ydCB7IGcgYXMgZ2V0UXVlcnlLZXkgfSBmcm9tICcuL3V0aWxzUHJveHktMDA4OTRkYTIubWpzJztcbmltcG9ydCB7IGNyZWF0ZUZsYXRQcm94eSB9IGZyb20gJ0B0cnBjL3NlcnZlci9zaGFyZWQnO1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGMgYXMgY3JlYXRlUm9vdEhvb2tzLCBhIGFzIGNyZWF0ZVJlYWN0RGVjb3JhdGlvbiB9IGZyb20gJy4vY3JlYXRlSG9va3NJbnRlcm5hbC0zZDhlYmZjZi5tanMnO1xuaW1wb3J0ICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGNyZWF0ZUhvb2tzSW50ZXJuYWwodHJwYykge1xuICAgIHJldHVybiBjcmVhdGVGbGF0UHJveHkoKGtleSk9PntcbiAgICAgICAgaWYgKGtleSA9PT0gJ3VzZUNvbnRleHQnIHx8IGtleSA9PT0gJ3VzZVV0aWxzJykge1xuICAgICAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRycGMudXNlVXRpbHMoKTtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBzdGFibGUgcmVmZXJlbmNlIG9mIHRoZSB1dGlscyBjb250ZXh0XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZU1lbW8oKCk9PntcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlYWN0UXVlcnlVdGlscyhjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRycGMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRycGNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlUmVhY3REZWNvcmF0aW9uKGtleSwgdHJwYyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVUUlBDUmVhY3Qob3B0cykge1xuICAgIGNvbnN0IGhvb2tzID0gY3JlYXRlUm9vdEhvb2tzKG9wdHMpO1xuICAgIGNvbnN0IHByb3h5ID0gY3JlYXRlSG9va3NJbnRlcm5hbChob29rcyk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVUUlBDUmVhY3QgfTtcbiJdLCJuYW1lcyI6WyJjIiwiY3JlYXRlUmVhY3RRdWVyeVV0aWxzIiwiZyIsImdldFF1ZXJ5S2V5IiwiY3JlYXRlRmxhdFByb3h5IiwidXNlTWVtbyIsImNyZWF0ZVJvb3RIb29rcyIsImEiLCJjcmVhdGVSZWFjdERlY29yYXRpb24iLCJjcmVhdGVIb29rc0ludGVybmFsIiwidHJwYyIsImtleSIsImNvbnRleHQiLCJ1c2VVdGlscyIsImhhc093blByb3BlcnR5IiwiY3JlYXRlVFJQQ1JlYWN0Iiwib3B0cyIsImhvb2tzIiwicHJveHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/react-query/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/react-query/dist/utilsProxy-00894da2.mjs":
/*!*************************************************************************!*\
  !*** ../../node_modules/@trpc/react-query/dist/utilsProxy-00894da2.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCContext),\n/* harmony export */   a: () => (/* binding */ getQueryKeyInternal),\n/* harmony export */   b: () => (/* binding */ getQueryType),\n/* harmony export */   c: () => (/* binding */ createReactQueryUtils),\n/* harmony export */   d: () => (/* binding */ contextProps),\n/* harmony export */   g: () => (/* binding */ getQueryKey)\n/* harmony export */ });\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/../../node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/../../node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query.\n **/ function getQueryKeyInternal(path, input, type) {\n    // Construct a query key that is easy to destructure and flexible for\n    // partial selecting etc.\n    // https://github.com/trpc/trpc/issues/3128\n    // some parts of the path may be dot-separated, split them up\n    const splitPath = path.flatMap((part)=>part.split(\".\"));\n    if (!input && (!type || type === \"any\")) // we don't want nested array if path is empty, i.e. `[]` instead of `[[]]`\n    return splitPath.length ? [\n        splitPath\n    ] : [];\n    return [\n        splitPath,\n        {\n            ...typeof input !== \"undefined\" && {\n                input: input\n            },\n            ...type && type !== \"any\" && {\n                type: type\n            }\n        }\n    ];\n}\n/**\n * Method to extract the query key for a procedure\n * @param procedureOrRouter - procedure or AnyRouter\n * @param input - input to procedureOrRouter\n * @param type - defaults to `any`\n * @link https://trpc.io/docs/getQueryKey\n */ function getQueryKey(..._params) {\n    const [procedureOrRouter, input, type] = _params;\n    // @ts-expect-error - we don't expose _def on the type layer\n    const path = procedureOrRouter._def().path;\n    const queryKey = getQueryKeyInternal(path, input, type ?? \"any\");\n    return queryKey;\n}\nconst contextProps = [\n    \"client\",\n    \"ssrContext\",\n    \"ssrState\",\n    \"abortOnUnmount\"\n];\nconst TRPCContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)(null);\nconst getQueryType = (utilName)=>{\n    switch(utilName){\n        case \"fetch\":\n        case \"ensureData\":\n        case \"prefetch\":\n        case \"getData\":\n        case \"setData\":\n            return \"query\";\n        case \"fetchInfinite\":\n        case \"prefetchInfinite\":\n        case \"getInfiniteData\":\n        case \"setInfiniteData\":\n            return \"infinite\";\n        case \"cancel\":\n        case \"invalidate\":\n        case \"refetch\":\n        case \"reset\":\n            return \"any\";\n    }\n};\n/**\n * @internal\n */ function createReactQueryUtils(context) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_1__.createFlatProxy)((key)=>{\n        const contextName = key;\n        if (contextName === \"client\") {\n            return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClientProxy)(context.client);\n        }\n        if (contextProps.includes(contextName)) {\n            return context[contextName];\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_1__.createRecursiveProxy)((opts)=>{\n            const path = [\n                key,\n                ...opts.path\n            ];\n            const utilName = path.pop();\n            const args = [\n                ...opts.args\n            ];\n            const input = args.shift(); // args can now be spread when input removed\n            const queryType = getQueryType(utilName);\n            const queryKey = getQueryKeyInternal(path, input, queryType);\n            const contextMap = {\n                fetch: ()=>context.fetchQuery(queryKey, ...args),\n                fetchInfinite: ()=>context.fetchInfiniteQuery(queryKey, args[0]),\n                prefetch: ()=>context.prefetchQuery(queryKey, ...args),\n                prefetchInfinite: ()=>context.prefetchInfiniteQuery(queryKey, args[0]),\n                ensureData: ()=>context.ensureQueryData(queryKey, ...args),\n                invalidate: ()=>context.invalidateQueries(queryKey, ...args),\n                reset: ()=>context.resetQueries(queryKey, ...args),\n                refetch: ()=>context.refetchQueries(queryKey, ...args),\n                cancel: ()=>context.cancelQuery(queryKey, ...args),\n                setData: ()=>{\n                    context.setQueryData(queryKey, args[0], args[1]);\n                },\n                setInfiniteData: ()=>{\n                    context.setInfiniteQueryData(queryKey, args[0], args[1]);\n                },\n                getData: ()=>context.getQueryData(queryKey),\n                getInfiniteData: ()=>context.getInfiniteQueryData(queryKey)\n            };\n            return contextMap[utilName]();\n        });\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/react-query/dist/utilsProxy-00894da2.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/codes-c924c3db.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   a: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   i: () => (/* binding */ invert)\n/* harmony export */ });\n/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2NvZGVzLWM5MjRjM2RiLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Q0FFQyxHQUFHLFNBQVNBLE9BQU9DLEdBQUc7SUFDbkIsTUFBTUMsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzdCLElBQUksTUFBTUMsT0FBT0osSUFBSTtRQUNqQixNQUFNSyxJQUFJTCxHQUFHLENBQUNJLElBQUk7UUFDbEJILE1BQU0sQ0FBQ0ksRUFBRSxHQUFHRDtJQUNoQjtJQUNBLE9BQU9IO0FBQ1g7QUFFQSxtREFBbUQ7QUFDbkQ7Ozs7O0NBS0MsR0FBRyxNQUFNSywwQkFBMEI7SUFDaEM7OztHQUdELEdBQUdDLGFBQWEsQ0FBQztJQUNoQjs7R0FFRCxHQUFHQyxhQUFhLENBQUM7SUFDaEIsMEJBQTBCO0lBQzFCQyx1QkFBdUIsQ0FBQztJQUN4QkMsaUJBQWlCLENBQUM7SUFDbEIsaUNBQWlDO0lBQ2pDQyxjQUFjLENBQUM7SUFDZkMsV0FBVyxDQUFDO0lBQ1pDLFdBQVcsQ0FBQztJQUNaQyxzQkFBc0IsQ0FBQztJQUN2QkMsU0FBUyxDQUFDO0lBQ1ZDLFVBQVUsQ0FBQztJQUNYQyxxQkFBcUIsQ0FBQztJQUN0QkMsbUJBQW1CLENBQUM7SUFDcEJDLHVCQUF1QixDQUFDO0lBQ3hCQyxtQkFBbUIsQ0FBQztJQUNwQkMsdUJBQXVCLENBQUM7QUFDNUI7QUFDQSxNQUFNQyw2QkFBNkJ2QixPQUFPTztBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29kZXMtYzkyNGMzZGIubWpzPzBhY2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBpbnZlcnQob2JqKSB7XG4gICAgY29uc3QgbmV3T2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IoY29uc3Qga2V5IGluIG9iail7XG4gICAgICAgIGNvbnN0IHYgPSBvYmpba2V5XTtcbiAgICAgICAgbmV3T2JqW3ZdID0ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xufVxuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vd3d3Lmpzb25ycGMub3JnL3NwZWNpZmljYXRpb25cbi8qKlxuICogSlNPTi1SUEMgMi4wIEVycm9yIGNvZGVzXG4gKlxuICogYC0zMjAwMGAgdG8gYC0zMjA5OWAgYXJlIHJlc2VydmVkIGZvciBpbXBsZW1lbnRhdGlvbi1kZWZpbmVkIHNlcnZlci1lcnJvcnMuXG4gKiBGb3IgdFJQQyB3ZSdyZSBjb3B5aW5nIHRoZSBsYXN0IGRpZ2l0cyBvZiBIVFRQIDRYWCBlcnJvcnMuXG4gKi8gY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgPSB7XG4gICAgLyoqXG4gICAqIEludmFsaWQgSlNPTiB3YXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAgICogQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXG4gICAqLyBQQVJTRV9FUlJPUjogLTMyNzAwLFxuICAgIC8qKlxuICAgKiBUaGUgSlNPTiBzZW50IGlzIG5vdCBhIHZhbGlkIFJlcXVlc3Qgb2JqZWN0LlxuICAgKi8gQkFEX1JFUVVFU1Q6IC0zMjYwMCxcbiAgICAvLyBJbnRlcm5hbCBKU09OLVJQQyBlcnJvclxuICAgIElOVEVSTkFMX1NFUlZFUl9FUlJPUjogLTMyNjAzLFxuICAgIE5PVF9JTVBMRU1FTlRFRDogLTMyNjAzLFxuICAgIC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljIGVycm9yc1xuICAgIFVOQVVUSE9SSVpFRDogLTMyMDAxLFxuICAgIEZPUkJJRERFTjogLTMyMDAzLFxuICAgIE5PVF9GT1VORDogLTMyMDA0LFxuICAgIE1FVEhPRF9OT1RfU1VQUE9SVEVEOiAtMzIwMDUsXG4gICAgVElNRU9VVDogLTMyMDA4LFxuICAgIENPTkZMSUNUOiAtMzIwMDksXG4gICAgUFJFQ09ORElUSU9OX0ZBSUxFRDogLTMyMDEyLFxuICAgIFBBWUxPQURfVE9PX0xBUkdFOiAtMzIwMTMsXG4gICAgVU5QUk9DRVNTQUJMRV9DT05URU5UOiAtMzIwMjIsXG4gICAgVE9PX01BTllfUkVRVUVTVFM6IC0zMjAyOSxcbiAgICBDTElFTlRfQ0xPU0VEX1JFUVVFU1Q6IC0zMjA5OVxufTtcbmNvbnN0IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSID0gaW52ZXJ0KFRSUENfRVJST1JfQ09ERVNfQllfS0VZKTtcblxuZXhwb3J0IHsgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgYXMgVCwgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgYXMgYSwgaW52ZXJ0IGFzIGkgfTtcbiJdLCJuYW1lcyI6WyJpbnZlcnQiLCJvYmoiLCJuZXdPYmoiLCJPYmplY3QiLCJjcmVhdGUiLCJrZXkiLCJ2IiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJQQVJTRV9FUlJPUiIsIkJBRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiVU5BVVRIT1JJWkVEIiwiRk9SQklEREVOIiwiTk9UX0ZPVU5EIiwiTUVUSE9EX05PVF9TVVBQT1JURUQiLCJUSU1FT1VUIiwiQ09ORkxJQ1QiLCJQUkVDT05ESVRJT05fRkFJTEVEIiwiUEFZTE9BRF9UT09fTEFSR0UiLCJVTlBST0NFU1NBQkxFX0NPTlRFTlQiLCJUT09fTUFOWV9SRVFVRVNUUyIsIkNMSUVOVF9DTE9TRURfUkVRVUVTVCIsIlRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIiwiVCIsImEiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/index-f91d720c.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   a: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   b: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   c: () => (/* binding */ createFlatProxy),\n/* harmony export */   g: () => (/* binding */ getHTTPStatusCodeFromError)\n/* harmony export */ });\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(ssr)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\nconst TRPC_ERROR_CODES_BY_NUMBER = (0,_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === \"number\") {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === \"apply\";\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== \"string\" || name === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2luZGV4LWY5MWQ3MjBjLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUY7QUFFakYsTUFBTUksNkJBQTZCSCxzREFBTUEsQ0FBQ0Usa0RBQXVCQTtBQUNqRSxNQUFNRSx3QkFBd0I7SUFDMUJDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxzQkFBc0I7SUFDdEJDLFNBQVM7SUFDVEMsVUFBVTtJQUNWQyxxQkFBcUI7SUFDckJDLG1CQUFtQjtJQUNuQkMsdUJBQXVCO0lBQ3ZCQyxtQkFBbUI7SUFDbkJDLHVCQUF1QjtJQUN2QkMsdUJBQXVCO0lBQ3ZCQyxpQkFBaUI7QUFDckI7QUFDQSxTQUFTQyxxQkFBcUJDLElBQUk7SUFDOUIsT0FBT2pCLHFCQUFxQixDQUFDaUIsS0FBSyxJQUFJO0FBQzFDO0FBQ0EsU0FBU0Msa0JBQWtCQyxJQUFJO0lBQzNCLE1BQU1DLE1BQU1DLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUUEsT0FBTztRQUNyQ0E7S0FDSDtJQUNELE1BQU1JLGVBQWUsSUFBSUMsSUFBSUosSUFBSUssR0FBRyxDQUFDLENBQUNDO1FBQ2xDLElBQUksV0FBV0EsS0FBSztZQUNoQixNQUFNQyxPQUFPRCxJQUFJRSxLQUFLLENBQUNELElBQUk7WUFDM0IsSUFBSSxPQUFPQSxLQUFLRSxVQUFVLEtBQUssVUFBVTtnQkFDckMsT0FBT0YsS0FBS0UsVUFBVTtZQUMxQjtZQUNBLE1BQU1aLE9BQU9sQiwwQkFBMEIsQ0FBQzJCLElBQUlFLEtBQUssQ0FBQ1gsSUFBSSxDQUFDO1lBQ3ZELE9BQU9ELHFCQUFxQkM7UUFDaEM7UUFDQSxPQUFPO0lBQ1g7SUFDQSxJQUFJTSxhQUFhTyxJQUFJLEtBQUssR0FBRztRQUN6QixPQUFPO0lBQ1g7SUFDQSxNQUFNRCxhQUFhTixhQUFhUSxNQUFNLEdBQUdDLElBQUksR0FBR0MsS0FBSztJQUNyRCxPQUFPSjtBQUNYO0FBQ0EsU0FBU0ssMkJBQTJCTixLQUFLO0lBQ3JDLE9BQU9aLHFCQUFxQlksTUFBTVgsSUFBSTtBQUMxQztBQUVBLE1BQU1rQixPQUFPO0FBQ2IsT0FBTztBQUNQO0FBQ0EsU0FBU0MsaUJBQWlCQyxRQUFRLEVBQUVDLElBQUk7SUFDcEMsTUFBTUMsUUFBUSxJQUFJQyxNQUFNTCxNQUFNO1FBQzFCTSxLQUFLQyxJQUFJLEVBQUVDLEdBQUc7WUFDVixJQUFJLE9BQU9BLFFBQVEsWUFBWUEsUUFBUSxRQUFRO2dCQUMzQyx3REFBd0Q7Z0JBQ3hELHdEQUF3RDtnQkFDeEQsT0FBT0M7WUFDWDtZQUNBLE9BQU9SLGlCQUFpQkMsVUFBVTttQkFDM0JDO2dCQUNISzthQUNIO1FBQ0w7UUFDQUUsT0FBT0MsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLElBQUk7WUFDZixNQUFNQyxVQUFVWCxJQUFJLENBQUNBLEtBQUtZLE1BQU0sR0FBRyxFQUFFLEtBQUs7WUFDMUMsT0FBT2IsU0FBUztnQkFDWlcsTUFBTUMsVUFBVUQsS0FBS0UsTUFBTSxJQUFJLElBQUlGLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHQTtnQkFDbERWLE1BQU1XLFVBQVVYLEtBQUthLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS2I7WUFDeEM7UUFDSjtJQUNKO0lBQ0EsT0FBT0M7QUFDWDtBQUNBOzs7O0NBSUMsR0FBRyxNQUFNYSx1QkFBdUIsQ0FBQ2YsV0FBV0QsaUJBQWlCQyxVQUFVLEVBQUU7QUFDMUU7Ozs7Q0FJQyxHQUFHLE1BQU1nQixrQkFBa0IsQ0FBQ2hCO0lBQ3pCLE9BQU8sSUFBSUcsTUFBTUwsTUFBTTtRQUNuQk0sS0FBS0MsSUFBSSxFQUFFWSxJQUFJO1lBQ1gsSUFBSSxPQUFPQSxTQUFTLFlBQVlBLFNBQVMsUUFBUTtnQkFDN0Msd0RBQXdEO2dCQUN4RCx3REFBd0Q7Z0JBQ3hELE9BQU9WO1lBQ1g7WUFDQSxPQUFPUCxTQUFTaUI7UUFDcEI7SUFDSjtBQUNKO0FBRXFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9pbmRleC1mOTFkNzIwYy5tanM/YTQ5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpIGFzIGludmVydCwgVCBhcyBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSB9IGZyb20gJy4vY29kZXMtYzkyNGMzZGIubWpzJztcblxuY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgPSBpbnZlcnQoVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkpO1xuY29uc3QgSlNPTlJQQzJfVE9fSFRUUF9DT0RFID0ge1xuICAgIFBBUlNFX0VSUk9SOiA0MDAsXG4gICAgQkFEX1JFUVVFU1Q6IDQwMCxcbiAgICBVTkFVVEhPUklaRUQ6IDQwMSxcbiAgICBOT1RfRk9VTkQ6IDQwNCxcbiAgICBGT1JCSURERU46IDQwMyxcbiAgICBNRVRIT0RfTk9UX1NVUFBPUlRFRDogNDA1LFxuICAgIFRJTUVPVVQ6IDQwOCxcbiAgICBDT05GTElDVDogNDA5LFxuICAgIFBSRUNPTkRJVElPTl9GQUlMRUQ6IDQxMixcbiAgICBQQVlMT0FEX1RPT19MQVJHRTogNDEzLFxuICAgIFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogNDIyLFxuICAgIFRPT19NQU5ZX1JFUVVFU1RTOiA0MjksXG4gICAgQ0xJRU5UX0NMT1NFRF9SRVFVRVNUOiA0OTksXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAsXG4gICAgTk9UX0lNUExFTUVOVEVEOiA1MDFcbn07XG5mdW5jdGlvbiBnZXRTdGF0dXNDb2RlRnJvbUtleShjb2RlKSB7XG4gICAgcmV0dXJuIEpTT05SUEMyX1RPX0hUVFBfQ09ERVtjb2RlXSA/PyA1MDA7XG59XG5mdW5jdGlvbiBnZXRIVFRQU3RhdHVzQ29kZShqc29uKSB7XG4gICAgY29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShqc29uKSA/IGpzb24gOiBbXG4gICAgICAgIGpzb25cbiAgICBdO1xuICAgIGNvbnN0IGh0dHBTdGF0dXNlcyA9IG5ldyBTZXQoYXJyLm1hcCgocmVzKT0+e1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXMuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5odHRwU3RhdHVzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmh0dHBTdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVJbcmVzLmVycm9yLmNvZGVdO1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAyMDA7XG4gICAgfSkpO1xuICAgIGlmIChodHRwU3RhdHVzZXMuc2l6ZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gMjA3O1xuICAgIH1cbiAgICBjb25zdCBodHRwU3RhdHVzID0gaHR0cFN0YXR1c2VzLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICByZXR1cm4gaHR0cFN0YXR1cztcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGVycm9yLmNvZGUpO1xufVxuXG5jb25zdCBub29wID0gKCk9Pntcbi8vIG5vb3Bcbn07XG5mdW5jdGlvbiBjcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBwYXRoKSB7XG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkobm9vcCwge1xuICAgICAgICBnZXQgKF9vYmosIGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8IGtleSA9PT0gJ3RoZW4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBpZiB0aGUgcHJveHkgaXMgYWNjaWRlbnRhbGx5IHRyZWF0ZWRcbiAgICAgICAgICAgICAgICAvLyBsaWtlIGEgUHJvbWlzZUxpa2UgKGxpa2UgaW4gYFByb21pc2UucmVzb2x2ZShwcm94eSlgKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJQcm94eShjYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIC4uLnBhdGgsXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHkgKF8xLCBfMiwgYXJncykge1xuICAgICAgICAgICAgY29uc3QgaXNBcHBseSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXSA9PT0gJ2FwcGx5JztcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgYXJnczogaXNBcHBseSA/IGFyZ3MubGVuZ3RoID49IDIgPyBhcmdzWzFdIDogW10gOiBhcmdzLFxuICAgICAgICAgICAgICAgIHBhdGg6IGlzQXBwbHkgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcHJveHkgdGhhdCBjYWxscyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcGF0aCBhbmQgYXJndW1lbnRzXG4gKlxuICogQGludGVybmFsXG4gKi8gY29uc3QgY3JlYXRlUmVjdXJzaXZlUHJveHkgPSAoY2FsbGJhY2spPT5jcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBbXSk7XG4vKipcbiAqIFVzZWQgaW4gcGxhY2Ugb2YgYG5ldyBQcm94eWAgd2hlcmUgZWFjaCBoYW5kbGVyIHdpbGwgbWFwIDEgbGV2ZWwgZGVlcCB0byBhbm90aGVyIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGNvbnN0IGNyZWF0ZUZsYXRQcm94eSA9IChjYWxsYmFjayk9PntcbiAgICByZXR1cm4gbmV3IFByb3h5KG5vb3AsIHtcbiAgICAgICAgZ2V0IChfb2JqLCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUgPT09ICd0aGVuJykge1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgaWYgdGhlIHByb3h5IGlzIGFjY2lkZW50YWxseSB0cmVhdGVkXG4gICAgICAgICAgICAgICAgLy8gbGlrZSBhIFByb21pc2VMaWtlIChsaWtlIGluIGBQcm9taXNlLnJlc29sdmUocHJveHkpYClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiBhcyBULCBjcmVhdGVSZWN1cnNpdmVQcm94eSBhcyBhLCBnZXRIVFRQU3RhdHVzQ29kZSBhcyBiLCBjcmVhdGVGbGF0UHJveHkgYXMgYywgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImkiLCJpbnZlcnQiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiIsIkpTT05SUEMyX1RPX0hUVFBfQ09ERSIsIlBBUlNFX0VSUk9SIiwiQkFEX1JFUVVFU1QiLCJVTkFVVEhPUklaRUQiLCJOT1RfRk9VTkQiLCJGT1JCSURERU4iLCJNRVRIT0RfTk9UX1NVUFBPUlRFRCIsIlRJTUVPVVQiLCJDT05GTElDVCIsIlBSRUNPTkRJVElPTl9GQUlMRUQiLCJQQVlMT0FEX1RPT19MQVJHRSIsIlVOUFJPQ0VTU0FCTEVfQ09OVEVOVCIsIlRPT19NQU5ZX1JFUVVFU1RTIiwiQ0xJRU5UX0NMT1NFRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiZ2V0U3RhdHVzQ29kZUZyb21LZXkiLCJjb2RlIiwiZ2V0SFRUUFN0YXR1c0NvZGUiLCJqc29uIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiaHR0cFN0YXR1c2VzIiwiU2V0IiwibWFwIiwicmVzIiwiZGF0YSIsImVycm9yIiwiaHR0cFN0YXR1cyIsInNpemUiLCJ2YWx1ZXMiLCJuZXh0IiwidmFsdWUiLCJnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciIsIm5vb3AiLCJjcmVhdGVJbm5lclByb3h5IiwiY2FsbGJhY2siLCJwYXRoIiwicHJveHkiLCJQcm94eSIsImdldCIsIl9vYmoiLCJrZXkiLCJ1bmRlZmluZWQiLCJhcHBseSIsIl8xIiwiXzIiLCJhcmdzIiwiaXNBcHBseSIsImxlbmd0aCIsInNsaWNlIiwiY3JlYXRlUmVjdXJzaXZlUHJveHkiLCJjcmVhdGVGbGF0UHJveHkiLCJuYW1lIiwiYSIsImIiLCJjIiwiZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/server/dist/observable-ade1bad8.mjs":
/*!********************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/observable-ade1bad8.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObservable),\n/* harmony export */   o: () => (/* binding */ observable)\n/* harmony export */ });\nfunction identity(x) {\n    return x;\n}\n/** @internal */ function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn)=>fn(prev), input);\n    };\n}\nfunction isObservable(x) {\n    return typeof x === \"object\" && x !== null && \"subscribe\" in x;\n}\nfunction observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) {\n                    return;\n                }\n                unsubscribed = true;\n                if (typeof teardownRef === \"function\") {\n                    teardownRef();\n                } else if (teardownRef) {\n                    teardownRef.unsubscribe();\n                }\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    if (isDone) {\n                        return;\n                    }\n                    observer.next?.(value);\n                },\n                error (err) {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.error?.(err);\n                    unsubscribe();\n                },\n                complete () {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.complete?.();\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) {\n                unsubscribe();\n            }\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return pipeFromArray(operations)(self);\n        }\n    };\n    return self;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L29ic2VydmFibGUtYWRlMWJhZDgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsU0FBU0MsQ0FBQztJQUNmLE9BQU9BO0FBQ1g7QUFFQSxjQUFjLEdBQUcsU0FBU0MsY0FBY0MsR0FBRztJQUN2QyxJQUFJQSxJQUFJQyxNQUFNLEtBQUssR0FBRztRQUNsQixPQUFPSjtJQUNYO0lBQ0EsSUFBSUcsSUFBSUMsTUFBTSxLQUFLLEdBQUc7UUFDbEIsb0VBQW9FO1FBQ3BFLE9BQU9ELEdBQUcsQ0FBQyxFQUFFO0lBQ2pCO0lBQ0EsT0FBTyxTQUFTRSxNQUFNQyxLQUFLO1FBQ3ZCLE9BQU9ILElBQUlJLE1BQU0sQ0FBQyxDQUFDQyxNQUFNQyxLQUFLQSxHQUFHRCxPQUFPRjtJQUM1QztBQUNKO0FBRUEsU0FBU0ksYUFBYVQsQ0FBQztJQUNuQixPQUFPLE9BQU9BLE1BQU0sWUFBWUEsTUFBTSxRQUFRLGVBQWVBO0FBQ2pFO0FBQ0EsU0FBU1UsV0FBV0MsU0FBUztJQUN6QixNQUFNQyxPQUFPO1FBQ1RELFdBQVdFLFFBQVE7WUFDZixJQUFJQyxjQUFjO1lBQ2xCLElBQUlDLFNBQVM7WUFDYixJQUFJQyxlQUFlO1lBQ25CLElBQUlDLHNCQUFzQjtZQUMxQixTQUFTQztnQkFDTCxJQUFJSixnQkFBZ0IsTUFBTTtvQkFDdEJHLHNCQUFzQjtvQkFDdEI7Z0JBQ0o7Z0JBQ0EsSUFBSUQsY0FBYztvQkFDZDtnQkFDSjtnQkFDQUEsZUFBZTtnQkFDZixJQUFJLE9BQU9GLGdCQUFnQixZQUFZO29CQUNuQ0E7Z0JBQ0osT0FBTyxJQUFJQSxhQUFhO29CQUNwQkEsWUFBWUksV0FBVztnQkFDM0I7WUFDSjtZQUNBSixjQUFjSCxVQUFVO2dCQUNwQlEsTUFBTUMsS0FBSztvQkFDUCxJQUFJTCxRQUFRO3dCQUNSO29CQUNKO29CQUNBRixTQUFTTSxJQUFJLEdBQUdDO2dCQUNwQjtnQkFDQUMsT0FBT0MsR0FBRztvQkFDTixJQUFJUCxRQUFRO3dCQUNSO29CQUNKO29CQUNBQSxTQUFTO29CQUNURixTQUFTUSxLQUFLLEdBQUdDO29CQUNqQko7Z0JBQ0o7Z0JBQ0FLO29CQUNJLElBQUlSLFFBQVE7d0JBQ1I7b0JBQ0o7b0JBQ0FBLFNBQVM7b0JBQ1RGLFNBQVNVLFFBQVE7b0JBQ2pCTDtnQkFDSjtZQUNKO1lBQ0EsSUFBSUQscUJBQXFCO2dCQUNyQkM7WUFDSjtZQUNBLE9BQU87Z0JBQ0hBO1lBQ0o7UUFDSjtRQUNBTSxNQUFNLEdBQUdDLFVBQVU7WUFDZixPQUFPeEIsY0FBY3dCLFlBQVliO1FBQ3JDO0lBQ0o7SUFDQSxPQUFPQTtBQUNYO0FBRThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9vYnNlcnZhYmxlLWFkZTFiYWQ4Lm1qcz84ZTljIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cblxuLyoqIEBpbnRlcm5hbCAqLyBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKChwcmV2LCBmbik9PmZuKHByZXYpLCBpbnB1dCk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGwgJiYgJ3N1YnNjcmliZScgaW4geDtcbn1cbmZ1bmN0aW9uIG9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHtcbiAgICAgICAgc3Vic2NyaWJlIChvYnNlcnZlcikge1xuICAgICAgICAgICAgbGV0IHRlYXJkb3duUmVmID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBpc0RvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB1bnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB0ZWFyZG93bkltbWVkaWF0ZWx5ID0gZmFsc2U7XG4gICAgICAgICAgICBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd25SZWYgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd25JbW1lZGlhdGVseSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZWFyZG93blJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93blJlZigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVhcmRvd25SZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd25SZWYudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZWFyZG93blJlZiA9IHN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dCAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQ/Lih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvciAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcj8uKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZT8uKCk7XG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGVhcmRvd25JbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBwaXBlICguLi5vcGVyYXRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKShzZWxmKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHNlbGY7XG59XG5cbmV4cG9ydCB7IGlzT2JzZXJ2YWJsZSBhcyBpLCBvYnNlcnZhYmxlIGFzIG8gfTtcbiJdLCJuYW1lcyI6WyJpZGVudGl0eSIsIngiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwibGVuZ3RoIiwicGlwZWQiLCJpbnB1dCIsInJlZHVjZSIsInByZXYiLCJmbiIsImlzT2JzZXJ2YWJsZSIsIm9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJzZWxmIiwib2JzZXJ2ZXIiLCJ0ZWFyZG93blJlZiIsImlzRG9uZSIsInVuc3Vic2NyaWJlZCIsInRlYXJkb3duSW1tZWRpYXRlbHkiLCJ1bnN1YnNjcmliZSIsIm5leHQiLCJ2YWx1ZSIsImVycm9yIiwiZXJyIiwiY29tcGxldGUiLCJwaXBlIiwib3BlcmF0aW9ucyIsImkiLCJvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/server/dist/observable-ade1bad8.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/server/dist/observable/index.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/observable/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObservable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   observable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   observableToPromise: () => (/* binding */ observableToPromise),\n/* harmony export */   share: () => (/* binding */ share),\n/* harmony export */   tap: () => (/* binding */ tap)\n/* harmony export */ });\n/* harmony import */ var _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable-ade1bad8.mjs */ \"(ssr)/../../node_modules/@trpc/server/dist/observable-ade1bad8.mjs\");\n\nfunction share(_opts) {\n    return (originalObserver)=>{\n        let refCount = 0;\n        let subscription = null;\n        const observers = [];\n        function startIfNeeded() {\n            if (subscription) {\n                return;\n            }\n            subscription = originalObserver.subscribe({\n                next (value) {\n                    for (const observer of observers){\n                        observer.next?.(value);\n                    }\n                },\n                error (error) {\n                    for (const observer of observers){\n                        observer.error?.(error);\n                    }\n                },\n                complete () {\n                    for (const observer of observers){\n                        observer.complete?.();\n                    }\n                }\n            });\n        }\n        function resetIfNeeded() {\n            // \"resetOnRefCountZero\"\n            if (refCount === 0 && subscription) {\n                const _sub = subscription;\n                subscription = null;\n                _sub.unsubscribe();\n            }\n        }\n        return {\n            subscribe (observer) {\n                refCount++;\n                observers.push(observer);\n                startIfNeeded();\n                return {\n                    unsubscribe () {\n                        refCount--;\n                        resetIfNeeded();\n                        const index = observers.findIndex((v)=>v === observer);\n                        if (index > -1) {\n                            observers.splice(index, 1);\n                        }\n                    }\n                };\n            }\n        };\n    };\n}\nfunction map(project) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer) {\n                let index = 0;\n                const subscription = originalObserver.subscribe({\n                    next (value) {\n                        observer.next?.(project(value, index++));\n                    },\n                    error (error) {\n                        observer.error?.(error);\n                    },\n                    complete () {\n                        observer.complete?.();\n                    }\n                });\n                return subscription;\n            }\n        };\n    };\n}\nfunction tap(observer) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer2) {\n                return originalObserver.subscribe({\n                    next (v) {\n                        observer.next?.(v);\n                        observer2.next?.(v);\n                    },\n                    error (v) {\n                        observer.error?.(v);\n                        observer2.error?.(v);\n                    },\n                    complete () {\n                        observer.complete?.();\n                        observer2.complete?.();\n                    }\n                });\n            }\n        };\n    };\n}\nclass ObservableAbortError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"ObservableAbortError\";\n        Object.setPrototypeOf(this, ObservableAbortError.prototype);\n    }\n}\n/** @internal */ function observableToPromise(observable) {\n    let abort;\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) {\n                return;\n            }\n            isDone = true;\n            reject(new ObservableAbortError(\"This operation was aborted.\"));\n            obs$.unsubscribe();\n        }\n        const obs$ = observable.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                isDone = true;\n                reject(data);\n                onDone();\n            },\n            complete () {\n                isDone = true;\n                onDone();\n            }\n        });\n        abort = onDone;\n    });\n    return {\n        promise,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        abort: abort\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/server/dist/observable/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/server/dist/shared/index.mjs":
/*!*************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/shared/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFlatProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createRecursiveProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   getErrorShape: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   transformTRPCResponse: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.t)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index-f91d720c.mjs */ \"(ssr)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformTRPCResponse-1153b421.mjs */ \"(ssr)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../codes-c924c3db.mjs */ \"(ssr)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3NoYXJlZC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF3RjtBQUNlO0FBQ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9zaGFyZWQvaW5kZXgubWpzP2U2NWYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgYyBhcyBjcmVhdGVGbGF0UHJveHksIGEgYXMgY3JlYXRlUmVjdXJzaXZlUHJveHkgfSBmcm9tICcuLi9pbmRleC1mOTFkNzIwYy5tanMnO1xuZXhwb3J0IHsgZyBhcyBnZXRFcnJvclNoYXBlLCB0IGFzIHRyYW5zZm9ybVRSUENSZXNwb25zZSB9IGZyb20gJy4uL3RyYW5zZm9ybVRSUENSZXNwb25zZS0xMTUzYjQyMS5tanMnO1xuaW1wb3J0ICcuLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuIl0sIm5hbWVzIjpbImMiLCJjcmVhdGVGbGF0UHJveHkiLCJhIiwiY3JlYXRlUmVjdXJzaXZlUHJveHkiLCJnIiwiZ2V0RXJyb3JTaGFwZSIsInQiLCJ0cmFuc2Zvcm1UUlBDUmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/server/dist/shared/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs":
/*!*******************************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getErrorShape),\n/* harmony export */   t: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(ssr)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(ssr)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n/**\n * @internal\n */ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__.T[code],\n        data: {\n            code,\n            httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") {\n        shape.data.stack = opts.error.stack;\n    }\n    if (typeof path === \"string\") {\n        shape.data.path = path;\n    }\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) {\n        return {\n            ...item,\n            error: config.transformer.output.serialize(item.error)\n        };\n    }\n    if (\"data\" in item.result) {\n        return {\n            ...item,\n            result: {\n                ...item.result,\n                data: config.transformer.output.serialize(item.result.data)\n            }\n        };\n    }\n    return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3RyYW5zZm9ybVRSUENSZXNwb25zZS0xMTUzYjQyMS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RTtBQUNIO0FBRXBFOztDQUVDLEdBQUcsU0FBU0ksY0FBY0MsSUFBSTtJQUMzQixNQUFNLEVBQUVDLElBQUksRUFBR0MsS0FBSyxFQUFHQyxNQUFNLEVBQUcsR0FBR0g7SUFDbkMsTUFBTSxFQUFFSSxJQUFJLEVBQUcsR0FBR0osS0FBS0UsS0FBSztJQUM1QixNQUFNRyxRQUFRO1FBQ1ZDLFNBQVNKLE1BQU1JLE9BQU87UUFDdEJGLE1BQU1OLGtEQUF1QixDQUFDTSxLQUFLO1FBQ25DRyxNQUFNO1lBQ0ZIO1lBQ0FJLFlBQVlaLHNEQUEwQkEsQ0FBQ007UUFDM0M7SUFDSjtJQUNBLElBQUlDLE9BQU9NLEtBQUssSUFBSSxPQUFPVCxLQUFLRSxLQUFLLENBQUNRLEtBQUssS0FBSyxVQUFVO1FBQ3RETCxNQUFNRSxJQUFJLENBQUNHLEtBQUssR0FBR1YsS0FBS0UsS0FBSyxDQUFDUSxLQUFLO0lBQ3ZDO0lBQ0EsSUFBSSxPQUFPVCxTQUFTLFVBQVU7UUFDMUJJLE1BQU1FLElBQUksQ0FBQ04sSUFBSSxHQUFHQTtJQUN0QjtJQUNBLE9BQU9FLE9BQU9RLGNBQWMsQ0FBQztRQUN6QixHQUFHWCxJQUFJO1FBQ1BLO0lBQ0o7QUFDSjtBQUVBLFNBQVNPLDBCQUEwQlQsTUFBTSxFQUFFVSxJQUFJO0lBQzNDLElBQUksV0FBV0EsTUFBTTtRQUNqQixPQUFPO1lBQ0gsR0FBR0EsSUFBSTtZQUNQWCxPQUFPQyxPQUFPVyxXQUFXLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDSCxLQUFLWCxLQUFLO1FBQ3pEO0lBQ0o7SUFDQSxJQUFJLFVBQVVXLEtBQUtJLE1BQU0sRUFBRTtRQUN2QixPQUFPO1lBQ0gsR0FBR0osSUFBSTtZQUNQSSxRQUFRO2dCQUNKLEdBQUdKLEtBQUtJLE1BQU07Z0JBQ2RWLE1BQU1KLE9BQU9XLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNILEtBQUtJLE1BQU0sQ0FBQ1YsSUFBSTtZQUM5RDtRQUNKO0lBQ0o7SUFDQSxPQUFPTTtBQUNYO0FBQ0E7O0VBRUUsR0FBRyxTQUFTSyxzQkFBc0JmLE1BQU0sRUFBRWdCLFdBQVc7SUFDbkQsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixlQUFlQSxZQUFZRyxHQUFHLENBQUMsQ0FBQ1QsT0FBT0QsMEJBQTBCVCxRQUFRVSxTQUFTRCwwQkFBMEJULFFBQVFnQjtBQUM3STtBQUUwRCIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcz82YjlhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgfSBmcm9tICcuL2luZGV4LWY5MWQ3MjBjLm1qcyc7XG5pbXBvcnQgeyBUIGFzIFRSUENfRVJST1JfQ09ERVNfQllfS0VZIH0gZnJvbSAnLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGdldEVycm9yU2hhcGUob3B0cykge1xuICAgIGNvbnN0IHsgcGF0aCAsIGVycm9yICwgY29uZmlnICB9ID0gb3B0cztcbiAgICBjb25zdCB7IGNvZGUgIH0gPSBvcHRzLmVycm9yO1xuICAgIGNvbnN0IHNoYXBlID0ge1xuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBjb2RlOiBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWVtjb2RlXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIGh0dHBTdGF0dXM6IGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoY29uZmlnLmlzRGV2ICYmIHR5cGVvZiBvcHRzLmVycm9yLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnN0YWNrID0gb3B0cy5lcnJvci5zdGFjaztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmVycm9yRm9ybWF0dGVyKHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgc2hhcGVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiBpdGVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgZXJyb3I6IGNvbmZpZy50cmFuc2Zvcm1lci5vdXRwdXQuc2VyaWFsaXplKGl0ZW0uZXJyb3IpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgnZGF0YScgaW4gaXRlbS5yZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBkYXRhOiBjb25maWcudHJhbnNmb3JtZXIub3V0cHV0LnNlcmlhbGl6ZShpdGVtLnJlc3VsdC5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbi8qKlxuICogVGFrZXMgYSB1bnNlcmlhbGl6ZWQgYFRSUENSZXNwb25zZWAgYW5kIHNlcmlhbGl6ZXMgaXQgd2l0aCB0aGUgcm91dGVyJ3MgdHJhbnNmb3JtZXJzXG4gKiovIGZ1bmN0aW9uIHRyYW5zZm9ybVRSUENSZXNwb25zZShjb25maWcsIGl0ZW1Pckl0ZW1zKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbU9ySXRlbXMpID8gaXRlbU9ySXRlbXMubWFwKChpdGVtKT0+dHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pKSA6IHRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0oY29uZmlnLCBpdGVtT3JJdGVtcyk7XG59XG5cbmV4cG9ydCB7IGdldEVycm9yU2hhcGUgYXMgZywgdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlIGFzIHQgfTtcbiJdLCJuYW1lcyI6WyJnIiwiZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJnZXRFcnJvclNoYXBlIiwib3B0cyIsInBhdGgiLCJlcnJvciIsImNvbmZpZyIsImNvZGUiLCJzaGFwZSIsIm1lc3NhZ2UiLCJkYXRhIiwiaHR0cFN0YXR1cyIsImlzRGV2Iiwic3RhY2siLCJlcnJvckZvcm1hdHRlciIsInRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0iLCJpdGVtIiwidHJhbnNmb3JtZXIiLCJvdXRwdXQiLCJzZXJpYWxpemUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm1UUlBDUmVzcG9uc2UiLCJpdGVtT3JJdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/TRPCError-816ff32e.mjs":
/*!*******************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/TRPCError-816ff32e.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCError),\n/* harmony export */   g: () => (/* binding */ getTRPCErrorFromUnknown)\n/* harmony export */ });\n/**\n * @internal\n */ function isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\nfunction getTRPCErrorFromUnknown(cause) {\n    if (cause instanceof TRPCError) {\n        return cause;\n    }\n    if (cause instanceof Error && cause.name === \"TRPCError\") {\n        // https://github.com/trpc/trpc/pull/4848\n        return cause;\n    }\n    const trpcError = new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        cause\n    });\n    // Inherit stack from error\n    if (cause instanceof Error && cause.stack) {\n        trpcError.stack = cause.stack;\n    }\n    return trpcError;\n}\nclass UnknownCauseError extends Error {\n}\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) {\n        return cause;\n    }\n    const type = typeof cause;\n    if (type === \"undefined\" || type === \"function\" || cause === null) {\n        return undefined;\n    }\n    // Primitive types just get wrapped in an error\n    if (type !== \"object\") {\n        return new Error(String(cause));\n    }\n    // If it's an object, we'll create a synthetic error\n    if (isObject(cause)) {\n        const err = new UnknownCauseError();\n        for(const key in cause){\n            err[key] = cause[key];\n        }\n        return err;\n    }\n    return undefined;\n}\nclass TRPCError extends Error {\n    constructor(opts){\n        const cause = getCauseFromUnknown(opts.cause);\n        const message = opts.message ?? cause?.message ?? opts.code;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.code = opts.code;\n        this.name = \"TRPCError\";\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L1RSUENFcnJvci04MTZmZjMyZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Q0FFQyxHQUFHLFNBQVNBLFNBQVNDLEtBQUs7SUFDdkIsNkJBQTZCO0lBQzdCLE9BQU8sQ0FBQyxDQUFDQSxTQUFTLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsVUFBVSxPQUFPQSxVQUFVO0FBQ2hFO0FBRUEsU0FBU0csd0JBQXdCQyxLQUFLO0lBQ2xDLElBQUlBLGlCQUFpQkMsV0FBVztRQUM1QixPQUFPRDtJQUNYO0lBQ0EsSUFBSUEsaUJBQWlCRSxTQUFTRixNQUFNRyxJQUFJLEtBQUssYUFBYTtRQUN0RCx5Q0FBeUM7UUFDekMsT0FBT0g7SUFDWDtJQUNBLE1BQU1JLFlBQVksSUFBSUgsVUFBVTtRQUM1QkksTUFBTTtRQUNOTDtJQUNKO0lBQ0EsMkJBQTJCO0lBQzNCLElBQUlBLGlCQUFpQkUsU0FBU0YsTUFBTU0sS0FBSyxFQUFFO1FBQ3ZDRixVQUFVRSxLQUFLLEdBQUdOLE1BQU1NLEtBQUs7SUFDakM7SUFDQSxPQUFPRjtBQUNYO0FBQ0EsTUFBTUcsMEJBQTBCTDtBQUNoQztBQUNBLFNBQVNNLG9CQUFvQlIsS0FBSztJQUM5QixJQUFJQSxpQkFBaUJFLE9BQU87UUFDeEIsT0FBT0Y7SUFDWDtJQUNBLE1BQU1TLE9BQU8sT0FBT1Q7SUFDcEIsSUFBSVMsU0FBUyxlQUFlQSxTQUFTLGNBQWNULFVBQVUsTUFBTTtRQUMvRCxPQUFPVTtJQUNYO0lBQ0EsK0NBQStDO0lBQy9DLElBQUlELFNBQVMsVUFBVTtRQUNuQixPQUFPLElBQUlQLE1BQU1TLE9BQU9YO0lBQzVCO0lBQ0Esb0RBQW9EO0lBQ3BELElBQUlMLFNBQVNLLFFBQVE7UUFDakIsTUFBTVksTUFBTSxJQUFJTDtRQUNoQixJQUFJLE1BQU1NLE9BQU9iLE1BQU07WUFDbkJZLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHYixLQUFLLENBQUNhLElBQUk7UUFDekI7UUFDQSxPQUFPRDtJQUNYO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBLE1BQU1ULGtCQUFrQkM7SUFDcEJZLFlBQVlDLElBQUksQ0FBQztRQUNiLE1BQU1mLFFBQVFRLG9CQUFvQk8sS0FBS2YsS0FBSztRQUM1QyxNQUFNZ0IsVUFBVUQsS0FBS0MsT0FBTyxJQUFJaEIsT0FBT2dCLFdBQVdELEtBQUtWLElBQUk7UUFDM0QsNkRBQTZEO1FBQzdELDBEQUEwRDtRQUMxRCxLQUFLLENBQUNXLFNBQVM7WUFDWGhCO1FBQ0o7UUFDQSxJQUFJLENBQUNLLElBQUksR0FBR1UsS0FBS1YsSUFBSTtRQUNyQixJQUFJLENBQUNGLElBQUksR0FBRztJQUNoQjtBQUNKO0FBRXdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9UUlBDRXJyb3ItODE2ZmYzMmUubWpzPzVjZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIC8vIGNoZWNrIHRoYXQgdmFsdWUgaXMgb2JqZWN0XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbmZ1bmN0aW9uIGdldFRSUENFcnJvckZyb21Vbmtub3duKGNhdXNlKSB7XG4gICAgaWYgKGNhdXNlIGluc3RhbmNlb2YgVFJQQ0Vycm9yKSB7XG4gICAgICAgIHJldHVybiBjYXVzZTtcbiAgICB9XG4gICAgaWYgKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IgJiYgY2F1c2UubmFtZSA9PT0gJ1RSUENFcnJvcicpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RycGMvdHJwYy9wdWxsLzQ4NDhcbiAgICAgICAgcmV0dXJuIGNhdXNlO1xuICAgIH1cbiAgICBjb25zdCB0cnBjRXJyb3IgPSBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgY29kZTogJ0lOVEVSTkFMX1NFUlZFUl9FUlJPUicsXG4gICAgICAgIGNhdXNlXG4gICAgfSk7XG4gICAgLy8gSW5oZXJpdCBzdGFjayBmcm9tIGVycm9yXG4gICAgaWYgKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IgJiYgY2F1c2Uuc3RhY2spIHtcbiAgICAgICAgdHJwY0Vycm9yLnN0YWNrID0gY2F1c2Uuc3RhY2s7XG4gICAgfVxuICAgIHJldHVybiB0cnBjRXJyb3I7XG59XG5jbGFzcyBVbmtub3duQ2F1c2VFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbmZ1bmN0aW9uIGdldENhdXNlRnJvbVVua25vd24oY2F1c2UpIHtcbiAgICBpZiAoY2F1c2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICByZXR1cm4gY2F1c2U7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgY2F1c2U7XG4gICAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicgfHwgY2F1c2UgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gUHJpbWl0aXZlIHR5cGVzIGp1c3QgZ2V0IHdyYXBwZWQgaW4gYW4gZXJyb3JcbiAgICBpZiAodHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihTdHJpbmcoY2F1c2UpKTtcbiAgICB9XG4gICAgLy8gSWYgaXQncyBhbiBvYmplY3QsIHdlJ2xsIGNyZWF0ZSBhIHN5bnRoZXRpYyBlcnJvclxuICAgIGlmIChpc09iamVjdChjYXVzZSkpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IFVua25vd25DYXVzZUVycm9yKCk7XG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gY2F1c2Upe1xuICAgICAgICAgICAgZXJyW2tleV0gPSBjYXVzZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5jbGFzcyBUUlBDRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob3B0cyl7XG4gICAgICAgIGNvbnN0IGNhdXNlID0gZ2V0Q2F1c2VGcm9tVW5rbm93bihvcHRzLmNhdXNlKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG9wdHMubWVzc2FnZSA/PyBjYXVzZT8ubWVzc2FnZSA/PyBvcHRzLmNvZGU7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuICAgICAgICBzdXBlcihtZXNzYWdlLCB7XG4gICAgICAgICAgICBjYXVzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb2RlID0gb3B0cy5jb2RlO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVFJQQ0Vycm9yJztcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRSUENFcnJvciBhcyBULCBnZXRUUlBDRXJyb3JGcm9tVW5rbm93biBhcyBnIH07XG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImdldFRSUENFcnJvckZyb21Vbmtub3duIiwiY2F1c2UiLCJUUlBDRXJyb3IiLCJFcnJvciIsIm5hbWUiLCJ0cnBjRXJyb3IiLCJjb2RlIiwic3RhY2siLCJVbmtub3duQ2F1c2VFcnJvciIsImdldENhdXNlRnJvbVVua25vd24iLCJ0eXBlIiwidW5kZWZpbmVkIiwiU3RyaW5nIiwiZXJyIiwia2V5IiwiY29uc3RydWN0b3IiLCJvcHRzIiwibWVzc2FnZSIsIlQiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/TRPCError-816ff32e.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/adapters/fetch/index.mjs":
/*!*********************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/adapters/fetch/index.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchRequestHandler: () => (/* binding */ fetchRequestHandler)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _resolveHTTPResponse_55c648bd_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../resolveHTTPResponse-55c648bd.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/resolveHTTPResponse-55c648bd.mjs\");\n/* harmony import */ var _batchStreamFormatter_fc1ffb26_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../batchStreamFormatter-fc1ffb26.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n/* harmony import */ var _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../router-5274e533.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/router-5274e533.mjs\");\n/* harmony import */ var _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../TRPCError-816ff32e.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-816ff32e.mjs\");\n/* harmony import */ var _config_ab4c1c6b_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../config-ab4c1c6b.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/config-ab4c1c6b.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../transformTRPCResponse-1153b421.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _contentType_93515a46_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../contentType-93515a46.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/contentType-93515a46.mjs\");\n\n\n\n\n\n\n\n\n\nasync function fetchRequestHandler(opts) {\n    const resHeaders = new Headers();\n    const createContext = async (innerOpts)=>{\n        return opts.createContext?.({\n            req: opts.req,\n            resHeaders,\n            ...innerOpts\n        });\n    };\n    const url = new URL(opts.req.url);\n    const path = url.pathname.slice(opts.endpoint.length + 1);\n    const req = {\n        query: url.searchParams,\n        method: opts.req.method,\n        headers: Object.fromEntries(opts.req.headers),\n        body: opts.req.headers.get(\"content-type\")?.startsWith(\"application/json\") ? await opts.req.text() : \"\"\n    };\n    let resolve;\n    const promise = new Promise((r)=>resolve = r);\n    let status = 200;\n    let isStream = false;\n    let controller;\n    let encoder;\n    let formatter;\n    const unstable_onHead = (head, isStreaming)=>{\n        for (const [key, value] of Object.entries(head.headers ?? {})){\n            /* istanbul ignore if -- @preserve */ if (typeof value === \"undefined\") {\n                continue;\n            }\n            if (typeof value === \"string\") {\n                resHeaders.set(key, value);\n                continue;\n            }\n            for (const v of value){\n                resHeaders.append(key, v);\n            }\n        }\n        status = head.status;\n        if (isStreaming) {\n            resHeaders.set(\"Transfer-Encoding\", \"chunked\");\n            resHeaders.append(\"Vary\", \"trpc-batch-mode\");\n            const stream = new ReadableStream({\n                start (c) {\n                    controller = c;\n                }\n            });\n            const response = new Response(stream, {\n                status,\n                headers: resHeaders\n            });\n            resolve(response);\n            encoder = new TextEncoder();\n            formatter = (0,_batchStreamFormatter_fc1ffb26_mjs__WEBPACK_IMPORTED_MODULE_2__.g)();\n            isStream = true;\n        }\n    };\n    const unstable_onChunk = ([index, string])=>{\n        if (index === -1) {\n            // full response, no streaming\n            const response = new Response(string || null, {\n                status,\n                headers: resHeaders\n            });\n            resolve(response);\n        } else {\n            controller.enqueue(encoder.encode(formatter(index, string)));\n        }\n    };\n    (0,_resolveHTTPResponse_55c648bd_mjs__WEBPACK_IMPORTED_MODULE_1__.r)({\n        req,\n        createContext,\n        path,\n        router: opts.router,\n        batching: opts.batching,\n        responseMeta: opts.responseMeta,\n        onError (o) {\n            opts?.onError?.({\n                ...o,\n                req: opts.req\n            });\n        },\n        unstable_onHead,\n        unstable_onChunk\n    }).then(()=>{\n        if (isStream) {\n            controller.enqueue(encoder.encode(formatter.end()));\n            controller.close();\n        }\n    }).catch(()=>{\n        if (isStream) {\n            controller.close();\n        }\n    });\n    return promise;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/adapters/fetch/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs":
/*!******************************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getBatchStreamFormatter)\n/* harmony export */ });\n/**\n * Format a batch response as a line-delimited JSON stream\n * that the `unstable_httpBatchStreamLink` can parse:\n *\n * @example\n * ```ts\n * const formatter = getBatchStreamFormatter();\n * res.send(formatter(1, 'response #2'));\n * res.send(formatter(0, 'response #1'));\n * res.send(formatter.end());\n * ```\n *\n * Expected format:\n * ```json\n * {\"1\":\"response #2\"\n * ,\"0\":\"response #1\"\n * }\n * ```\n */ function getBatchStreamFormatter() {\n    let first = true;\n    function format(index, string) {\n        const prefix = first ? \"{\" : \",\";\n        first = false;\n        return `${prefix}\"${index}\":${string}\\n`;\n    }\n    format.end = ()=>\"}\";\n    return format;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2JhdGNoU3RyZWFtRm9ybWF0dGVyLWZjMWZmYjI2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCQyxHQUFHLFNBQVNBO0lBQ1QsSUFBSUMsUUFBUTtJQUNaLFNBQVNDLE9BQU9DLEtBQUssRUFBRUMsTUFBTTtRQUN6QixNQUFNQyxTQUFTSixRQUFRLE1BQU07UUFDN0JBLFFBQVE7UUFDUixPQUFPLENBQUMsRUFBRUksT0FBTyxDQUFDLEVBQUVGLE1BQU0sRUFBRSxFQUFFQyxPQUFPLEVBQUUsQ0FBQztJQUM1QztJQUNBRixPQUFPSSxHQUFHLEdBQUcsSUFBSTtJQUNqQixPQUFPSjtBQUNYO0FBRXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9iYXRjaFN0cmVhbUZvcm1hdHRlci1mYzFmZmIyNi5tanM/MDAyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZvcm1hdCBhIGJhdGNoIHJlc3BvbnNlIGFzIGEgbGluZS1kZWxpbWl0ZWQgSlNPTiBzdHJlYW1cbiAqIHRoYXQgdGhlIGB1bnN0YWJsZV9odHRwQmF0Y2hTdHJlYW1MaW5rYCBjYW4gcGFyc2U6XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBmb3JtYXR0ZXIgPSBnZXRCYXRjaFN0cmVhbUZvcm1hdHRlcigpO1xuICogcmVzLnNlbmQoZm9ybWF0dGVyKDEsICdyZXNwb25zZSAjMicpKTtcbiAqIHJlcy5zZW5kKGZvcm1hdHRlcigwLCAncmVzcG9uc2UgIzEnKSk7XG4gKiByZXMuc2VuZChmb3JtYXR0ZXIuZW5kKCkpO1xuICogYGBgXG4gKlxuICogRXhwZWN0ZWQgZm9ybWF0OlxuICogYGBganNvblxuICoge1wiMVwiOlwicmVzcG9uc2UgIzJcIlxuICogLFwiMFwiOlwicmVzcG9uc2UgIzFcIlxuICogfVxuICogYGBgXG4gKi8gZnVuY3Rpb24gZ2V0QmF0Y2hTdHJlYW1Gb3JtYXR0ZXIoKSB7XG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICBmdW5jdGlvbiBmb3JtYXQoaW5kZXgsIHN0cmluZykge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBmaXJzdCA/ICd7JyA6ICcsJztcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH1cIiR7aW5kZXh9XCI6JHtzdHJpbmd9XFxuYDtcbiAgICB9XG4gICAgZm9ybWF0LmVuZCA9ICgpPT4nfSc7XG4gICAgcmV0dXJuIGZvcm1hdDtcbn1cblxuZXhwb3J0IHsgZ2V0QmF0Y2hTdHJlYW1Gb3JtYXR0ZXIgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImdldEJhdGNoU3RyZWFtRm9ybWF0dGVyIiwiZmlyc3QiLCJmb3JtYXQiLCJpbmRleCIsInN0cmluZyIsInByZWZpeCIsImVuZCIsImciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/codes-c924c3db.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   a: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   i: () => (/* binding */ invert)\n/* harmony export */ });\n/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2NvZGVzLWM5MjRjM2RiLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Q0FFQyxHQUFHLFNBQVNBLE9BQU9DLEdBQUc7SUFDbkIsTUFBTUMsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzdCLElBQUksTUFBTUMsT0FBT0osSUFBSTtRQUNqQixNQUFNSyxJQUFJTCxHQUFHLENBQUNJLElBQUk7UUFDbEJILE1BQU0sQ0FBQ0ksRUFBRSxHQUFHRDtJQUNoQjtJQUNBLE9BQU9IO0FBQ1g7QUFFQSxtREFBbUQ7QUFDbkQ7Ozs7O0NBS0MsR0FBRyxNQUFNSywwQkFBMEI7SUFDaEM7OztHQUdELEdBQUdDLGFBQWEsQ0FBQztJQUNoQjs7R0FFRCxHQUFHQyxhQUFhLENBQUM7SUFDaEIsMEJBQTBCO0lBQzFCQyx1QkFBdUIsQ0FBQztJQUN4QkMsaUJBQWlCLENBQUM7SUFDbEIsaUNBQWlDO0lBQ2pDQyxjQUFjLENBQUM7SUFDZkMsV0FBVyxDQUFDO0lBQ1pDLFdBQVcsQ0FBQztJQUNaQyxzQkFBc0IsQ0FBQztJQUN2QkMsU0FBUyxDQUFDO0lBQ1ZDLFVBQVUsQ0FBQztJQUNYQyxxQkFBcUIsQ0FBQztJQUN0QkMsbUJBQW1CLENBQUM7SUFDcEJDLHVCQUF1QixDQUFDO0lBQ3hCQyxtQkFBbUIsQ0FBQztJQUNwQkMsdUJBQXVCLENBQUM7QUFDNUI7QUFDQSxNQUFNQyw2QkFBNkJ2QixPQUFPTztBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29kZXMtYzkyNGMzZGIubWpzPzBhY2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBpbnZlcnQob2JqKSB7XG4gICAgY29uc3QgbmV3T2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IoY29uc3Qga2V5IGluIG9iail7XG4gICAgICAgIGNvbnN0IHYgPSBvYmpba2V5XTtcbiAgICAgICAgbmV3T2JqW3ZdID0ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xufVxuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vd3d3Lmpzb25ycGMub3JnL3NwZWNpZmljYXRpb25cbi8qKlxuICogSlNPTi1SUEMgMi4wIEVycm9yIGNvZGVzXG4gKlxuICogYC0zMjAwMGAgdG8gYC0zMjA5OWAgYXJlIHJlc2VydmVkIGZvciBpbXBsZW1lbnRhdGlvbi1kZWZpbmVkIHNlcnZlci1lcnJvcnMuXG4gKiBGb3IgdFJQQyB3ZSdyZSBjb3B5aW5nIHRoZSBsYXN0IGRpZ2l0cyBvZiBIVFRQIDRYWCBlcnJvcnMuXG4gKi8gY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgPSB7XG4gICAgLyoqXG4gICAqIEludmFsaWQgSlNPTiB3YXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAgICogQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXG4gICAqLyBQQVJTRV9FUlJPUjogLTMyNzAwLFxuICAgIC8qKlxuICAgKiBUaGUgSlNPTiBzZW50IGlzIG5vdCBhIHZhbGlkIFJlcXVlc3Qgb2JqZWN0LlxuICAgKi8gQkFEX1JFUVVFU1Q6IC0zMjYwMCxcbiAgICAvLyBJbnRlcm5hbCBKU09OLVJQQyBlcnJvclxuICAgIElOVEVSTkFMX1NFUlZFUl9FUlJPUjogLTMyNjAzLFxuICAgIE5PVF9JTVBMRU1FTlRFRDogLTMyNjAzLFxuICAgIC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljIGVycm9yc1xuICAgIFVOQVVUSE9SSVpFRDogLTMyMDAxLFxuICAgIEZPUkJJRERFTjogLTMyMDAzLFxuICAgIE5PVF9GT1VORDogLTMyMDA0LFxuICAgIE1FVEhPRF9OT1RfU1VQUE9SVEVEOiAtMzIwMDUsXG4gICAgVElNRU9VVDogLTMyMDA4LFxuICAgIENPTkZMSUNUOiAtMzIwMDksXG4gICAgUFJFQ09ORElUSU9OX0ZBSUxFRDogLTMyMDEyLFxuICAgIFBBWUxPQURfVE9PX0xBUkdFOiAtMzIwMTMsXG4gICAgVU5QUk9DRVNTQUJMRV9DT05URU5UOiAtMzIwMjIsXG4gICAgVE9PX01BTllfUkVRVUVTVFM6IC0zMjAyOSxcbiAgICBDTElFTlRfQ0xPU0VEX1JFUVVFU1Q6IC0zMjA5OVxufTtcbmNvbnN0IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSID0gaW52ZXJ0KFRSUENfRVJST1JfQ09ERVNfQllfS0VZKTtcblxuZXhwb3J0IHsgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgYXMgVCwgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgYXMgYSwgaW52ZXJ0IGFzIGkgfTtcbiJdLCJuYW1lcyI6WyJpbnZlcnQiLCJvYmoiLCJuZXdPYmoiLCJPYmplY3QiLCJjcmVhdGUiLCJrZXkiLCJ2IiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJQQVJTRV9FUlJPUiIsIkJBRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiVU5BVVRIT1JJWkVEIiwiRk9SQklEREVOIiwiTk9UX0ZPVU5EIiwiTUVUSE9EX05PVF9TVVBQT1JURUQiLCJUSU1FT1VUIiwiQ09ORkxJQ1QiLCJQUkVDT05ESVRJT05fRkFJTEVEIiwiUEFZTE9BRF9UT09fTEFSR0UiLCJVTlBST0NFU1NBQkxFX0NPTlRFTlQiLCJUT09fTUFOWV9SRVFVRVNUUyIsIkNMSUVOVF9DTE9TRURfUkVRVUVTVCIsIlRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIiwiVCIsImEiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/config-ab4c1c6b.mjs":
/*!****************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/config-ab4c1c6b.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isServerDefault)\n/* harmony export */ });\n/**\n * The default check to see if we're in a server\n */ const isServerDefault =  true || 0;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2NvbmZpZy1hYjRjMWM2Yi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQUcsTUFBTUEsa0JBQWtCLEtBQThJTSxJQUFJLENBQTJDQztBQUV6TCIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29uZmlnLWFiNGMxYzZiLm1qcz9lYmM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGRlZmF1bHQgY2hlY2sgdG8gc2VlIGlmIHdlJ3JlIGluIGEgc2VydmVyXG4gKi8gY29uc3QgaXNTZXJ2ZXJEZWZhdWx0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgJ0Rlbm8nIGluIHdpbmRvdyB8fCBnbG9iYWxUaGlzLnByb2Nlc3M/LmVudj8uTk9ERV9FTlYgPT09ICd0ZXN0JyB8fCAhIWdsb2JhbFRoaXMucHJvY2Vzcz8uZW52Py5KRVNUX1dPUktFUl9JRCB8fCAhIWdsb2JhbFRoaXMucHJvY2Vzcz8uZW52Py5WSVRFU1RfV09SS0VSX0lEO1xuXG5leHBvcnQgeyBpc1NlcnZlckRlZmF1bHQgYXMgaSB9O1xuIl0sIm5hbWVzIjpbImlzU2VydmVyRGVmYXVsdCIsIndpbmRvdyIsImdsb2JhbFRoaXMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJKRVNUX1dPUktFUl9JRCIsIlZJVEVTVF9XT1JLRVJfSUQiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/config-ab4c1c6b.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/contentType-93515a46.mjs":
/*!*********************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/contentType-93515a46.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getJsonContentTypeInputs)\n/* harmony export */ });\n/* harmony import */ var _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCError-816ff32e.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-816ff32e.mjs\");\n\nfunction getRawProcedureInputOrThrow(opts) {\n    const { req } = opts;\n    try {\n        if (req.method === \"GET\") {\n            if (!req.query.has(\"input\")) {\n                return undefined;\n            }\n            const raw = req.query.get(\"input\");\n            return JSON.parse(raw);\n        }\n        if (!opts.preprocessedBody && typeof req.body === \"string\") {\n            // A mutation with no inputs will have req.body === ''\n            return req.body.length === 0 ? undefined : JSON.parse(req.body);\n        }\n        return req.body;\n    } catch (cause) {\n        throw new _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"PARSE_ERROR\",\n            cause\n        });\n    }\n}\nconst deserializeInputValue = (rawValue, transformer)=>{\n    return typeof rawValue !== \"undefined\" ? transformer.input.deserialize(rawValue) : rawValue;\n};\nconst getJsonContentTypeInputs = (opts)=>{\n    const rawInput = getRawProcedureInputOrThrow(opts);\n    const transformer = opts.router._def._config.transformer;\n    if (!opts.isBatchCall) {\n        return {\n            0: deserializeInputValue(rawInput, transformer)\n        };\n    }\n    /* istanbul ignore if  */ if (rawInput == null || typeof rawInput !== \"object\" || Array.isArray(rawInput)) {\n        throw new _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"BAD_REQUEST\",\n            message: '\"input\" needs to be an object when doing a batch call'\n        });\n    }\n    const input = {};\n    for(const key in rawInput){\n        const k = key;\n        const rawValue = rawInput[k];\n        const value = deserializeInputValue(rawValue, transformer);\n        input[k] = value;\n    }\n    return input;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2NvbnRlbnRUeXBlLTkzNTE1YTQ2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwRDtBQUUxRCxTQUFTRSw0QkFBNEJDLElBQUk7SUFDckMsTUFBTSxFQUFFQyxHQUFHLEVBQUcsR0FBR0Q7SUFDakIsSUFBSTtRQUNBLElBQUlDLElBQUlDLE1BQU0sS0FBSyxPQUFPO1lBQ3RCLElBQUksQ0FBQ0QsSUFBSUUsS0FBSyxDQUFDQyxHQUFHLENBQUMsVUFBVTtnQkFDekIsT0FBT0M7WUFDWDtZQUNBLE1BQU1DLE1BQU1MLElBQUlFLEtBQUssQ0FBQ0ksR0FBRyxDQUFDO1lBQzFCLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0g7UUFDdEI7UUFDQSxJQUFJLENBQUNOLEtBQUtVLGdCQUFnQixJQUFJLE9BQU9ULElBQUlVLElBQUksS0FBSyxVQUFVO1lBQ3hELHNEQUFzRDtZQUN0RCxPQUFPVixJQUFJVSxJQUFJLENBQUNDLE1BQU0sS0FBSyxJQUFJUCxZQUFZRyxLQUFLQyxLQUFLLENBQUNSLElBQUlVLElBQUk7UUFDbEU7UUFDQSxPQUFPVixJQUFJVSxJQUFJO0lBQ25CLEVBQUUsT0FBT0UsT0FBTztRQUNaLE1BQU0sSUFBSWYsc0RBQVNBLENBQUM7WUFDaEJnQixNQUFNO1lBQ05EO1FBQ0o7SUFDSjtBQUNKO0FBQ0EsTUFBTUUsd0JBQXdCLENBQUNDLFVBQVVDO0lBQ3JDLE9BQU8sT0FBT0QsYUFBYSxjQUFjQyxZQUFZQyxLQUFLLENBQUNDLFdBQVcsQ0FBQ0gsWUFBWUE7QUFDdkY7QUFDQSxNQUFNSSwyQkFBMkIsQ0FBQ3BCO0lBQzlCLE1BQU1xQixXQUFXdEIsNEJBQTRCQztJQUM3QyxNQUFNaUIsY0FBY2pCLEtBQUtzQixNQUFNLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDUCxXQUFXO0lBQ3hELElBQUksQ0FBQ2pCLEtBQUt5QixXQUFXLEVBQUU7UUFDbkIsT0FBTztZQUNILEdBQUdWLHNCQUFzQk0sVUFBVUo7UUFDdkM7SUFDSjtJQUNBLHVCQUF1QixHQUFHLElBQUlJLFlBQVksUUFBUSxPQUFPQSxhQUFhLFlBQVlLLE1BQU1DLE9BQU8sQ0FBQ04sV0FBVztRQUN2RyxNQUFNLElBQUl2QixzREFBU0EsQ0FBQztZQUNoQmdCLE1BQU07WUFDTmMsU0FBUztRQUNiO0lBQ0o7SUFDQSxNQUFNVixRQUFRLENBQUM7SUFDZixJQUFJLE1BQU1XLE9BQU9SLFNBQVM7UUFDdEIsTUFBTVMsSUFBSUQ7UUFDVixNQUFNYixXQUFXSyxRQUFRLENBQUNTLEVBQUU7UUFDNUIsTUFBTUMsUUFBUWhCLHNCQUFzQkMsVUFBVUM7UUFDOUNDLEtBQUssQ0FBQ1ksRUFBRSxHQUFHQztJQUNmO0lBQ0EsT0FBT2I7QUFDWDtBQUV5QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29udGVudFR5cGUtOTM1MTVhNDYubWpzPzRiZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVCBhcyBUUlBDRXJyb3IgfSBmcm9tICcuL1RSUENFcnJvci04MTZmZjMyZS5tanMnO1xuXG5mdW5jdGlvbiBnZXRSYXdQcm9jZWR1cmVJbnB1dE9yVGhyb3cob3B0cykge1xuICAgIGNvbnN0IHsgcmVxICB9ID0gb3B0cztcbiAgICB0cnkge1xuICAgICAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgICAgIGlmICghcmVxLnF1ZXJ5LmhhcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByYXcgPSByZXEucXVlcnkuZ2V0KCdpbnB1dCcpO1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmF3KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdHMucHJlcHJvY2Vzc2VkQm9keSAmJiB0eXBlb2YgcmVxLmJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBBIG11dGF0aW9uIHdpdGggbm8gaW5wdXRzIHdpbGwgaGF2ZSByZXEuYm9keSA9PT0gJydcbiAgICAgICAgICAgIHJldHVybiByZXEuYm9keS5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBKU09OLnBhcnNlKHJlcS5ib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxLmJvZHk7XG4gICAgfSBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgICBjb2RlOiAnUEFSU0VfRVJST1InLFxuICAgICAgICAgICAgY2F1c2VcbiAgICAgICAgfSk7XG4gICAgfVxufVxuY29uc3QgZGVzZXJpYWxpemVJbnB1dFZhbHVlID0gKHJhd1ZhbHVlLCB0cmFuc2Zvcm1lcik9PntcbiAgICByZXR1cm4gdHlwZW9mIHJhd1ZhbHVlICE9PSAndW5kZWZpbmVkJyA/IHRyYW5zZm9ybWVyLmlucHV0LmRlc2VyaWFsaXplKHJhd1ZhbHVlKSA6IHJhd1ZhbHVlO1xufTtcbmNvbnN0IGdldEpzb25Db250ZW50VHlwZUlucHV0cyA9IChvcHRzKT0+e1xuICAgIGNvbnN0IHJhd0lucHV0ID0gZ2V0UmF3UHJvY2VkdXJlSW5wdXRPclRocm93KG9wdHMpO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gb3B0cy5yb3V0ZXIuX2RlZi5fY29uZmlnLnRyYW5zZm9ybWVyO1xuICAgIGlmICghb3B0cy5pc0JhdGNoQ2FsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgMDogZGVzZXJpYWxpemVJbnB1dFZhbHVlKHJhd0lucHV0LCB0cmFuc2Zvcm1lcilcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqLyBpZiAocmF3SW5wdXQgPT0gbnVsbCB8fCB0eXBlb2YgcmF3SW5wdXQgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkocmF3SW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogJ0JBRF9SRVFVRVNUJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdcImlucHV0XCIgbmVlZHMgdG8gYmUgYW4gb2JqZWN0IHdoZW4gZG9pbmcgYSBiYXRjaCBjYWxsJ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXQgPSB7fTtcbiAgICBmb3IoY29uc3Qga2V5IGluIHJhd0lucHV0KXtcbiAgICAgICAgY29uc3QgayA9IGtleTtcbiAgICAgICAgY29uc3QgcmF3VmFsdWUgPSByYXdJbnB1dFtrXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBkZXNlcmlhbGl6ZUlucHV0VmFsdWUocmF3VmFsdWUsIHRyYW5zZm9ybWVyKTtcbiAgICAgICAgaW5wdXRba10gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufTtcblxuZXhwb3J0IHsgZ2V0SnNvbkNvbnRlbnRUeXBlSW5wdXRzIGFzIGcgfTtcbiJdLCJuYW1lcyI6WyJUIiwiVFJQQ0Vycm9yIiwiZ2V0UmF3UHJvY2VkdXJlSW5wdXRPclRocm93Iiwib3B0cyIsInJlcSIsIm1ldGhvZCIsInF1ZXJ5IiwiaGFzIiwidW5kZWZpbmVkIiwicmF3IiwiZ2V0IiwiSlNPTiIsInBhcnNlIiwicHJlcHJvY2Vzc2VkQm9keSIsImJvZHkiLCJsZW5ndGgiLCJjYXVzZSIsImNvZGUiLCJkZXNlcmlhbGl6ZUlucHV0VmFsdWUiLCJyYXdWYWx1ZSIsInRyYW5zZm9ybWVyIiwiaW5wdXQiLCJkZXNlcmlhbGl6ZSIsImdldEpzb25Db250ZW50VHlwZUlucHV0cyIsInJhd0lucHV0Iiwicm91dGVyIiwiX2RlZiIsIl9jb25maWciLCJpc0JhdGNoQ2FsbCIsIkFycmF5IiwiaXNBcnJheSIsIm1lc3NhZ2UiLCJrZXkiLCJrIiwidmFsdWUiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/contentType-93515a46.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/index-f91d720c.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   a: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   b: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   c: () => (/* binding */ createFlatProxy),\n/* harmony export */   g: () => (/* binding */ getHTTPStatusCodeFromError)\n/* harmony export */ });\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\nconst TRPC_ERROR_CODES_BY_NUMBER = (0,_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === \"number\") {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === \"apply\";\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== \"string\" || name === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2luZGV4LWY5MWQ3MjBjLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUY7QUFFakYsTUFBTUksNkJBQTZCSCxzREFBTUEsQ0FBQ0Usa0RBQXVCQTtBQUNqRSxNQUFNRSx3QkFBd0I7SUFDMUJDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxzQkFBc0I7SUFDdEJDLFNBQVM7SUFDVEMsVUFBVTtJQUNWQyxxQkFBcUI7SUFDckJDLG1CQUFtQjtJQUNuQkMsdUJBQXVCO0lBQ3ZCQyxtQkFBbUI7SUFDbkJDLHVCQUF1QjtJQUN2QkMsdUJBQXVCO0lBQ3ZCQyxpQkFBaUI7QUFDckI7QUFDQSxTQUFTQyxxQkFBcUJDLElBQUk7SUFDOUIsT0FBT2pCLHFCQUFxQixDQUFDaUIsS0FBSyxJQUFJO0FBQzFDO0FBQ0EsU0FBU0Msa0JBQWtCQyxJQUFJO0lBQzNCLE1BQU1DLE1BQU1DLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUUEsT0FBTztRQUNyQ0E7S0FDSDtJQUNELE1BQU1JLGVBQWUsSUFBSUMsSUFBSUosSUFBSUssR0FBRyxDQUFDLENBQUNDO1FBQ2xDLElBQUksV0FBV0EsS0FBSztZQUNoQixNQUFNQyxPQUFPRCxJQUFJRSxLQUFLLENBQUNELElBQUk7WUFDM0IsSUFBSSxPQUFPQSxLQUFLRSxVQUFVLEtBQUssVUFBVTtnQkFDckMsT0FBT0YsS0FBS0UsVUFBVTtZQUMxQjtZQUNBLE1BQU1aLE9BQU9sQiwwQkFBMEIsQ0FBQzJCLElBQUlFLEtBQUssQ0FBQ1gsSUFBSSxDQUFDO1lBQ3ZELE9BQU9ELHFCQUFxQkM7UUFDaEM7UUFDQSxPQUFPO0lBQ1g7SUFDQSxJQUFJTSxhQUFhTyxJQUFJLEtBQUssR0FBRztRQUN6QixPQUFPO0lBQ1g7SUFDQSxNQUFNRCxhQUFhTixhQUFhUSxNQUFNLEdBQUdDLElBQUksR0FBR0MsS0FBSztJQUNyRCxPQUFPSjtBQUNYO0FBQ0EsU0FBU0ssMkJBQTJCTixLQUFLO0lBQ3JDLE9BQU9aLHFCQUFxQlksTUFBTVgsSUFBSTtBQUMxQztBQUVBLE1BQU1rQixPQUFPO0FBQ2IsT0FBTztBQUNQO0FBQ0EsU0FBU0MsaUJBQWlCQyxRQUFRLEVBQUVDLElBQUk7SUFDcEMsTUFBTUMsUUFBUSxJQUFJQyxNQUFNTCxNQUFNO1FBQzFCTSxLQUFLQyxJQUFJLEVBQUVDLEdBQUc7WUFDVixJQUFJLE9BQU9BLFFBQVEsWUFBWUEsUUFBUSxRQUFRO2dCQUMzQyx3REFBd0Q7Z0JBQ3hELHdEQUF3RDtnQkFDeEQsT0FBT0M7WUFDWDtZQUNBLE9BQU9SLGlCQUFpQkMsVUFBVTttQkFDM0JDO2dCQUNISzthQUNIO1FBQ0w7UUFDQUUsT0FBT0MsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLElBQUk7WUFDZixNQUFNQyxVQUFVWCxJQUFJLENBQUNBLEtBQUtZLE1BQU0sR0FBRyxFQUFFLEtBQUs7WUFDMUMsT0FBT2IsU0FBUztnQkFDWlcsTUFBTUMsVUFBVUQsS0FBS0UsTUFBTSxJQUFJLElBQUlGLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHQTtnQkFDbERWLE1BQU1XLFVBQVVYLEtBQUthLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBS2I7WUFDeEM7UUFDSjtJQUNKO0lBQ0EsT0FBT0M7QUFDWDtBQUNBOzs7O0NBSUMsR0FBRyxNQUFNYSx1QkFBdUIsQ0FBQ2YsV0FBV0QsaUJBQWlCQyxVQUFVLEVBQUU7QUFDMUU7Ozs7Q0FJQyxHQUFHLE1BQU1nQixrQkFBa0IsQ0FBQ2hCO0lBQ3pCLE9BQU8sSUFBSUcsTUFBTUwsTUFBTTtRQUNuQk0sS0FBS0MsSUFBSSxFQUFFWSxJQUFJO1lBQ1gsSUFBSSxPQUFPQSxTQUFTLFlBQVlBLFNBQVMsUUFBUTtnQkFDN0Msd0RBQXdEO2dCQUN4RCx3REFBd0Q7Z0JBQ3hELE9BQU9WO1lBQ1g7WUFDQSxPQUFPUCxTQUFTaUI7UUFDcEI7SUFDSjtBQUNKO0FBRXFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9pbmRleC1mOTFkNzIwYy5tanM/YTQ5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpIGFzIGludmVydCwgVCBhcyBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSB9IGZyb20gJy4vY29kZXMtYzkyNGMzZGIubWpzJztcblxuY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgPSBpbnZlcnQoVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkpO1xuY29uc3QgSlNPTlJQQzJfVE9fSFRUUF9DT0RFID0ge1xuICAgIFBBUlNFX0VSUk9SOiA0MDAsXG4gICAgQkFEX1JFUVVFU1Q6IDQwMCxcbiAgICBVTkFVVEhPUklaRUQ6IDQwMSxcbiAgICBOT1RfRk9VTkQ6IDQwNCxcbiAgICBGT1JCSURERU46IDQwMyxcbiAgICBNRVRIT0RfTk9UX1NVUFBPUlRFRDogNDA1LFxuICAgIFRJTUVPVVQ6IDQwOCxcbiAgICBDT05GTElDVDogNDA5LFxuICAgIFBSRUNPTkRJVElPTl9GQUlMRUQ6IDQxMixcbiAgICBQQVlMT0FEX1RPT19MQVJHRTogNDEzLFxuICAgIFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogNDIyLFxuICAgIFRPT19NQU5ZX1JFUVVFU1RTOiA0MjksXG4gICAgQ0xJRU5UX0NMT1NFRF9SRVFVRVNUOiA0OTksXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAsXG4gICAgTk9UX0lNUExFTUVOVEVEOiA1MDFcbn07XG5mdW5jdGlvbiBnZXRTdGF0dXNDb2RlRnJvbUtleShjb2RlKSB7XG4gICAgcmV0dXJuIEpTT05SUEMyX1RPX0hUVFBfQ09ERVtjb2RlXSA/PyA1MDA7XG59XG5mdW5jdGlvbiBnZXRIVFRQU3RhdHVzQ29kZShqc29uKSB7XG4gICAgY29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShqc29uKSA/IGpzb24gOiBbXG4gICAgICAgIGpzb25cbiAgICBdO1xuICAgIGNvbnN0IGh0dHBTdGF0dXNlcyA9IG5ldyBTZXQoYXJyLm1hcCgocmVzKT0+e1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXMuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5odHRwU3RhdHVzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmh0dHBTdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVJbcmVzLmVycm9yLmNvZGVdO1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAyMDA7XG4gICAgfSkpO1xuICAgIGlmIChodHRwU3RhdHVzZXMuc2l6ZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gMjA3O1xuICAgIH1cbiAgICBjb25zdCBodHRwU3RhdHVzID0gaHR0cFN0YXR1c2VzLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICByZXR1cm4gaHR0cFN0YXR1cztcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGVycm9yLmNvZGUpO1xufVxuXG5jb25zdCBub29wID0gKCk9Pntcbi8vIG5vb3Bcbn07XG5mdW5jdGlvbiBjcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBwYXRoKSB7XG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkobm9vcCwge1xuICAgICAgICBnZXQgKF9vYmosIGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8IGtleSA9PT0gJ3RoZW4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBpZiB0aGUgcHJveHkgaXMgYWNjaWRlbnRhbGx5IHRyZWF0ZWRcbiAgICAgICAgICAgICAgICAvLyBsaWtlIGEgUHJvbWlzZUxpa2UgKGxpa2UgaW4gYFByb21pc2UucmVzb2x2ZShwcm94eSlgKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJQcm94eShjYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIC4uLnBhdGgsXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHkgKF8xLCBfMiwgYXJncykge1xuICAgICAgICAgICAgY29uc3QgaXNBcHBseSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXSA9PT0gJ2FwcGx5JztcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgYXJnczogaXNBcHBseSA/IGFyZ3MubGVuZ3RoID49IDIgPyBhcmdzWzFdIDogW10gOiBhcmdzLFxuICAgICAgICAgICAgICAgIHBhdGg6IGlzQXBwbHkgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcHJveHkgdGhhdCBjYWxscyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcGF0aCBhbmQgYXJndW1lbnRzXG4gKlxuICogQGludGVybmFsXG4gKi8gY29uc3QgY3JlYXRlUmVjdXJzaXZlUHJveHkgPSAoY2FsbGJhY2spPT5jcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBbXSk7XG4vKipcbiAqIFVzZWQgaW4gcGxhY2Ugb2YgYG5ldyBQcm94eWAgd2hlcmUgZWFjaCBoYW5kbGVyIHdpbGwgbWFwIDEgbGV2ZWwgZGVlcCB0byBhbm90aGVyIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGNvbnN0IGNyZWF0ZUZsYXRQcm94eSA9IChjYWxsYmFjayk9PntcbiAgICByZXR1cm4gbmV3IFByb3h5KG5vb3AsIHtcbiAgICAgICAgZ2V0IChfb2JqLCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUgPT09ICd0aGVuJykge1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgaWYgdGhlIHByb3h5IGlzIGFjY2lkZW50YWxseSB0cmVhdGVkXG4gICAgICAgICAgICAgICAgLy8gbGlrZSBhIFByb21pc2VMaWtlIChsaWtlIGluIGBQcm9taXNlLnJlc29sdmUocHJveHkpYClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiBhcyBULCBjcmVhdGVSZWN1cnNpdmVQcm94eSBhcyBhLCBnZXRIVFRQU3RhdHVzQ29kZSBhcyBiLCBjcmVhdGVGbGF0UHJveHkgYXMgYywgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImkiLCJpbnZlcnQiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiIsIkpTT05SUEMyX1RPX0hUVFBfQ09ERSIsIlBBUlNFX0VSUk9SIiwiQkFEX1JFUVVFU1QiLCJVTkFVVEhPUklaRUQiLCJOT1RfRk9VTkQiLCJGT1JCSURERU4iLCJNRVRIT0RfTk9UX1NVUFBPUlRFRCIsIlRJTUVPVVQiLCJDT05GTElDVCIsIlBSRUNPTkRJVElPTl9GQUlMRUQiLCJQQVlMT0FEX1RPT19MQVJHRSIsIlVOUFJPQ0VTU0FCTEVfQ09OVEVOVCIsIlRPT19NQU5ZX1JFUVVFU1RTIiwiQ0xJRU5UX0NMT1NFRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiZ2V0U3RhdHVzQ29kZUZyb21LZXkiLCJjb2RlIiwiZ2V0SFRUUFN0YXR1c0NvZGUiLCJqc29uIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiaHR0cFN0YXR1c2VzIiwiU2V0IiwibWFwIiwicmVzIiwiZGF0YSIsImVycm9yIiwiaHR0cFN0YXR1cyIsInNpemUiLCJ2YWx1ZXMiLCJuZXh0IiwidmFsdWUiLCJnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciIsIm5vb3AiLCJjcmVhdGVJbm5lclByb3h5IiwiY2FsbGJhY2siLCJwYXRoIiwicHJveHkiLCJQcm94eSIsImdldCIsIl9vYmoiLCJrZXkiLCJ1bmRlZmluZWQiLCJhcHBseSIsIl8xIiwiXzIiLCJhcmdzIiwiaXNBcHBseSIsImxlbmd0aCIsInNsaWNlIiwiY3JlYXRlUmVjdXJzaXZlUHJveHkiLCJjcmVhdGVGbGF0UHJveHkiLCJuYW1lIiwiYSIsImIiLCJjIiwiZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/index.mjs":
/*!******************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCError: () => (/* reexport safe */ _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.T),\n/* harmony export */   callProcedure: () => (/* reexport safe */ _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   createInputMiddleware: () => (/* reexport safe */ _unstableInternalsExport_10cc2bae_mjs__WEBPACK_IMPORTED_MODULE_2__.b),\n/* harmony export */   createOutputMiddleware: () => (/* reexport safe */ _unstableInternalsExport_10cc2bae_mjs__WEBPACK_IMPORTED_MODULE_2__.d),\n/* harmony export */   defaultTransformer: () => (/* reexport safe */ _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   experimental_standaloneMiddleware: () => (/* reexport safe */ _unstableInternalsExport_10cc2bae_mjs__WEBPACK_IMPORTED_MODULE_2__.e),\n/* harmony export */   getDataTransformer: () => (/* reexport safe */ _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   getTRPCErrorFromUnknown: () => (/* reexport safe */ _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   initTRPC: () => (/* binding */ initTRPC),\n/* harmony export */   procedureTypes: () => (/* binding */ procedureTypes),\n/* harmony export */   unstableExternalsExport: () => (/* reexport safe */ _unstableInternalsExport_10cc2bae_mjs__WEBPACK_IMPORTED_MODULE_2__.u)\n/* harmony export */ });\n/* harmony import */ var _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./router-5274e533.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/router-5274e533.mjs\");\n/* harmony import */ var _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCError-816ff32e.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-816ff32e.mjs\");\n/* harmony import */ var _unstableInternalsExport_10cc2bae_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unstableInternalsExport-10cc2bae.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/unstableInternalsExport-10cc2bae.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _config_ab4c1c6b_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config-ab4c1c6b.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/config-ab4c1c6b.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n\n\n\n\n\n/**\n * TODO: This can be improved:\n * - We should be able to chain `.meta()`/`.context()` only once\n * - Simplify typings\n * - Doesn't need to be a class but it doesn't really hurt either\n */ class TRPCBuilder {\n    context() {\n        return new TRPCBuilder();\n    }\n    meta() {\n        return new TRPCBuilder();\n    }\n    create(options) {\n        return createTRPCInner()(options);\n    }\n}\n/**\n * Initialize tRPC - done exactly once per backend\n */ const initTRPC = new TRPCBuilder();\nfunction createTRPCInner() {\n    return function initTRPCInner(runtime) {\n        const errorFormatter = runtime?.errorFormatter ?? _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.d;\n        const transformer = (0,_router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(runtime?.transformer ?? _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.a);\n        const config = {\n            transformer,\n            isDev: runtime?.isDev ?? globalThis.process?.env?.NODE_ENV !== \"production\",\n            allowOutsideOfServer: runtime?.allowOutsideOfServer ?? false,\n            errorFormatter,\n            isServer: runtime?.isServer ?? _config_ab4c1c6b_mjs__WEBPACK_IMPORTED_MODULE_4__.i,\n            /**\n       * @internal\n       */ $types: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_3__.c)((key)=>{\n                throw new Error(`Tried to access \"$types.${key}\" which is not available at runtime`);\n            })\n        };\n        {\n            // Server check\n            const isServer = runtime?.isServer ?? _config_ab4c1c6b_mjs__WEBPACK_IMPORTED_MODULE_4__.i;\n            if (!isServer && runtime?.allowOutsideOfServer !== true) {\n                throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);\n            }\n        }\n        return {\n            /**\n       * These are just types, they can't be used\n       * @internal\n       */ _config: config,\n            /**\n       * Builder object for creating procedures\n       */ procedure: (0,_unstableInternalsExport_10cc2bae_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n                meta: runtime?.defaultMeta\n            }),\n            /**\n       * Create reusable middlewares\n       */ middleware: (0,_unstableInternalsExport_10cc2bae_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(),\n            /**\n       * Create a router\n       */ router: (0,_router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(config),\n            /**\n       * Merge Routers\n       */ mergeRouters: _unstableInternalsExport_10cc2bae_mjs__WEBPACK_IMPORTED_MODULE_2__.m\n        };\n    };\n}\nconst procedureTypes = [\n    \"query\",\n    \"mutation\",\n    \"subscription\"\n];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwSTtBQUM3QjtBQUNyQjtBQUNxQztBQUMwRDtBQUMzSDtBQUNDO0FBQy9CO0FBRTlCOzs7OztDQUtDLEdBQUcsTUFBTTBCO0lBQ05DLFVBQVU7UUFDTixPQUFPLElBQUlEO0lBQ2Y7SUFDQUUsT0FBTztRQUNILE9BQU8sSUFBSUY7SUFDZjtJQUNBRyxPQUFPQyxPQUFPLEVBQUU7UUFDWixPQUFPQyxrQkFBa0JEO0lBQzdCO0FBQ0o7QUFDQTs7Q0FFQyxHQUFHLE1BQU1FLFdBQVcsSUFBSU47QUFDekIsU0FBU0s7SUFDTCxPQUFPLFNBQVNFLGNBQWNDLE9BQU87UUFDakMsTUFBTUMsaUJBQWlCRCxTQUFTQyxrQkFBa0JsQyxtREFBZ0JBO1FBQ2xFLE1BQU1tQyxjQUFjakMsdURBQWtCQSxDQUFDK0IsU0FBU0UsZUFBZS9CLG1EQUFrQkE7UUFDakYsTUFBTWdDLFNBQVM7WUFDWEQ7WUFDQUUsT0FBT0osU0FBU0ksU0FBU0MsV0FBV0MsT0FBTyxFQUFFQyxLQUFLQyxhQUFhO1lBQy9EQyxzQkFBc0JULFNBQVNTLHdCQUF3QjtZQUN2RFI7WUFDQVMsVUFBVVYsU0FBU1UsWUFBWW5CLG1EQUFlQTtZQUM5Qzs7T0FFTCxHQUFHb0IsUUFBUXRCLHNEQUFlQSxDQUFDLENBQUN1QjtnQkFDbkIsTUFBTSxJQUFJQyxNQUFNLENBQUMsd0JBQXdCLEVBQUVELElBQUksbUNBQW1DLENBQUM7WUFDdkY7UUFDSjtRQUNBO1lBQ0ksZUFBZTtZQUNmLE1BQU1GLFdBQVdWLFNBQVNVLFlBQVluQixtREFBZUE7WUFDckQsSUFBSSxDQUFDbUIsWUFBWVYsU0FBU1MseUJBQXlCLE1BQU07Z0JBQ3JELE1BQU0sSUFBSUksTUFBTSxDQUFDLGdHQUFnRyxDQUFDO1lBQ3RIO1FBQ0o7UUFDQSxPQUFPO1lBQ0g7OztPQUdMLEdBQUdDLFNBQVNYO1lBQ1A7O09BRUwsR0FBR1ksV0FBV3BDLHdFQUFhQSxDQUFDO2dCQUNuQmUsTUFBTU0sU0FBU2dCO1lBQ25CO1lBQ0E7O09BRUwsR0FBR0MsWUFBWXJDLHdFQUF1QkE7WUFDakM7O09BRUwsR0FBR3NDLFFBQVE3Qyx1REFBbUJBLENBQUM4QjtZQUMxQjs7T0FFTCxHQUFHckIsWUFBWUEsc0VBQUFBO1FBQ2Q7SUFDSjtBQUNKO0FBRUEsTUFBTXFDLGlCQUFpQjtJQUNuQjtJQUNBO0lBQ0E7Q0FDSDtBQUVtQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvaW5kZXgubWpzPzg4Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZCBhcyBkZWZhdWx0Rm9ybWF0dGVyLCBnIGFzIGdldERhdGFUcmFuc2Zvcm1lciwgYSBhcyBkZWZhdWx0VHJhbnNmb3JtZXIsIGMgYXMgY3JlYXRlUm91dGVyRmFjdG9yeSB9IGZyb20gJy4vcm91dGVyLTUyNzRlNTMzLm1qcyc7XG5leHBvcnQgeyBiIGFzIGNhbGxQcm9jZWR1cmUsIGEgYXMgZGVmYXVsdFRyYW5zZm9ybWVyLCBnIGFzIGdldERhdGFUcmFuc2Zvcm1lciB9IGZyb20gJy4vcm91dGVyLTUyNzRlNTMzLm1qcyc7XG5leHBvcnQgeyBUIGFzIFRSUENFcnJvciwgZyBhcyBnZXRUUlBDRXJyb3JGcm9tVW5rbm93biB9IGZyb20gJy4vVFJQQ0Vycm9yLTgxNmZmMzJlLm1qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUJ1aWxkZXIsIGEgYXMgY3JlYXRlTWlkZGxld2FyZUZhY3RvcnksIG0gYXMgbWVyZ2VSb3V0ZXJzIH0gZnJvbSAnLi91bnN0YWJsZUludGVybmFsc0V4cG9ydC0xMGNjMmJhZS5tanMnO1xuZXhwb3J0IHsgYiBhcyBjcmVhdGVJbnB1dE1pZGRsZXdhcmUsIGQgYXMgY3JlYXRlT3V0cHV0TWlkZGxld2FyZSwgZSBhcyBleHBlcmltZW50YWxfc3RhbmRhbG9uZU1pZGRsZXdhcmUsIHUgYXMgdW5zdGFibGVFeHRlcm5hbHNFeHBvcnQgfSBmcm9tICcuL3Vuc3RhYmxlSW50ZXJuYWxzRXhwb3J0LTEwY2MyYmFlLm1qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUZsYXRQcm94eSB9IGZyb20gJy4vaW5kZXgtZjkxZDcyMGMubWpzJztcbmltcG9ydCB7IGkgYXMgaXNTZXJ2ZXJEZWZhdWx0IH0gZnJvbSAnLi9jb25maWctYWI0YzFjNmIubWpzJztcbmltcG9ydCAnLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuXG4vKipcbiAqIFRPRE86IFRoaXMgY2FuIGJlIGltcHJvdmVkOlxuICogLSBXZSBzaG91bGQgYmUgYWJsZSB0byBjaGFpbiBgLm1ldGEoKWAvYC5jb250ZXh0KClgIG9ubHkgb25jZVxuICogLSBTaW1wbGlmeSB0eXBpbmdzXG4gKiAtIERvZXNuJ3QgbmVlZCB0byBiZSBhIGNsYXNzIGJ1dCBpdCBkb2Vzbid0IHJlYWxseSBodXJ0IGVpdGhlclxuICovIGNsYXNzIFRSUENCdWlsZGVyIHtcbiAgICBjb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFRSUENCdWlsZGVyKCk7XG4gICAgfVxuICAgIG1ldGEoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVFJQQ0J1aWxkZXIoKTtcbiAgICB9XG4gICAgY3JlYXRlKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRSUENJbm5lcigpKG9wdGlvbnMpO1xuICAgIH1cbn1cbi8qKlxuICogSW5pdGlhbGl6ZSB0UlBDIC0gZG9uZSBleGFjdGx5IG9uY2UgcGVyIGJhY2tlbmRcbiAqLyBjb25zdCBpbml0VFJQQyA9IG5ldyBUUlBDQnVpbGRlcigpO1xuZnVuY3Rpb24gY3JlYXRlVFJQQ0lubmVyKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpbml0VFJQQ0lubmVyKHJ1bnRpbWUpIHtcbiAgICAgICAgY29uc3QgZXJyb3JGb3JtYXR0ZXIgPSBydW50aW1lPy5lcnJvckZvcm1hdHRlciA/PyBkZWZhdWx0Rm9ybWF0dGVyO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGdldERhdGFUcmFuc2Zvcm1lcihydW50aW1lPy50cmFuc2Zvcm1lciA/PyBkZWZhdWx0VHJhbnNmb3JtZXIpO1xuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1lcixcbiAgICAgICAgICAgIGlzRGV2OiBydW50aW1lPy5pc0RldiA/PyBnbG9iYWxUaGlzLnByb2Nlc3M/LmVudj8uTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgICAgIGFsbG93T3V0c2lkZU9mU2VydmVyOiBydW50aW1lPy5hbGxvd091dHNpZGVPZlNlcnZlciA/PyBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yRm9ybWF0dGVyLFxuICAgICAgICAgICAgaXNTZXJ2ZXI6IHJ1bnRpbWU/LmlzU2VydmVyID8/IGlzU2VydmVyRGVmYXVsdCxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICogQGludGVybmFsXG4gICAgICAgKi8gJHR5cGVzOiBjcmVhdGVGbGF0UHJveHkoKGtleSk9PntcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyaWVkIHRvIGFjY2VzcyBcIiR0eXBlcy4ke2tleX1cIiB3aGljaCBpcyBub3QgYXZhaWxhYmxlIGF0IHJ1bnRpbWVgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFNlcnZlciBjaGVja1xuICAgICAgICAgICAgY29uc3QgaXNTZXJ2ZXIgPSBydW50aW1lPy5pc1NlcnZlciA/PyBpc1NlcnZlckRlZmF1bHQ7XG4gICAgICAgICAgICBpZiAoIWlzU2VydmVyICYmIHJ1bnRpbWU/LmFsbG93T3V0c2lkZU9mU2VydmVyICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UncmUgdHJ5aW5nIHRvIHVzZSBAdHJwYy9zZXJ2ZXIgaW4gYSBub24tc2VydmVyIGVudmlyb25tZW50LiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQgYnkgZGVmYXVsdC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgKiBUaGVzZSBhcmUganVzdCB0eXBlcywgdGhleSBjYW4ndCBiZSB1c2VkXG4gICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAqLyBfY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgICAvKipcbiAgICAgICAqIEJ1aWxkZXIgb2JqZWN0IGZvciBjcmVhdGluZyBwcm9jZWR1cmVzXG4gICAgICAgKi8gcHJvY2VkdXJlOiBjcmVhdGVCdWlsZGVyKHtcbiAgICAgICAgICAgICAgICBtZXRhOiBydW50aW1lPy5kZWZhdWx0TWV0YVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvKipcbiAgICAgICAqIENyZWF0ZSByZXVzYWJsZSBtaWRkbGV3YXJlc1xuICAgICAgICovIG1pZGRsZXdhcmU6IGNyZWF0ZU1pZGRsZXdhcmVGYWN0b3J5KCksXG4gICAgICAgICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIHJvdXRlclxuICAgICAgICovIHJvdXRlcjogY3JlYXRlUm91dGVyRmFjdG9yeShjb25maWcpLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgKiBNZXJnZSBSb3V0ZXJzXG4gICAgICAgKi8gbWVyZ2VSb3V0ZXJzXG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuY29uc3QgcHJvY2VkdXJlVHlwZXMgPSBbXG4gICAgJ3F1ZXJ5JyxcbiAgICAnbXV0YXRpb24nLFxuICAgICdzdWJzY3JpcHRpb24nXG5dO1xuXG5leHBvcnQgeyBpbml0VFJQQywgcHJvY2VkdXJlVHlwZXMgfTtcbiJdLCJuYW1lcyI6WyJkIiwiZGVmYXVsdEZvcm1hdHRlciIsImciLCJnZXREYXRhVHJhbnNmb3JtZXIiLCJhIiwiZGVmYXVsdFRyYW5zZm9ybWVyIiwiYyIsImNyZWF0ZVJvdXRlckZhY3RvcnkiLCJiIiwiY2FsbFByb2NlZHVyZSIsIlQiLCJUUlBDRXJyb3IiLCJnZXRUUlBDRXJyb3JGcm9tVW5rbm93biIsImNyZWF0ZUJ1aWxkZXIiLCJjcmVhdGVNaWRkbGV3YXJlRmFjdG9yeSIsIm0iLCJtZXJnZVJvdXRlcnMiLCJjcmVhdGVJbnB1dE1pZGRsZXdhcmUiLCJjcmVhdGVPdXRwdXRNaWRkbGV3YXJlIiwiZSIsImV4cGVyaW1lbnRhbF9zdGFuZGFsb25lTWlkZGxld2FyZSIsInUiLCJ1bnN0YWJsZUV4dGVybmFsc0V4cG9ydCIsImNyZWF0ZUZsYXRQcm94eSIsImkiLCJpc1NlcnZlckRlZmF1bHQiLCJUUlBDQnVpbGRlciIsImNvbnRleHQiLCJtZXRhIiwiY3JlYXRlIiwib3B0aW9ucyIsImNyZWF0ZVRSUENJbm5lciIsImluaXRUUlBDIiwiaW5pdFRSUENJbm5lciIsInJ1bnRpbWUiLCJlcnJvckZvcm1hdHRlciIsInRyYW5zZm9ybWVyIiwiY29uZmlnIiwiaXNEZXYiLCJnbG9iYWxUaGlzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiYWxsb3dPdXRzaWRlT2ZTZXJ2ZXIiLCJpc1NlcnZlciIsIiR0eXBlcyIsImtleSIsIkVycm9yIiwiX2NvbmZpZyIsInByb2NlZHVyZSIsImRlZmF1bHRNZXRhIiwibWlkZGxld2FyZSIsInJvdXRlciIsInByb2NlZHVyZVR5cGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/resolveHTTPResponse-55c648bd.mjs":
/*!*****************************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/resolveHTTPResponse-55c648bd.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   r: () => (/* binding */ resolveHTTPResponse)\n/* harmony export */ });\n/* harmony import */ var _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./router-5274e533.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/router-5274e533.mjs\");\n/* harmony import */ var _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCError-816ff32e.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-816ff32e.mjs\");\n/* harmony import */ var _config_ab4c1c6b_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-ab4c1c6b.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/config-ab4c1c6b.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transformTRPCResponse-1153b421.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _contentType_93515a46_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./contentType-93515a46.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/contentType-93515a46.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n\n\n\n\n\n\nconst HTTP_METHOD_PROCEDURE_TYPE_MAP = {\n    GET: \"query\",\n    POST: \"mutation\"\n};\nconst fallbackContentTypeHandler = {\n    getInputs: _contentType_93515a46_mjs__WEBPACK_IMPORTED_MODULE_4__.g\n};\nfunction initResponse(initOpts) {\n    const { ctx, paths, type, responseMeta, untransformedJSON, errors = [] } = initOpts;\n    let status = untransformedJSON ? (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_5__.b)(untransformedJSON) : 200;\n    const headers = {\n        \"Content-Type\": \"application/json\"\n    };\n    const eagerGeneration = !untransformedJSON;\n    const data = eagerGeneration ? [] : Array.isArray(untransformedJSON) ? untransformedJSON : [\n        untransformedJSON\n    ];\n    const meta = responseMeta?.({\n        ctx,\n        paths,\n        type,\n        data,\n        errors,\n        eagerGeneration\n    }) ?? {};\n    for (const [key, value] of Object.entries(meta.headers ?? {})){\n        headers[key] = value;\n    }\n    if (meta.status) {\n        status = meta.status;\n    }\n    return {\n        status,\n        headers\n    };\n}\nasync function inputToProcedureCall(procedureOpts) {\n    const { opts, ctx, type, input, path } = procedureOpts;\n    try {\n        const data = await (0,_router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({\n            procedures: opts.router._def.procedures,\n            path,\n            getRawInput: async ()=>input,\n            ctx,\n            type\n        });\n        return {\n            result: {\n                data\n            }\n        };\n    } catch (cause) {\n        const error = (0,_TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause);\n        opts.onError?.({\n            error,\n            path,\n            input,\n            ctx,\n            type: type,\n            req: opts.req\n        });\n        return {\n            error: (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_3__.g)({\n                config: opts.router._def._config,\n                error,\n                type,\n                path,\n                input,\n                ctx\n            })\n        };\n    }\n}\nfunction caughtErrorToData(cause, errorOpts) {\n    const { router, req, onError } = errorOpts.opts;\n    const error = (0,_TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause);\n    onError?.({\n        error,\n        path: errorOpts.path,\n        input: errorOpts.input,\n        ctx: errorOpts.ctx,\n        type: errorOpts.type,\n        req\n    });\n    const untransformedJSON = {\n        error: (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_3__.g)({\n            config: router._def._config,\n            error,\n            type: errorOpts.type,\n            path: errorOpts.path,\n            input: errorOpts.input,\n            ctx: errorOpts.ctx\n        })\n    };\n    const transformedJSON = (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_3__.t)(router._def._config, untransformedJSON);\n    const body = JSON.stringify(transformedJSON);\n    return {\n        error,\n        untransformedJSON,\n        body\n    };\n}\n// implementation\nasync function resolveHTTPResponse(opts) {\n    const { router, req, unstable_onHead, unstable_onChunk } = opts;\n    if (req.method === \"HEAD\") {\n        // can be used for lambda warmup\n        const headResponse = {\n            status: 204\n        };\n        unstable_onHead?.(headResponse, false);\n        unstable_onChunk?.([\n            -1,\n            \"\"\n        ]);\n        return headResponse;\n    }\n    const contentTypeHandler = opts.contentTypeHandler ?? fallbackContentTypeHandler;\n    const batchingEnabled = opts.batching?.enabled ?? true;\n    const type = HTTP_METHOD_PROCEDURE_TYPE_MAP[req.method] ?? \"unknown\";\n    let ctx = undefined;\n    let paths;\n    const isBatchCall = !!req.query.get(\"batch\");\n    const isStreamCall = isBatchCall && unstable_onHead && unstable_onChunk && req.headers[\"trpc-batch-mode\"] === \"stream\";\n    try {\n        if (opts.error) {\n            throw opts.error;\n        }\n        if (isBatchCall && !batchingEnabled) {\n            throw new Error(`Batching is not enabled on the server`);\n        }\n        /* istanbul ignore if -- @preserve */ if (type === \"subscription\") {\n            throw new _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: \"Subscriptions should use wsLink\",\n                code: \"METHOD_NOT_SUPPORTED\"\n            });\n        }\n        if (type === \"unknown\") {\n            throw new _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: `Unexpected request method ${req.method}`,\n                code: \"METHOD_NOT_SUPPORTED\"\n            });\n        }\n        const inputs = await contentTypeHandler.getInputs({\n            isBatchCall,\n            req,\n            router,\n            preprocessedBody: opts.preprocessedBody ?? false\n        });\n        paths = isBatchCall ? decodeURIComponent(opts.path).split(\",\") : [\n            opts.path\n        ];\n        const info = {\n            isBatchCall,\n            calls: paths.map((path, idx)=>({\n                    path,\n                    type,\n                    input: inputs[idx] ?? undefined\n                }))\n        };\n        ctx = await opts.createContext({\n            info\n        });\n        const promises = paths.map((path, index)=>inputToProcedureCall({\n                opts,\n                ctx,\n                type,\n                input: inputs[index],\n                path\n            }));\n        if (!isStreamCall) {\n            /**\n       * Non-streaming response:\n       * - await all responses in parallel, blocking on the slowest one\n       * - create headers with known response body\n       * - return a complete HTTPResponse\n       */ const untransformedJSON = await Promise.all(promises);\n            const errors = untransformedJSON.flatMap((response)=>\"error\" in response ? [\n                    response.error\n                ] : []);\n            const headResponse1 = initResponse({\n                ctx,\n                paths,\n                type,\n                responseMeta: opts.responseMeta,\n                untransformedJSON,\n                errors\n            });\n            unstable_onHead?.(headResponse1, false);\n            // return body stuff\n            const result = isBatchCall ? untransformedJSON : untransformedJSON[0]; // eslint-disable-line @typescript-eslint/no-non-null-assertion -- `untransformedJSON` should be the length of `paths` which should be at least 1 otherwise there wouldn't be a request at all\n            const transformedJSON = (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_3__.t)(router._def._config, result);\n            const body = JSON.stringify(transformedJSON);\n            unstable_onChunk?.([\n                -1,\n                body\n            ]);\n            return {\n                status: headResponse1.status,\n                headers: headResponse1.headers,\n                body\n            };\n        }\n        /**\n     * Streaming response:\n     * - block on none, call `onChunk` as soon as each response is ready\n     * - create headers with minimal data (cannot know the response body in advance)\n     * - return void\n     */ const headResponse2 = initResponse({\n            ctx,\n            paths,\n            type,\n            responseMeta: opts.responseMeta\n        });\n        unstable_onHead(headResponse2, true);\n        const indexedPromises = new Map(promises.map((promise, index)=>[\n                index,\n                promise.then((r)=>[\n                        index,\n                        r\n                    ])\n            ]));\n        for (const _ of paths){\n            const [index, untransformedJSON1] = await Promise.race(indexedPromises.values());\n            indexedPromises.delete(index);\n            try {\n                const transformedJSON1 = (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_3__.t)(router._def._config, untransformedJSON1);\n                const body1 = JSON.stringify(transformedJSON1);\n                unstable_onChunk([\n                    index,\n                    body1\n                ]);\n            } catch (cause) {\n                const path = paths[index];\n                const input = inputs[index];\n                const { body: body2 } = caughtErrorToData(cause, {\n                    opts,\n                    ctx,\n                    type,\n                    path,\n                    input\n                });\n                unstable_onChunk([\n                    index,\n                    body2\n                ]);\n            }\n        }\n        return;\n    } catch (cause1) {\n        // we get here if\n        // - batching is called when it's not enabled\n        // - `createContext()` throws\n        // - `router._def._config.transformer.output.serialize()` throws\n        // - post body is too large\n        // - input deserialization fails\n        // - `errorFormatter` return value is malformed\n        const { error, untransformedJSON: untransformedJSON2, body: body3 } = caughtErrorToData(cause1, {\n            opts,\n            ctx,\n            type\n        });\n        const headResponse3 = initResponse({\n            ctx,\n            paths,\n            type,\n            responseMeta: opts.responseMeta,\n            untransformedJSON: untransformedJSON2,\n            errors: [\n                error\n            ]\n        });\n        unstable_onHead?.(headResponse3, false);\n        unstable_onChunk?.([\n            -1,\n            body3\n        ]);\n        return {\n            status: headResponse3.status,\n            headers: headResponse3.headers,\n            body: body3\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/resolveHTTPResponse-55c648bd.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/router-5274e533.mjs":
/*!****************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/router-5274e533.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ defaultTransformer),\n/* harmony export */   b: () => (/* binding */ callProcedure),\n/* harmony export */   c: () => (/* binding */ createRouterFactory),\n/* harmony export */   d: () => (/* binding */ defaultFormatter),\n/* harmony export */   g: () => (/* binding */ getDataTransformer)\n/* harmony export */ });\n/* harmony import */ var _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCError-816ff32e.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-816ff32e.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n/**\n * @public\n */ /**\n * @internal\n */ function getDataTransformer(transformer) {\n    if (\"input\" in transformer) {\n        return transformer;\n    }\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\n/**\n * @internal\n */ const defaultTransformer = {\n    _default: true,\n    input: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    },\n    output: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    }\n};\nconst defaultFormatter = ({ shape })=>{\n    return shape;\n};\n/**\n * Create an object without inheriting anything from `Object.prototype`\n * @internal\n */ function omitPrototype(obj) {\n    return Object.assign(Object.create(null), obj);\n}\nfunction isRouter(procedureOrRouter) {\n    return \"router\" in procedureOrRouter._def;\n}\nconst emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: defaultFormatter,\n    transformer: defaultTransformer\n};\n/**\n * Reserved words that can't be used as router or procedure names\n */ const reservedWords = [\n    /**\n   * Then is a reserved word because otherwise we can't return a promise that returns a Proxy\n   * since JS will think that `.then` is something that exists\n   */ \"then\"\n];\n/**\n * @internal\n */ function createRouterFactory(config) {\n    return function createRouterInner(procedures) {\n        const reservedWordsUsed = new Set(Object.keys(procedures).filter((v)=>reservedWords.includes(v)));\n        if (reservedWordsUsed.size > 0) {\n            throw new Error(\"Reserved words used in `router({})` call: \" + Array.from(reservedWordsUsed).join(\", \"));\n        }\n        const routerProcedures = omitPrototype({});\n        function recursiveGetPaths(procedures, path = \"\") {\n            for (const [key, procedureOrRouter] of Object.entries(procedures ?? {})){\n                const newPath = `${path}${key}`;\n                if (isRouter(procedureOrRouter)) {\n                    recursiveGetPaths(procedureOrRouter._def.procedures, `${newPath}.`);\n                    continue;\n                }\n                if (routerProcedures[newPath]) {\n                    throw new Error(`Duplicate key: ${newPath}`);\n                }\n                routerProcedures[newPath] = procedureOrRouter;\n            }\n        }\n        recursiveGetPaths(procedures);\n        const _def = {\n            _config: config,\n            router: true,\n            procedures: routerProcedures,\n            ...emptyRouter,\n            record: procedures\n        };\n        const router = {\n            ...procedures,\n            _def,\n            createCaller (ctx) {\n                const proxy = (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(({ path, args })=>{\n                    const fullPath = path.join(\".\");\n                    const procedure = _def.procedures[fullPath];\n                    return procedure({\n                        path: fullPath,\n                        getRawInput: async ()=>args[0],\n                        ctx,\n                        type: procedure._def.type\n                    });\n                });\n                return proxy;\n            },\n            getErrorShape (opts) {\n                const { path, error } = opts;\n                const { code } = opts.error;\n                const shape = {\n                    message: error.message,\n                    code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__.T[code],\n                    data: {\n                        code,\n                        httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(error)\n                    }\n                };\n                if (config.isDev && typeof opts.error.stack === \"string\") {\n                    shape.data.stack = opts.error.stack;\n                }\n                if (typeof path === \"string\") {\n                    shape.data.path = path;\n                }\n                return this._def._config.errorFormatter({\n                    ...opts,\n                    shape\n                });\n            }\n        };\n        return router;\n    };\n}\nfunction isProcedure(procedureOrRouter) {\n    return !!procedureOrRouter._def.procedure;\n}\n/**\n * @internal\n */ function callProcedure(opts) {\n    const { type, path } = opts;\n    const proc = opts.procedures[path];\n    if (!proc || !isProcedure(proc) || proc._def.type !== type) {\n        throw new _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"NOT_FOUND\",\n            message: `No \"${type}\"-procedure on path \"${path}\"`\n        });\n    }\n    return proc(opts);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/router-5274e533.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs":
/*!*******************************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getErrorShape),\n/* harmony export */   t: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n/**\n * @internal\n */ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__.T[code],\n        data: {\n            code,\n            httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") {\n        shape.data.stack = opts.error.stack;\n    }\n    if (typeof path === \"string\") {\n        shape.data.path = path;\n    }\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) {\n        return {\n            ...item,\n            error: config.transformer.output.serialize(item.error)\n        };\n    }\n    if (\"data\" in item.result) {\n        return {\n            ...item,\n            result: {\n                ...item.result,\n                data: config.transformer.output.serialize(item.result.data)\n            }\n        };\n    }\n    return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3RyYW5zZm9ybVRSUENSZXNwb25zZS0xMTUzYjQyMS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RTtBQUNIO0FBRXBFOztDQUVDLEdBQUcsU0FBU0ksY0FBY0MsSUFBSTtJQUMzQixNQUFNLEVBQUVDLElBQUksRUFBR0MsS0FBSyxFQUFHQyxNQUFNLEVBQUcsR0FBR0g7SUFDbkMsTUFBTSxFQUFFSSxJQUFJLEVBQUcsR0FBR0osS0FBS0UsS0FBSztJQUM1QixNQUFNRyxRQUFRO1FBQ1ZDLFNBQVNKLE1BQU1JLE9BQU87UUFDdEJGLE1BQU1OLGtEQUF1QixDQUFDTSxLQUFLO1FBQ25DRyxNQUFNO1lBQ0ZIO1lBQ0FJLFlBQVlaLHNEQUEwQkEsQ0FBQ007UUFDM0M7SUFDSjtJQUNBLElBQUlDLE9BQU9NLEtBQUssSUFBSSxPQUFPVCxLQUFLRSxLQUFLLENBQUNRLEtBQUssS0FBSyxVQUFVO1FBQ3RETCxNQUFNRSxJQUFJLENBQUNHLEtBQUssR0FBR1YsS0FBS0UsS0FBSyxDQUFDUSxLQUFLO0lBQ3ZDO0lBQ0EsSUFBSSxPQUFPVCxTQUFTLFVBQVU7UUFDMUJJLE1BQU1FLElBQUksQ0FBQ04sSUFBSSxHQUFHQTtJQUN0QjtJQUNBLE9BQU9FLE9BQU9RLGNBQWMsQ0FBQztRQUN6QixHQUFHWCxJQUFJO1FBQ1BLO0lBQ0o7QUFDSjtBQUVBLFNBQVNPLDBCQUEwQlQsTUFBTSxFQUFFVSxJQUFJO0lBQzNDLElBQUksV0FBV0EsTUFBTTtRQUNqQixPQUFPO1lBQ0gsR0FBR0EsSUFBSTtZQUNQWCxPQUFPQyxPQUFPVyxXQUFXLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDSCxLQUFLWCxLQUFLO1FBQ3pEO0lBQ0o7SUFDQSxJQUFJLFVBQVVXLEtBQUtJLE1BQU0sRUFBRTtRQUN2QixPQUFPO1lBQ0gsR0FBR0osSUFBSTtZQUNQSSxRQUFRO2dCQUNKLEdBQUdKLEtBQUtJLE1BQU07Z0JBQ2RWLE1BQU1KLE9BQU9XLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNILEtBQUtJLE1BQU0sQ0FBQ1YsSUFBSTtZQUM5RDtRQUNKO0lBQ0o7SUFDQSxPQUFPTTtBQUNYO0FBQ0E7O0VBRUUsR0FBRyxTQUFTSyxzQkFBc0JmLE1BQU0sRUFBRWdCLFdBQVc7SUFDbkQsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixlQUFlQSxZQUFZRyxHQUFHLENBQUMsQ0FBQ1QsT0FBT0QsMEJBQTBCVCxRQUFRVSxTQUFTRCwwQkFBMEJULFFBQVFnQjtBQUM3STtBQUUwRCIsInNvdXJjZXMiOlsid2VicGFjazovL0BhY21lL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcz82YjlhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgfSBmcm9tICcuL2luZGV4LWY5MWQ3MjBjLm1qcyc7XG5pbXBvcnQgeyBUIGFzIFRSUENfRVJST1JfQ09ERVNfQllfS0VZIH0gZnJvbSAnLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGdldEVycm9yU2hhcGUob3B0cykge1xuICAgIGNvbnN0IHsgcGF0aCAsIGVycm9yICwgY29uZmlnICB9ID0gb3B0cztcbiAgICBjb25zdCB7IGNvZGUgIH0gPSBvcHRzLmVycm9yO1xuICAgIGNvbnN0IHNoYXBlID0ge1xuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBjb2RlOiBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWVtjb2RlXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIGh0dHBTdGF0dXM6IGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoY29uZmlnLmlzRGV2ICYmIHR5cGVvZiBvcHRzLmVycm9yLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnN0YWNrID0gb3B0cy5lcnJvci5zdGFjaztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmVycm9yRm9ybWF0dGVyKHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgc2hhcGVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiBpdGVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgZXJyb3I6IGNvbmZpZy50cmFuc2Zvcm1lci5vdXRwdXQuc2VyaWFsaXplKGl0ZW0uZXJyb3IpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgnZGF0YScgaW4gaXRlbS5yZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBkYXRhOiBjb25maWcudHJhbnNmb3JtZXIub3V0cHV0LnNlcmlhbGl6ZShpdGVtLnJlc3VsdC5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbi8qKlxuICogVGFrZXMgYSB1bnNlcmlhbGl6ZWQgYFRSUENSZXNwb25zZWAgYW5kIHNlcmlhbGl6ZXMgaXQgd2l0aCB0aGUgcm91dGVyJ3MgdHJhbnNmb3JtZXJzXG4gKiovIGZ1bmN0aW9uIHRyYW5zZm9ybVRSUENSZXNwb25zZShjb25maWcsIGl0ZW1Pckl0ZW1zKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbU9ySXRlbXMpID8gaXRlbU9ySXRlbXMubWFwKChpdGVtKT0+dHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pKSA6IHRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0oY29uZmlnLCBpdGVtT3JJdGVtcyk7XG59XG5cbmV4cG9ydCB7IGdldEVycm9yU2hhcGUgYXMgZywgdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlIGFzIHQgfTtcbiJdLCJuYW1lcyI6WyJnIiwiZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJnZXRFcnJvclNoYXBlIiwib3B0cyIsInBhdGgiLCJlcnJvciIsImNvbmZpZyIsImNvZGUiLCJzaGFwZSIsIm1lc3NhZ2UiLCJkYXRhIiwiaHR0cFN0YXR1cyIsImlzRGV2Iiwic3RhY2siLCJlcnJvckZvcm1hdHRlciIsInRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0iLCJpdGVtIiwidHJhbnNmb3JtZXIiLCJvdXRwdXQiLCJzZXJpYWxpemUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm1UUlBDUmVzcG9uc2UiLCJpdGVtT3JJdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@trpc/server/dist/unstableInternalsExport-10cc2bae.mjs":
/*!*********************************************************************************!*\
  !*** ../../node_modules/@trpc/server/dist/unstableInternalsExport-10cc2bae.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ createMiddlewareFactory),\n/* harmony export */   b: () => (/* binding */ createInputMiddleware),\n/* harmony export */   c: () => (/* binding */ createBuilder),\n/* harmony export */   d: () => (/* binding */ createOutputMiddleware),\n/* harmony export */   e: () => (/* binding */ experimental_standaloneMiddleware),\n/* harmony export */   f: () => (/* binding */ middlewareMarker),\n/* harmony export */   g: () => (/* binding */ unsetMarker),\n/* harmony export */   m: () => (/* binding */ mergeRouters),\n/* harmony export */   u: () => (/* binding */ unstableInternalsExport)\n/* harmony export */ });\n/* harmony import */ var _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./router-5274e533.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/router-5274e533.mjs\");\n/* harmony import */ var _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCError-816ff32e.mjs */ \"(rsc)/../../node_modules/@trpc/server/dist/TRPCError-816ff32e.mjs\");\n\n\n/**\n * @internal\n */ function createMiddlewareFactory() {\n    function createMiddlewareInner(middlewares) {\n        return {\n            _middlewares: middlewares,\n            unstable_pipe (middlewareBuilderOrFn) {\n                const pipedMiddleware = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                    middlewareBuilderOrFn\n                ];\n                return createMiddlewareInner([\n                    ...middlewares,\n                    ...pipedMiddleware\n                ]);\n            }\n        };\n    }\n    function createMiddleware(fn) {\n        return createMiddlewareInner([\n            fn\n        ]);\n    }\n    return createMiddleware;\n}\nconst experimental_standaloneMiddleware = ()=>({\n        create: createMiddlewareFactory()\n    });\nfunction isPlainObject(obj) {\n    return obj && typeof obj === \"object\" && !Array.isArray(obj);\n}\n/**\n * @internal\n * Please note, `trpc-openapi` uses this function.\n */ function createInputMiddleware(parse) {\n    const inputMiddleware = async (opts)=>{\n        let parsedInput;\n        const rawInput = await opts.getRawInput();\n        try {\n            parsedInput = await parse(rawInput);\n        } catch (cause) {\n            throw new _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                cause\n            });\n        }\n        // Multiple input parsers\n        const combinedInput = isPlainObject(opts.input) && isPlainObject(parsedInput) ? {\n            ...opts.input,\n            ...parsedInput\n        } : parsedInput;\n        return opts.next({\n            input: combinedInput\n        });\n    };\n    inputMiddleware._type = \"input\";\n    return inputMiddleware;\n}\n/**\n * @internal\n */ function createOutputMiddleware(parse) {\n    const outputMiddleware = async ({ next })=>{\n        const result = await next();\n        if (!result.ok) {\n            // pass through failures without validating\n            return result;\n        }\n        try {\n            const data = await parse(result.data);\n            return {\n                ...result,\n                data\n            };\n        } catch (cause) {\n            throw new _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: \"Output validation failed\",\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause\n            });\n        }\n    };\n    outputMiddleware._type = \"output\";\n    return outputMiddleware;\n}\n/**\n * Ensures there are no duplicate keys when building a procedure.\n */ function mergeWithoutOverrides(obj1, ...objs) {\n    const newObj = Object.assign(Object.create(null), obj1);\n    for (const overrides of objs){\n        for(const key in overrides){\n            if (key in newObj && newObj[key] !== overrides[key]) {\n                throw new Error(`Duplicate key ${key}`);\n            }\n            newObj[key] = overrides[key];\n        }\n    }\n    return newObj;\n}\nfunction mergeRouters(...routerList) {\n    const record = mergeWithoutOverrides({}, ...routerList.map((r)=>r._def.record));\n    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{\n        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.d) {\n            if (currentErrorFormatter !== _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.d && currentErrorFormatter !== nextRouter._def._config.errorFormatter) {\n                throw new Error(\"You seem to have several error formatters\");\n            }\n            return nextRouter._def._config.errorFormatter;\n        }\n        return currentErrorFormatter;\n    }, _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.d);\n    const transformer = routerList.reduce((prev, current)=>{\n        if (current._def._config.transformer && current._def._config.transformer !== _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.a) {\n            if (prev !== _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.a && prev !== current._def._config.transformer) {\n                throw new Error(\"You seem to have several transformers\");\n            }\n            return current._def._config.transformer;\n        }\n        return prev;\n    }, _router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.a);\n    const router = (0,_router_5274e533_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n        errorFormatter,\n        transformer,\n        isDev: routerList.some((r)=>r._def._config.isDev),\n        allowOutsideOfServer: routerList.some((r)=>r._def._config.allowOutsideOfServer),\n        isServer: routerList.some((r)=>r._def._config.isServer),\n        $types: routerList[0]?._def._config.$types\n    })(record);\n    return router;\n}\nfunction getParseFn(procedureParser) {\n    const parser = procedureParser;\n    if (typeof parser === \"function\") {\n        // ParserCustomValidatorEsque\n        return parser;\n    }\n    if (typeof parser.parseAsync === \"function\") {\n        // ParserZodEsque\n        return parser.parseAsync.bind(parser);\n    }\n    if (typeof parser.parse === \"function\") {\n        // ParserZodEsque\n        // ParserValibotEsque (<= v0.12.X)\n        return parser.parse.bind(parser);\n    }\n    if (typeof parser.validateSync === \"function\") {\n        // ParserYupEsque\n        return parser.validateSync.bind(parser);\n    }\n    if (typeof parser.create === \"function\") {\n        // ParserSuperstructEsque\n        return parser.create.bind(parser);\n    }\n    if (typeof parser.assert === \"function\") {\n        // ParserScaleEsque\n        return (value)=>{\n            parser.assert(value);\n            return value;\n        };\n    }\n    throw new Error(\"Could not find a validator fn\");\n}\n/**\n * @internal\n */ const middlewareMarker = \"middlewareMarker\";\n/**\n * @internal\n */ const unsetMarker = Symbol(\"unsetMarker\");\nfunction createNewBuilder(def1, def2) {\n    const { middlewares = [], inputs, meta, ...rest } = def2;\n    // TODO: maybe have a fn here to warn about calls\n    return createBuilder({\n        ...mergeWithoutOverrides(def1, rest),\n        inputs: [\n            ...def1.inputs,\n            ...inputs ?? []\n        ],\n        middlewares: [\n            ...def1.middlewares,\n            ...middlewares\n        ],\n        meta: def1.meta && meta ? {\n            ...def1.meta,\n            ...meta\n        } : meta ?? def1.meta\n    });\n}\nfunction createBuilder(initDef = {}) {\n    const _def = {\n        procedure: true,\n        inputs: [],\n        middlewares: [],\n        ...initDef\n    };\n    return {\n        _def,\n        input (input) {\n            const parser = getParseFn(input);\n            return createNewBuilder(_def, {\n                inputs: [\n                    input\n                ],\n                middlewares: [\n                    createInputMiddleware(parser)\n                ]\n            });\n        },\n        output (output) {\n            const parseOutput = getParseFn(output);\n            return createNewBuilder(_def, {\n                output,\n                middlewares: [\n                    createOutputMiddleware(parseOutput)\n                ]\n            });\n        },\n        meta (meta) {\n            return createNewBuilder(_def, {\n                meta: meta\n            });\n        },\n        use (middlewareBuilderOrFn) {\n            // Distinguish between a middleware builder and a middleware function\n            const middlewares = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                middlewareBuilderOrFn\n            ];\n            return createNewBuilder(_def, {\n                middlewares: middlewares\n            });\n        },\n        query (resolver) {\n            return createResolver({\n                ..._def,\n                type: \"query\"\n            }, resolver);\n        },\n        mutation (resolver) {\n            return createResolver({\n                ..._def,\n                type: \"mutation\"\n            }, resolver);\n        },\n        subscription (resolver) {\n            return createResolver({\n                ..._def,\n                type: \"subscription\"\n            }, resolver);\n        }\n    };\n}\nfunction createResolver(_def, resolver) {\n    const finalBuilder = createNewBuilder(_def, {\n        resolver,\n        middlewares: [\n            async function resolveMiddleware(opts) {\n                const data = await resolver(opts);\n                return {\n                    marker: middlewareMarker,\n                    ok: true,\n                    data,\n                    ctx: opts.ctx\n                };\n            }\n        ]\n    });\n    return createProcedureCaller(finalBuilder._def);\n}\nconst codeblock = `\nIf you want to call this function on the server, you do the following:\nThis is a client-only function.\n\nconst caller = appRouter.createCaller({\n  /* ... your context */\n});\n\nconst result = await caller.call('myProcedure', input);\n`.trim();\nfunction createProcedureCaller(_def) {\n    async function procedure(opts) {\n        // is direct server-side call\n        if (!opts || !(\"getRawInput\" in opts)) {\n            throw new Error(codeblock);\n        }\n        // run the middlewares recursively with the resolver as the last one\n        const callRecursive = async (callOpts = {\n            index: 0,\n            ctx: opts.ctx\n        })=>{\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const middleware = _def.middlewares[callOpts.index];\n                const result = await middleware({\n                    ctx: callOpts.ctx,\n                    type: opts.type,\n                    path: opts.path,\n                    getRawInput: callOpts.getRawInput ?? opts.getRawInput,\n                    meta: _def.meta,\n                    input: callOpts.input,\n                    next (_nextOpts) {\n                        const nextOpts = _nextOpts;\n                        return callRecursive({\n                            index: callOpts.index + 1,\n                            ctx: nextOpts && \"ctx\" in nextOpts ? {\n                                ...callOpts.ctx,\n                                ...nextOpts.ctx\n                            } : callOpts.ctx,\n                            input: nextOpts && \"input\" in nextOpts ? nextOpts.input : callOpts.input,\n                            getRawInput: nextOpts && \"getRawInput\" in nextOpts ? nextOpts.getRawInput : callOpts.getRawInput\n                        });\n                    }\n                });\n                return result;\n            } catch (cause) {\n                return {\n                    ok: false,\n                    error: (0,_TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause),\n                    marker: middlewareMarker\n                };\n            }\n        };\n        // there's always at least one \"next\" since we wrap this.resolver in a middleware\n        const result = await callRecursive();\n        if (!result) {\n            throw new _TRPCError_816ff32e_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"No result from middlewares - did you forget to `return next()`?\"\n            });\n        }\n        if (!result.ok) {\n            // re-throw original error\n            throw result.error;\n        }\n        return result.data;\n    }\n    procedure._def = _def;\n    // FIXME typecast shouldn't be needed - fixittt\n    return procedure;\n}\nvar unstableInternalsExport = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    mergeRouters: mergeRouters,\n    createBuilder: createBuilder,\n    middlewareMarker: middlewareMarker,\n    unsetMarker: unsetMarker\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3Vuc3RhYmxlSW50ZXJuYWxzRXhwb3J0LTEwY2MyYmFlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFpSDtBQUN6QjtBQUV4Rjs7Q0FFQyxHQUFHLFNBQVNVO0lBQ1QsU0FBU0Msc0JBQXNCQyxXQUFXO1FBQ3RDLE9BQU87WUFDSEMsY0FBY0Q7WUFDZEUsZUFBZUMscUJBQXFCO2dCQUNoQyxNQUFNQyxrQkFBa0Isa0JBQWtCRCx3QkFBd0JBLHNCQUFzQkYsWUFBWSxHQUFHO29CQUNuR0U7aUJBQ0g7Z0JBQ0QsT0FBT0osc0JBQXNCO3VCQUN0QkM7dUJBQ0FJO2lCQUNOO1lBQ0w7UUFDSjtJQUNKO0lBQ0EsU0FBU0MsaUJBQWlCQyxFQUFFO1FBQ3hCLE9BQU9QLHNCQUFzQjtZQUN6Qk87U0FDSDtJQUNMO0lBQ0EsT0FBT0Q7QUFDWDtBQUNBLE1BQU1FLG9DQUFvQyxJQUFLO1FBQ3ZDQyxRQUFRVjtJQUNaO0FBQ0osU0FBU1csY0FBY0MsR0FBRztJQUN0QixPQUFPQSxPQUFPLE9BQU9BLFFBQVEsWUFBWSxDQUFDQyxNQUFNQyxPQUFPLENBQUNGO0FBQzVEO0FBQ0E7OztDQUdDLEdBQUcsU0FBU0csc0JBQXNCQyxLQUFLO0lBQ3BDLE1BQU1DLGtCQUFrQixPQUFPQztRQUMzQixJQUFJQztRQUNKLE1BQU1DLFdBQVcsTUFBTUYsS0FBS0csV0FBVztRQUN2QyxJQUFJO1lBQ0FGLGNBQWMsTUFBTUgsTUFBTUk7UUFDOUIsRUFBRSxPQUFPRSxPQUFPO1lBQ1osTUFBTSxJQUFJekIsc0RBQVNBLENBQUM7Z0JBQ2hCMEIsTUFBTTtnQkFDTkQ7WUFDSjtRQUNKO1FBQ0EseUJBQXlCO1FBQ3pCLE1BQU1FLGdCQUFnQmIsY0FBY08sS0FBS08sS0FBSyxLQUFLZCxjQUFjUSxlQUFlO1lBQzVFLEdBQUdELEtBQUtPLEtBQUs7WUFDYixHQUFHTixXQUFXO1FBQ2xCLElBQUlBO1FBQ0osT0FB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QUEwQjtZQUMxQixNQUFNRCxPQUFPNEUsS0FBSztRQUN0QjtRQUNBLE9BQU81RSxPQUFPRSxJQUFJO0lBQ3RCO0lBQ0FrRCxVQUFVbEMsSUFBSSxHQUFHQTtJQUNqQiwrQ0FBK0M7SUFDL0MsT0FBT2tDO0FBQ1g7QUFFQSxJQUFJeUIsMEJBQTBCLFdBQVcsR0FBRXJFLE9BQU9zRSxNQUFNLENBQUM7SUFDdkRDLFdBQVc7SUFDWGxFLGNBQWNBO0lBQ2RxQyxlQUFlQTtJQUNmVCxrQkFBa0JBO0lBQ2xCQyxhQUFhQTtBQUNmO0FBRXVQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC91bnN0YWJsZUludGVybmFsc0V4cG9ydC0xMGNjMmJhZS5tanM/Mjk3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkIGFzIGRlZmF1bHRGb3JtYXR0ZXIsIGEgYXMgZGVmYXVsdFRyYW5zZm9ybWVyLCBjIGFzIGNyZWF0ZVJvdXRlckZhY3RvcnkgfSBmcm9tICcuL3JvdXRlci01Mjc0ZTUzMy5tanMnO1xuaW1wb3J0IHsgVCBhcyBUUlBDRXJyb3IsIGcgYXMgZ2V0VFJQQ0Vycm9yRnJvbVVua25vd24gfSBmcm9tICcuL1RSUENFcnJvci04MTZmZjMyZS5tanMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGNyZWF0ZU1pZGRsZXdhcmVGYWN0b3J5KCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1pZGRsZXdhcmVJbm5lcihtaWRkbGV3YXJlcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX21pZGRsZXdhcmVzOiBtaWRkbGV3YXJlcyxcbiAgICAgICAgICAgIHVuc3RhYmxlX3BpcGUgKG1pZGRsZXdhcmVCdWlsZGVyT3JGbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpcGVkTWlkZGxld2FyZSA9ICdfbWlkZGxld2FyZXMnIGluIG1pZGRsZXdhcmVCdWlsZGVyT3JGbiA/IG1pZGRsZXdhcmVCdWlsZGVyT3JGbi5fbWlkZGxld2FyZXMgOiBbXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVCdWlsZGVyT3JGblxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU1pZGRsZXdhcmVJbm5lcihbXG4gICAgICAgICAgICAgICAgICAgIC4uLm1pZGRsZXdhcmVzLFxuICAgICAgICAgICAgICAgICAgICAuLi5waXBlZE1pZGRsZXdhcmVcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlTWlkZGxld2FyZShmbikge1xuICAgICAgICByZXR1cm4gY3JlYXRlTWlkZGxld2FyZUlubmVyKFtcbiAgICAgICAgICAgIGZuXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlTWlkZGxld2FyZTtcbn1cbmNvbnN0IGV4cGVyaW1lbnRhbF9zdGFuZGFsb25lTWlkZGxld2FyZSA9ICgpPT4oe1xuICAgICAgICBjcmVhdGU6IGNyZWF0ZU1pZGRsZXdhcmVGYWN0b3J5KClcbiAgICB9KTtcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShvYmopO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIFBsZWFzZSBub3RlLCBgdHJwYy1vcGVuYXBpYCB1c2VzIHRoaXMgZnVuY3Rpb24uXG4gKi8gZnVuY3Rpb24gY3JlYXRlSW5wdXRNaWRkbGV3YXJlKHBhcnNlKSB7XG4gICAgY29uc3QgaW5wdXRNaWRkbGV3YXJlID0gYXN5bmMgKG9wdHMpPT57XG4gICAgICAgIGxldCBwYXJzZWRJbnB1dDtcbiAgICAgICAgY29uc3QgcmF3SW5wdXQgPSBhd2FpdCBvcHRzLmdldFJhd0lucHV0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IGF3YWl0IHBhcnNlKHJhd0lucHV0KTtcbiAgICAgICAgfSBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgICAgICAgIGNvZGU6ICdCQURfUkVRVUVTVCcsXG4gICAgICAgICAgICAgICAgY2F1c2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIE11bHRpcGxlIGlucHV0IHBhcnNlcnNcbiAgICAgICAgY29uc3QgY29tYmluZWRJbnB1dCA9IGlzUGxhaW5PYmplY3Qob3B0cy5pbnB1dCkgJiYgaXNQbGFpbk9iamVjdChwYXJzZWRJbnB1dCkgPyB7XG4gICAgICAgICAgICAuLi5vcHRzLmlucHV0LFxuICAgICAgICAgICAgLi4ucGFyc2VkSW5wdXRcbiAgICAgICAgfSA6IHBhcnNlZElucHV0O1xuICAgICAgICByZXR1cm4gb3B0cy5uZXh0KHtcbiAgICAgICAgICAgIGlucHV0OiBjb21iaW5lZElucHV0XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgaW5wdXRNaWRkbGV3YXJlLl90eXBlID0gJ2lucHV0JztcbiAgICByZXR1cm4gaW5wdXRNaWRkbGV3YXJlO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBjcmVhdGVPdXRwdXRNaWRkbGV3YXJlKHBhcnNlKSB7XG4gICAgY29uc3Qgb3V0cHV0TWlkZGxld2FyZSA9IGFzeW5jICh7IG5leHQgIH0pPT57XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5leHQoKTtcbiAgICAgICAgaWYgKCFyZXN1bHQub2spIHtcbiAgICAgICAgICAgIC8vIHBhc3MgdGhyb3VnaCBmYWlsdXJlcyB3aXRob3V0IHZhbGlkYXRpbmdcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChjYXVzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ091dHB1dCB2YWxpZGF0aW9uIGZhaWxlZCcsXG4gICAgICAgICAgICAgICAgY29kZTogJ0lOVEVSTkFMX1NFUlZFUl9FUlJPUicsXG4gICAgICAgICAgICAgICAgY2F1c2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBvdXRwdXRNaWRkbGV3YXJlLl90eXBlID0gJ291dHB1dCc7XG4gICAgcmV0dXJuIG91dHB1dE1pZGRsZXdhcmU7XG59XG5cbi8qKlxuICogRW5zdXJlcyB0aGVyZSBhcmUgbm8gZHVwbGljYXRlIGtleXMgd2hlbiBidWlsZGluZyBhIHByb2NlZHVyZS5cbiAqLyBmdW5jdGlvbiBtZXJnZVdpdGhvdXRPdmVycmlkZXMob2JqMSwgLi4ub2Jqcykge1xuICAgIGNvbnN0IG5ld09iaiA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgb2JqMSk7XG4gICAgZm9yIChjb25zdCBvdmVycmlkZXMgb2Ygb2Jqcyl7XG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gb3ZlcnJpZGVzKXtcbiAgICAgICAgICAgIGlmIChrZXkgaW4gbmV3T2JqICYmIG5ld09ialtrZXldICE9PSBvdmVycmlkZXNba2V5XSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIGtleSAke2tleX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld09ialtrZXldID0gb3ZlcnJpZGVzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld09iajtcbn1cblxuZnVuY3Rpb24gbWVyZ2VSb3V0ZXJzKC4uLnJvdXRlckxpc3QpIHtcbiAgICBjb25zdCByZWNvcmQgPSBtZXJnZVdpdGhvdXRPdmVycmlkZXMoe30sIC4uLnJvdXRlckxpc3QubWFwKChyKT0+ci5fZGVmLnJlY29yZCkpO1xuICAgIGNvbnN0IGVycm9yRm9ybWF0dGVyID0gcm91dGVyTGlzdC5yZWR1Y2UoKGN1cnJlbnRFcnJvckZvcm1hdHRlciwgbmV4dFJvdXRlcik9PntcbiAgICAgICAgaWYgKG5leHRSb3V0ZXIuX2RlZi5fY29uZmlnLmVycm9yRm9ybWF0dGVyICYmIG5leHRSb3V0ZXIuX2RlZi5fY29uZmlnLmVycm9yRm9ybWF0dGVyICE9PSBkZWZhdWx0Rm9ybWF0dGVyKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEVycm9yRm9ybWF0dGVyICE9PSBkZWZhdWx0Rm9ybWF0dGVyICYmIGN1cnJlbnRFcnJvckZvcm1hdHRlciAhPT0gbmV4dFJvdXRlci5fZGVmLl9jb25maWcuZXJyb3JGb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBzZWVtIHRvIGhhdmUgc2V2ZXJhbCBlcnJvciBmb3JtYXR0ZXJzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dFJvdXRlci5fZGVmLl9jb25maWcuZXJyb3JGb3JtYXR0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRFcnJvckZvcm1hdHRlcjtcbiAgICB9LCBkZWZhdWx0Rm9ybWF0dGVyKTtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IHJvdXRlckxpc3QucmVkdWNlKChwcmV2LCBjdXJyZW50KT0+e1xuICAgICAgICBpZiAoY3VycmVudC5fZGVmLl9jb25maWcudHJhbnNmb3JtZXIgJiYgY3VycmVudC5fZGVmLl9jb25maWcudHJhbnNmb3JtZXIgIT09IGRlZmF1bHRUcmFuc2Zvcm1lcikge1xuICAgICAgICAgICAgaWYgKHByZXYgIT09IGRlZmF1bHRUcmFuc2Zvcm1lciAmJiBwcmV2ICE9PSBjdXJyZW50Ll9kZWYuX2NvbmZpZy50cmFuc2Zvcm1lcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IHNlZW0gdG8gaGF2ZSBzZXZlcmFsIHRyYW5zZm9ybWVycycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQuX2RlZi5fY29uZmlnLnRyYW5zZm9ybWVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmV2O1xuICAgIH0sIGRlZmF1bHRUcmFuc2Zvcm1lcik7XG4gICAgY29uc3Qgcm91dGVyID0gY3JlYXRlUm91dGVyRmFjdG9yeSh7XG4gICAgICAgIGVycm9yRm9ybWF0dGVyLFxuICAgICAgICB0cmFuc2Zvcm1lcixcbiAgICAgICAgaXNEZXY6IHJvdXRlckxpc3Quc29tZSgocik9PnIuX2RlZi5fY29uZmlnLmlzRGV2KSxcbiAgICAgICAgYWxsb3dPdXRzaWRlT2ZTZXJ2ZXI6IHJvdXRlckxpc3Quc29tZSgocik9PnIuX2RlZi5fY29uZmlnLmFsbG93T3V0c2lkZU9mU2VydmVyKSxcbiAgICAgICAgaXNTZXJ2ZXI6IHJvdXRlckxpc3Quc29tZSgocik9PnIuX2RlZi5fY29uZmlnLmlzU2VydmVyKSxcbiAgICAgICAgJHR5cGVzOiByb3V0ZXJMaXN0WzBdPy5fZGVmLl9jb25maWcuJHR5cGVzXG4gICAgfSkocmVjb3JkKTtcbiAgICByZXR1cm4gcm91dGVyO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJzZUZuKHByb2NlZHVyZVBhcnNlcikge1xuICAgIGNvbnN0IHBhcnNlciA9IHByb2NlZHVyZVBhcnNlcjtcbiAgICBpZiAodHlwZW9mIHBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBQYXJzZXJDdXN0b21WYWxpZGF0b3JFc3F1ZVxuICAgICAgICByZXR1cm4gcGFyc2VyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcnNlci5wYXJzZUFzeW5jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFBhcnNlclpvZEVzcXVlXG4gICAgICAgIHJldHVybiBwYXJzZXIucGFyc2VBc3luYy5iaW5kKHBhcnNlcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFyc2VyLnBhcnNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFBhcnNlclpvZEVzcXVlXG4gICAgICAgIC8vIFBhcnNlclZhbGlib3RFc3F1ZSAoPD0gdjAuMTIuWClcbiAgICAgICAgcmV0dXJuIHBhcnNlci5wYXJzZS5iaW5kKHBhcnNlcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFyc2VyLnZhbGlkYXRlU3luYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBQYXJzZXJZdXBFc3F1ZVxuICAgICAgICByZXR1cm4gcGFyc2VyLnZhbGlkYXRlU3luYy5iaW5kKHBhcnNlcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFyc2VyLmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBQYXJzZXJTdXBlcnN0cnVjdEVzcXVlXG4gICAgICAgIHJldHVybiBwYXJzZXIuY3JlYXRlLmJpbmQocGFyc2VyKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJzZXIuYXNzZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFBhcnNlclNjYWxlRXNxdWVcbiAgICAgICAgcmV0dXJuICh2YWx1ZSk9PntcbiAgICAgICAgICAgIHBhcnNlci5hc3NlcnQodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGEgdmFsaWRhdG9yIGZuJyk7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi8gY29uc3QgbWlkZGxld2FyZU1hcmtlciA9ICdtaWRkbGV3YXJlTWFya2VyJztcbi8qKlxuICogQGludGVybmFsXG4gKi8gY29uc3QgdW5zZXRNYXJrZXIgPSBTeW1ib2woJ3Vuc2V0TWFya2VyJyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld0J1aWxkZXIoZGVmMSwgZGVmMikge1xuICAgIGNvbnN0IHsgbWlkZGxld2FyZXMgPVtdICwgaW5wdXRzICwgbWV0YSAsIC4uLnJlc3QgfSA9IGRlZjI7XG4gICAgLy8gVE9ETzogbWF5YmUgaGF2ZSBhIGZuIGhlcmUgdG8gd2FybiBhYm91dCBjYWxsc1xuICAgIHJldHVybiBjcmVhdGVCdWlsZGVyKHtcbiAgICAgICAgLi4ubWVyZ2VXaXRob3V0T3ZlcnJpZGVzKGRlZjEsIHJlc3QpLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIC4uLmRlZjEuaW5wdXRzLFxuICAgICAgICAgICAgLi4uaW5wdXRzID8/IFtdXG4gICAgICAgIF0sXG4gICAgICAgIG1pZGRsZXdhcmVzOiBbXG4gICAgICAgICAgICAuLi5kZWYxLm1pZGRsZXdhcmVzLFxuICAgICAgICAgICAgLi4ubWlkZGxld2FyZXNcbiAgICAgICAgXSxcbiAgICAgICAgbWV0YTogZGVmMS5tZXRhICYmIG1ldGEgPyB7XG4gICAgICAgICAgICAuLi5kZWYxLm1ldGEsXG4gICAgICAgICAgICAuLi5tZXRhXG4gICAgICAgIH0gOiBtZXRhID8/IGRlZjEubWV0YVxuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlQnVpbGRlcihpbml0RGVmID0ge30pIHtcbiAgICBjb25zdCBfZGVmID0ge1xuICAgICAgICBwcm9jZWR1cmU6IHRydWUsXG4gICAgICAgIGlucHV0czogW10sXG4gICAgICAgIG1pZGRsZXdhcmVzOiBbXSxcbiAgICAgICAgLi4uaW5pdERlZlxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2RlZixcbiAgICAgICAgaW5wdXQgKGlucHV0KSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZXIgPSBnZXRQYXJzZUZuKGlucHV0KTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVOZXdCdWlsZGVyKF9kZWYsIHtcbiAgICAgICAgICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVzOiBbXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUlucHV0TWlkZGxld2FyZShwYXJzZXIpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG91dHB1dCAob3V0cHV0KSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZU91dHB1dCA9IGdldFBhcnNlRm4ob3V0cHV0KTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVOZXdCdWlsZGVyKF9kZWYsIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQsXG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlT3V0cHV0TWlkZGxld2FyZShwYXJzZU91dHB1dClcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWV0YSAobWV0YSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5ld0J1aWxkZXIoX2RlZiwge1xuICAgICAgICAgICAgICAgIG1ldGE6IG1ldGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB1c2UgKG1pZGRsZXdhcmVCdWlsZGVyT3JGbikge1xuICAgICAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhIG1pZGRsZXdhcmUgYnVpbGRlciBhbmQgYSBtaWRkbGV3YXJlIGZ1bmN0aW9uXG4gICAgICAgICAgICBjb25zdCBtaWRkbGV3YXJlcyA9ICdfbWlkZGxld2FyZXMnIGluIG1pZGRsZXdhcmVCdWlsZGVyT3JGbiA/IG1pZGRsZXdhcmVCdWlsZGVyT3JGbi5fbWlkZGxld2FyZXMgOiBbXG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZUJ1aWxkZXJPckZuXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5ld0J1aWxkZXIoX2RlZiwge1xuICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVzOiBtaWRkbGV3YXJlc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJ5IChyZXNvbHZlcikge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlc29sdmVyKHtcbiAgICAgICAgICAgICAgICAuLi5fZGVmLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdxdWVyeSdcbiAgICAgICAgICAgIH0sIHJlc29sdmVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgbXV0YXRpb24gKHJlc29sdmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlUmVzb2x2ZXIoe1xuICAgICAgICAgICAgICAgIC4uLl9kZWYsXG4gICAgICAgICAgICAgICAgdHlwZTogJ211dGF0aW9uJ1xuICAgICAgICAgICAgfSwgcmVzb2x2ZXIpO1xuICAgICAgICB9LFxuICAgICAgICBzdWJzY3JpcHRpb24gKHJlc29sdmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlUmVzb2x2ZXIoe1xuICAgICAgICAgICAgICAgIC4uLl9kZWYsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N1YnNjcmlwdGlvbidcbiAgICAgICAgICAgIH0sIHJlc29sdmVyKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVSZXNvbHZlcihfZGVmLCByZXNvbHZlcikge1xuICAgIGNvbnN0IGZpbmFsQnVpbGRlciA9IGNyZWF0ZU5ld0J1aWxkZXIoX2RlZiwge1xuICAgICAgICByZXNvbHZlcixcbiAgICAgICAgbWlkZGxld2FyZXM6IFtcbiAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIHJlc29sdmVNaWRkbGV3YXJlKG9wdHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzb2x2ZXIob3B0cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyOiBtaWRkbGV3YXJlTWFya2VyLFxuICAgICAgICAgICAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgY3R4OiBvcHRzLmN0eFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9KTtcbiAgICByZXR1cm4gY3JlYXRlUHJvY2VkdXJlQ2FsbGVyKGZpbmFsQnVpbGRlci5fZGVmKTtcbn1cbmNvbnN0IGNvZGVibG9jayA9IGBcbklmIHlvdSB3YW50IHRvIGNhbGwgdGhpcyBmdW5jdGlvbiBvbiB0aGUgc2VydmVyLCB5b3UgZG8gdGhlIGZvbGxvd2luZzpcblRoaXMgaXMgYSBjbGllbnQtb25seSBmdW5jdGlvbi5cblxuY29uc3QgY2FsbGVyID0gYXBwUm91dGVyLmNyZWF0ZUNhbGxlcih7XG4gIC8qIC4uLiB5b3VyIGNvbnRleHQgKi9cbn0pO1xuXG5jb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsZXIuY2FsbCgnbXlQcm9jZWR1cmUnLCBpbnB1dCk7XG5gLnRyaW0oKTtcbmZ1bmN0aW9uIGNyZWF0ZVByb2NlZHVyZUNhbGxlcihfZGVmKSB7XG4gICAgYXN5bmMgZnVuY3Rpb24gcHJvY2VkdXJlKG9wdHMpIHtcbiAgICAgICAgLy8gaXMgZGlyZWN0IHNlcnZlci1zaWRlIGNhbGxcbiAgICAgICAgaWYgKCFvcHRzIHx8ICEoJ2dldFJhd0lucHV0JyBpbiBvcHRzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNvZGVibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcnVuIHRoZSBtaWRkbGV3YXJlcyByZWN1cnNpdmVseSB3aXRoIHRoZSByZXNvbHZlciBhcyB0aGUgbGFzdCBvbmVcbiAgICAgICAgY29uc3QgY2FsbFJlY3Vyc2l2ZSA9IGFzeW5jIChjYWxsT3B0cyA9IHtcbiAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgY3R4OiBvcHRzLmN0eFxuICAgICAgICB9KT0+e1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IG1pZGRsZXdhcmUgPSBfZGVmLm1pZGRsZXdhcmVzW2NhbGxPcHRzLmluZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtaWRkbGV3YXJlKHtcbiAgICAgICAgICAgICAgICAgICAgY3R4OiBjYWxsT3B0cy5jdHgsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG9wdHMudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogb3B0cy5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBnZXRSYXdJbnB1dDogY2FsbE9wdHMuZ2V0UmF3SW5wdXQgPz8gb3B0cy5nZXRSYXdJbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogX2RlZi5tZXRhLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dDogY2FsbE9wdHMuaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIG5leHQgKF9uZXh0T3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dE9wdHMgPSBfbmV4dE9wdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFJlY3Vyc2l2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGNhbGxPcHRzLmluZGV4ICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHg6IG5leHRPcHRzICYmICdjdHgnIGluIG5leHRPcHRzID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jYWxsT3B0cy5jdHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLm5leHRPcHRzLmN0eFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBjYWxsT3B0cy5jdHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IG5leHRPcHRzICYmICdpbnB1dCcgaW4gbmV4dE9wdHMgPyBuZXh0T3B0cy5pbnB1dCA6IGNhbGxPcHRzLmlucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFJhd0lucHV0OiBuZXh0T3B0cyAmJiAnZ2V0UmF3SW5wdXQnIGluIG5leHRPcHRzID8gbmV4dE9wdHMuZ2V0UmF3SW5wdXQgOiBjYWxsT3B0cy5nZXRSYXdJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBvazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBnZXRUUlBDRXJyb3JGcm9tVW5rbm93bihjYXVzZSksXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcjogbWlkZGxld2FyZU1hcmtlclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIHRoZXJlJ3MgYWx3YXlzIGF0IGxlYXN0IG9uZSBcIm5leHRcIiBzaW5jZSB3ZSB3cmFwIHRoaXMucmVzb2x2ZXIgaW4gYSBtaWRkbGV3YXJlXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxSZWN1cnNpdmUoKTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgICAgICAgIGNvZGU6ICdJTlRFUk5BTF9TRVJWRVJfRVJST1InLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdObyByZXN1bHQgZnJvbSBtaWRkbGV3YXJlcyAtIGRpZCB5b3UgZm9yZ2V0IHRvIGByZXR1cm4gbmV4dCgpYD8nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlc3VsdC5vaykge1xuICAgICAgICAgICAgLy8gcmUtdGhyb3cgb3JpZ2luYWwgZXJyb3JcbiAgICAgICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XG4gICAgfVxuICAgIHByb2NlZHVyZS5fZGVmID0gX2RlZjtcbiAgICAvLyBGSVhNRSB0eXBlY2FzdCBzaG91bGRuJ3QgYmUgbmVlZGVkIC0gZml4aXR0dFxuICAgIHJldHVybiBwcm9jZWR1cmU7XG59XG5cbnZhciB1bnN0YWJsZUludGVybmFsc0V4cG9ydCA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBtZXJnZVJvdXRlcnM6IG1lcmdlUm91dGVycyxcbiAgY3JlYXRlQnVpbGRlcjogY3JlYXRlQnVpbGRlcixcbiAgbWlkZGxld2FyZU1hcmtlcjogbWlkZGxld2FyZU1hcmtlcixcbiAgdW5zZXRNYXJrZXI6IHVuc2V0TWFya2VyXG59KTtcblxuZXhwb3J0IHsgY3JlYXRlTWlkZGxld2FyZUZhY3RvcnkgYXMgYSwgY3JlYXRlSW5wdXRNaWRkbGV3YXJlIGFzIGIsIGNyZWF0ZUJ1aWxkZXIgYXMgYywgY3JlYXRlT3V0cHV0TWlkZGxld2FyZSBhcyBkLCBleHBlcmltZW50YWxfc3RhbmRhbG9uZU1pZGRsZXdhcmUgYXMgZSwgbWlkZGxld2FyZU1hcmtlciBhcyBmLCB1bnNldE1hcmtlciBhcyBnLCBtZXJnZVJvdXRlcnMgYXMgbSwgdW5zdGFibGVJbnRlcm5hbHNFeHBvcnQgYXMgdSB9O1xuIl0sIm5hbWVzIjpbImQiLCJkZWZhdWx0Rm9ybWF0dGVyIiwiYSIsImRlZmF1bHRUcmFuc2Zvcm1lciIsImMiLCJjcmVhdGVSb3V0ZXJGYWN0b3J5IiwiVCIsIlRSUENFcnJvciIsImciLCJnZXRUUlBDRXJyb3JGcm9tVW5rbm93biIsImNyZWF0ZU1pZGRsZXdhcmVGYWN0b3J5IiwiY3JlYXRlTWlkZGxld2FyZUlubmVyIiwibWlkZGxld2FyZXMiLCJfbWlkZGxld2FyZXMiLCJ1bnN0YWJsZV9waXBlIiwibWlkZGxld2FyZUJ1aWxkZXJPckZuIiwicGlwZWRNaWRkbGV3YXJlIiwiY3JlYXRlTWlkZGxld2FyZSIsImZuIiwiZXhwZXJpbWVudGFsX3N0YW5kYWxvbmVNaWRkbGV3YXJlIiwiY3JlYXRlIiwiaXNQbGFpbk9iamVjdCIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSIsImNyZWF0ZUlucHV0TWlkZGxld2FyZSIsInBhcnNlIiwiaW5wdXRNaWRkbGV3YXJlIiwib3B0cyIsInBhcnNlZElucHV0IiwicmF3SW5wdXQiLCJnZXRSYXdJbnB1dCIsImNhdXNlIiwiY29kZSIsImNvbWJpbmVkSW5wdXQiLCJpbnB1dCIsIm5leHQiLCJfdHlwZSIsImNyZWF0ZU91dHB1dE1pZGRsZXdhcmUiLCJvdXRwdXRNaWRkbGV3YXJlIiwicmVzdWx0Iiwib2siLCJkYXRhIiwibWVzc2FnZSIsIm1lcmdlV2l0aG91dE92ZXJyaWRlcyIsIm9iajEiLCJvYmpzIiwibmV3T2JqIiwiT2JqZWN0IiwiYXNzaWduIiwib3ZlcnJpZGVzIiwia2V5IiwiRXJyb3IiLCJtZXJnZVJvdXRlcnMiLCJyb3V0ZXJMaXN0IiwicmVjb3JkIiwibWFwIiwiciIsIl9kZWYiLCJlcnJvckZvcm1hdHRlciIsInJlZHVjZSIsImN1cnJlbnRFcnJvckZvcm1hdHRlciIsIm5leHRSb3V0ZXIiLCJfY29uZmlnIiwidHJhbnNmb3JtZXIiLCJwcmV2IiwiY3VycmVudCIsInJvdXRlciIsImlzRGV2Iiwic29tZSIsImFsbG93T3V0c2lkZU9mU2VydmVyIiwiaXNTZXJ2ZXIiLCIkdHlwZXMiLCJnZXRQYXJzZUZuIiwicHJvY2VkdXJlUGFyc2VyIiwicGFyc2VyIiwicGFyc2VBc3luYyIsImJpbmQiLCJ2YWxpZGF0ZVN5bmMiLCJhc3NlcnQiLCJ2YWx1ZSIsIm1pZGRsZXdhcmVNYXJrZXIiLCJ1bnNldE1hcmtlciIsIlN5bWJvbCIsImNyZWF0ZU5ld0J1aWxkZXIiLCJkZWYxIiwiZGVmMiIsImlucHV0cyIsIm1ldGEiLCJyZXN0IiwiY3JlYXRlQnVpbGRlciIsImluaXREZWYiLCJwcm9jZWR1cmUiLCJvdXRwdXQiLCJwYXJzZU91dHB1dCIsInVzZSIsInF1ZXJ5IiwicmVzb2x2ZXIiLCJjcmVhdGVSZXNvbHZlciIsInR5cGUiLCJtdXRhdGlvbiIsInN1YnNjcmlwdGlvbiIsImZpbmFsQnVpbGRlciIsInJlc29sdmVNaWRkbGV3YXJlIiwibWFya2VyIiwiY3R4IiwiY3JlYXRlUHJvY2VkdXJlQ2FsbGVyIiwiY29kZWJsb2NrIiwidHJpbSIsImNhbGxSZWN1cnNpdmUiLCJjYWxsT3B0cyIsImluZGV4IiwibWlkZGxld2FyZSIsInBhdGgiLCJfbmV4dE9wdHMiLCJuZXh0T3B0cyIsImVycm9yIiwidW5zdGFibGVJbnRlcm5hbHNFeHBvcnQiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJiIiwiZSIsImYiLCJtIiwidSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@trpc/server/dist/unstableInternalsExport-10cc2bae.mjs\n");

/***/ })

};
;