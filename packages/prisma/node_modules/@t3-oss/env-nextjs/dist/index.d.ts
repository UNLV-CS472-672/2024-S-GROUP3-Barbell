import * as zod from 'zod';
import { ZodType } from 'zod';
import { StrictOptions, ServerClientOptions } from '@t3-oss/env-core';

declare const CLIENT_PREFIX: "NEXT_PUBLIC_";
type ClientPrefix = typeof CLIENT_PREFIX;
type Options<TServer extends Record<string, ZodType>, TClient extends Record<`${ClientPrefix}${string}`, ZodType>, TShared extends Record<string, ZodType>> = Omit<StrictOptions<ClientPrefix, TServer, TClient, TShared> & ServerClientOptions<ClientPrefix, TServer, TClient>, "runtimeEnvStrict" | "runtimeEnv" | "clientPrefix"> & ({
    runtimeEnv: StrictOptions<ClientPrefix, TServer, TClient, TShared>["runtimeEnvStrict"];
    experimental__runtimeEnv?: never;
} | {
    runtimeEnv?: never;
    experimental__runtimeEnv: Record<{
        [TKey in keyof TClient]: TKey extends `${ClientPrefix}${string}` ? TKey : never;
    }[keyof TClient] | {
        [TKey in keyof TShared]: TKey extends string ? TKey : never;
    }[keyof TShared], string | boolean | number | undefined>;
});
declare function createEnv<TServer extends Record<string, ZodType> = NonNullable<unknown>, TClient extends Record<`${ClientPrefix}${string}`, ZodType> = NonNullable<unknown>, TShared extends Record<string, ZodType> = NonNullable<unknown>>(opts: Options<TServer, TClient, TShared>): Readonly<(zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TServer>, { [k_1 in keyof zod.baseObjectOutputType<TServer>]: undefined extends zod.baseObjectOutputType<TServer>[k_1] ? never : k_1; }[keyof TServer]> extends infer T_4 ? { [k in keyof T_4]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TServer>, { [k_1 in keyof zod.baseObjectOutputType<TServer>]: undefined extends zod.baseObjectOutputType<TServer>[k_1] ? never : k_1; }[keyof TServer]>[k]; } : never) & (zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TClient>, { [k_3 in keyof zod.baseObjectOutputType<TClient>]: undefined extends zod.baseObjectOutputType<TClient>[k_3] ? never : k_3; }[keyof TClient]> extends infer T_5 ? { [k_2 in keyof T_5]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TClient>, { [k_3 in keyof zod.baseObjectOutputType<TClient>]: undefined extends zod.baseObjectOutputType<TClient>[k_3] ? never : k_3; }[keyof TClient]>[k_2]; } : never) & (zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TShared>, { [k_5 in keyof zod.baseObjectOutputType<TShared>]: undefined extends zod.baseObjectOutputType<TShared>[k_5] ? never : k_5; }[keyof TShared]> extends infer T_6 ? { [k_4 in keyof T_6]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TShared>, { [k_5 in keyof zod.baseObjectOutputType<TShared>]: undefined extends zod.baseObjectOutputType<TShared>[k_5] ? never : k_5; }[keyof TShared]>[k_4]; } : never) extends infer T ? { [P in keyof T]: ((zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TServer>, { [k_1 in keyof zod.baseObjectOutputType<TServer>]: undefined extends zod.baseObjectOutputType<TServer>[k_1] ? never : k_1; }[keyof TServer]> extends infer T_1 ? { [k in keyof T_1]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TServer>, { [k_1 in keyof zod.baseObjectOutputType<TServer>]: undefined extends zod.baseObjectOutputType<TServer>[k_1] ? never : k_1; }[keyof TServer]>[k]; } : never) & (zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TClient>, { [k_3 in keyof zod.baseObjectOutputType<TClient>]: undefined extends zod.baseObjectOutputType<TClient>[k_3] ? never : k_3; }[keyof TClient]> extends infer T_2 ? { [k_2 in keyof T_2]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TClient>, { [k_3 in keyof zod.baseObjectOutputType<TClient>]: undefined extends zod.baseObjectOutputType<TClient>[k_3] ? never : k_3; }[keyof TClient]>[k_2]; } : never) & (zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TShared>, { [k_5 in keyof zod.baseObjectOutputType<TShared>]: undefined extends zod.baseObjectOutputType<TShared>[k_5] ? never : k_5; }[keyof TShared]> extends infer T_3 ? { [k_4 in keyof T_3]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TShared>, { [k_5 in keyof zod.baseObjectOutputType<TShared>]: undefined extends zod.baseObjectOutputType<TShared>[k_5] ? never : k_5; }[keyof TShared]>[k_4]; } : never))[P]; } : never>;

export { createEnv };
