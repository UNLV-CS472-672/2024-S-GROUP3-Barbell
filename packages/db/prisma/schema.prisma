// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @db.Char(20)
  status        String?
  streak        Int
  friends       Friend[]       @relation("UserFriends")
  log           Log[]
  workouts      Workout[]
  awards        Award[]
  notifications Notification[]
}

model Friend {
  id     String @id @default(uuid())
  user   User   @relation("UserFriends", fields: [userId], references: [id])
  userId String
}

model Log {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  finishedAt DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  workout    Workout  @relation(fields: [workoutId], references: [id])
  workoutId  String
}

model Workout {
  id            String     @id @default(uuid())
  name          String     @db.Char(100)
  description   String?
  duration      Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  finishedAt    DateTime
  likes         Int        @default(0)
  exercises     Exercise[]
  past_workouts Log[]
  user          User       @relation(fields: [userId], references: [id])
  userId        String
}

model Exercise {
  id        String   @id @default(uuid())
  name      String   @db.Char(100)
  note      String?
  sets      Set[]
  body_part BodyPart
  category  Category
  workout   Workout  @relation(fields: [workoutId], references: [id])
  workoutId String
}

model Set {
  id         String   @id @default(uuid())
  type       SetType  @default(NORMAL)
  reps       Int
  weight     Float
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
}

model Award {
  id          String   @id @default(uuid())
  name        String   @db.Char(100)
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id           String              @id @default(uuid())
  createdAt    DateTime            @default(now())
  content      String
  type         NotificationType
  subtype      NotificaitonSubtype
  read         Boolean             @default(false)
  user         User                @relation(fields: [userId], references: [id])
  userId       String
  userSenderId String? // Full relation hasn't been made yet, its giving errors so just adding the sender user id for now
}

enum NotificationType {
  MISC
  DM
  GROUP
}

enum NotificaitonSubtype {
  SYS
  NUDGE
  FRIEND_REQUEST
}

enum SetType {
  NORMAL
  WARMUP
  DROPSET
  FAILURE
}

enum BodyPart {
  LEGS
  ARMS
  CHEST
  BACK
  SHOULDERS
  CORE
  FULL_BODY
  OTHER
}

enum Category {
  BARBELL
  DUMBBELL
  MACHINE
  ASSISTED_BODYWEIGHT
  WEIGHTED_BODYWEIGHT
  BODYWEIGHT
  DURATION
  CARDIO
  REPS_ONLY
  OTHER
}
